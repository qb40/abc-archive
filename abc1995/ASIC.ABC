Damond Walker                  SIEVE OF ERATOSTHENES          PRIME,NUMBER,GENERATOR         Unknown Date           ASIC                   66   1595     SIEVE.ASI   rem ********************************„rem *** ASIC version of Classic  ***„rem ***  Sieve of Eratosthenes   ***„rem ***      Benchmark           ***„rem ***   by Damond Walker       ***„rem *** c2mxwalk@fre.fsu.umd.edu ***„rem ********************************„rem *** Adapted from:            ***„rem ***    Byte Magzine          ***„rem ***    September, 1981       ***„rem ***    Pages 180-189         ***„rem ********************************„rem *** Timings:                 ***„rem ***  486dx4-100    0.494     ***„rem ***  PS/2 Mod 50Z 11.485     ***„rem ***   ('286-10)              ***„rem ***                          ***„rem *** Times are in seconds.    ***„rem ********************************„„DIM Flags(8190)„„CLS„PRINT "Sieve - 25 iterations"„X& = TIMER„„FOR Iter = 1 TO 25„  Count = 0„„  FOR I = 0 TO 8190„    Flags(I) = 1„  NEXT I„„  FOR I = 0 TO 8190„    IF Flags(I) = 1 THEN„       Prime = I + I„       Prime = Prime + 3„       K = I + Prime„       WHILE K <= 8190„         Flags(K) = 0„         K = K + Prime„       WEND„       Count = Count + 1„    ENDIF„  NEXT I„NEXT Iter„„XX& = TIMER„„Seconds@ = xx& - x&„Seconds@ = Seconds@ / 18.2@„Seconds$ = str$(Seconds@)„Seconds$ = ltrim$(Seconds$)„„print Count;„print " primes in ";„print Seconds$;„print " seconds."„„END„„rem Note:- To get this to compile, you have to set Decimal & Extended math on.„rem As the remarks show up top, my 486dx4-100 ran the thing in less than a„rem second while my PS/2 Mod 50Z ('286-10) ran the sucker in 11.5 seconds.„rem -: Moribund„„Phil Wright                    DRAW BOX DEMO                  DRAW,BOX,DEMO                  Unknown Date           ASIC                   116  2451     DRAWBOX.ASI REM drawbox.asi for ASIC 5.0„REM ported from original QBasic source code written by:„REM acr@iccu6.ipswichcity.qld.gov.au <Phil Wright> *Thanks Mate!*„„CLS„„COLOR 0, 7„for i = 1 to 26„a$ = string$(80, " ")„print a$„next i„„REM Message may be resized and the box will fit it (keep it divisible by 2).„Message$ = " This is<---------->a re-sizable<------------>screen "„„GOSUB PrintMessage:„GOSUB Constants:„GOSUB DrawTopBox:„GOSUB Constants:„GOSUB DrawSidesBox:„GOSUB Constants:„GOSUB DrawBotBox:„GOSUB SaveScreen:„GOSUB MessageTimer:„END„„PrintMessage:„   REM was> LOCATE 12, 40 - (LEN(Message$) / 2)„      Col = LEN(Message$)„      Col = Col / 2„      Col = 40 - Col„   LOCATE 12, Col„   PRINT Message$„RETURN„„Constants:„   UpRow = 11„       REM was> UpCol = 40 - LEN(Message$) / 2 + 1„       UpCol = LEN(Message$)„       UpCol = UpCol / 2„       UpCol = UpCol + 1„   UpCol = 40 - UpCol„   LoRow = 13„       REM was> LoCol = 40 + LEN(Message$) / 2„       LoCol = LEN(Message$„       LoCol = LoCol / 2„   LoCol = 40 + LoCol„   Back = 1„   Fore = 7„RETURN„„„DrawTopBox:„COLOR Fore, Back„LOCATE UpRow, UpCol„REM was> PRINT CHR$(218) + STRING$(LoCol - UpCol - 1, CHR$(196)) + CHR$(191)„   A$ = CHR$(218)„   B = LoCol - UpCol„   B = B - 1„   C$ = CHR$(196)„   D$ = CHR$(191)„   X$ = STRING$(B, C$)„   A$ = A$ + X$„   A$ = A$ + D$„PRINT A$„RETURN„„DrawSidesBox:„REM was> FOR Z = (UpRow + 1) TO (LoRow - 1)„   REM prime the FOR/NEXT loop„   UpRow = UpRow + 1„   LoRow = LoRow - 1„FOR Z = UpRow TO LoRow„       LOCATE Z, UpCol„       REM was> PRINT CHR$(179)„           W$ = CHR$(179)„       PRINT W$„       LOCATE Z, LoCol„       REM was> PRINT CHR$(179)„           U$ = CHR$(179)„       PRINT U$„   NEXT Z„RETURN„„DrawBotBox:„LOCATE LoRow, UpCol„REM was> PRINT CHR$(192) + STRING$(LoCol - UpCol - 1, CHR$(196)) + CHR$(217)„   A$ = CHR$(192)„   B = LoCol - UpCol„   B = B - 1„   C$ = CHR$(196)„   D$ = CHR$(217)„   X$ = STRING$(B, C$)„   A$ = A$ + X$„   A$ = A$ + D$„PRINT A$„RETURN„„SaveScreen:„DEFSEG = &hexB800„BSAVE "screen", 0, 4000„RETURN„„MessageTimer:„REM 5 sec. timer routine from original QBasic source code written by:„REM obother@netcom.com (Glen Blankenship)„REM (5 * 18.2 clock-ticks-per-second = 91)„TickOne = TIMER„FOR i = 1 TO 91„   TickTwo = TickOne„   WHILE TickTwo = TickOne„       TickOne = TIMER„   WEND„NEXT i„RETURN„„Kenneth W. Melvin              MENU IN A BOX                  kwmelvin@nr.infi.net           08-20-95 (00:00)       ASIC                   127  3510     BOXMENU.ASI REM BOXMENU.ASI 08/20/95 kwm„REM Demonstrates a simple, structured, Menu-in-a-box.„REM For ASIC 5.0.„„REM *******************************************************************„REM *********************** Main Program Module ***********************„REM *******************************************************************„CLS„COLOR 1, 7„   GOSUB MakeBox:„   GOSUB PrintMessage:„   GOSUB Menu:„END„„REM *******************************************************************„REM *** This module draws the box on the screen and is divided into ***„REM *** three smaller modules which draw different parts of the box ***„REM *******************************************************************„MakeBox:„   GOSUB UpperBox:„   GOSUB BoxSides:„   GOSUB LowerBox:„RETURN„„REM *******************************************************************„REM ********** This sub-module draws the top of the box ***************„REM *******************************************************************„UpperBox:„   LOCATE 8, 24„       A$ = SPACE$(23)„       B$ = CHR$(201)„       C$ = CHR$(187)„       D$ = B$ + A$„       D$ = D$ + C$„   PRINT D$„   LOCATE 8, 25„       A$ = SPACE$(21)„       B$ = CHR$(205)„       C$ = B$ + A$„       C$ = C$ + B$„   PRINT C$„RETURN„„REM *********************************************************************„REM ************ This sub-module draws the sides of the box *************„REM *********************************************************************„BoxSides:„   J = 9„   FOR I = 1 TO 5„       LOCATE J, 24„           A$ = SPACE$(23)„           B$ = CHR$(186)„           C$ = B$ + A$„           C$ = C$ + B$„       PRINT C$„       J = J + 1„   NEXT I„RETURN„„REM ********************************************************************„REM *********** This sub-module draws the bottom of the box ************„REM ********************************************************************„LowerBox:„   LOCATE 14, 24„       A$ = SPACE$(23)„       B$ = CHR$(200)„       C$ = CHR$(188)„       D$ = B$ + A$„       D$ = D$ + C$„   PRINT D$„   LOCATE 14, 25„       E$ = STRING$(23, 205)„   PRINT E$„RETURN„„REM **********************************************************************„REM ******************** This module prints your message *****************„REM **********************************************************************„PrintMessage:„   LOCATE 8, 26„           print "      MAIN MENU      "„   LOCATE 10, 26„           print "  [A] First Choice   "„   LOCATE 11, 26„           print "  [B] Second Choice  "„   LOCATE 12, 26„           print "  [C] Third Choice   "„   LOCATE 13, 26„           print "  [X] Exit this Menu "„RETURN„„REM ***********************************************************************„REM ************************* Menu Module *********************************„REM ***********************************************************************„Menu:„locate 16, 0„color 7, 0„print "Choose..."„input Choice$„if Choice$ = "A" then FirstChoice:„if Choice$ = "a" then FirstChoice:„if Choice$ = "B" then SeconChoice:„if Choice$ = "b" then SeconChoice:„if Choice$ = "C" then ThirdChoice:„if Choice$ = "c" then ThirdChoice:„if Choice$ = "X" then End:„if Choice$ = "x" then End:„„FirstChoice:„ locate 18,0„ print "You chose A"„ goto Menu:„„SeconChoice:„ locate 18,0„ print "You chose B"„ goto Menu:„„ThirdChoice:„ locate 18,0„ print "You chose C"„ goto Menu:„„End:„ end„„„Kenneth W. Melvin              ASCII CHARACTER TABLE          kwmelvin@nr.infi.net           08-20-95 (00:00)       ASIC                   82   3146     ASCIDATA.ASI       REM Filename: ASICDATA.ASI for ASIC v5.0„       REM Date: 20 August 1995 kwm„„REM ***********************************************************************„REM ********************** Main Program Module ****************************„REM ***********************************************************************„DATA 32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47„DATA 48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63„DATA 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79„DATA 80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95„DATA 96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111„DATA 112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127„DATA 128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143„DATA 144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159„DATA 160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175„DATA 176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191„DATA 192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207„DATA 208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223„DATA 224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239„DATA 240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255„DATA 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00„       CLS„       COLOR 7, 0„       GOSUB PrintTitle:„       GOSUB Start:„       END„„REM ***********************************************************************„REM ********************** Title Screen Module ****************************„REM ***********************************************************************„PrintTitle:„       WIDTH 40„       CLS„       LOCATE 10, 18„           PRINT "ASCII"„       LOCATE 11, 16„           PRINT "CHARACTER"„       LOCATE 12, 18„           PRINT "TABLE"„       LOCATE 23, 13„           PRINT "<Press any key>"„       GOSUB Pause:„       WIDTH 80„RETURN„„REM ***********************************************************************„REM ******************** Press-A-Key Pause Routine ************************„REM ***********************************************************************„Pause:„       inky$ = INKEY$„       IF inky$ = "" THEN Pause:„RETURN„„REM ***********************************************************************„REM ********************* Ascii Character Table Module ********************„REM ***********************************************************************„Start:„REM This program displays the ASCII characters 32-255.„REM 32 is Space, and 255 is Blank, so a character will not show for them.„„CLS„FOR Ascii = 1 TO 240„   LOCATE 4, 0„      FOR ShowChar = 1 TO 16„           READ Ascii„           PRINT Ascii;„           PRINT "= ";„           Strg$ = CHR$(Ascii)„           PRINT Strg$„      NEXT ShowChar„   LOCATE 23, 0„   PRINT "<Press a key>"„   GOSUB Pause:„   CLS„NEXT Ascii„RETURN„„REM The first FOR/NEXT iteration supplies the READ statement with fodder.„REM The second FOR/NEXT iteration displays the data to the screen, 16„REM characters at a time. The use of the Pause subroutine allows the user„REM to look at each screen.„„