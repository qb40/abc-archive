Hardin Brothers                MOUSE DEMO                     kwmelvin@nr.infi.net           01-25-96 (00:00)       QB, QBasic, PDS        474  12984    MOUSDEMO.BAS'----------------------------------------------------------------------------„'    FileName:  MOUSEDEMO.BAS for QBasic 1.x„'      Author:  Hardin Brothers„' Publication:  _DOS World_ issue #25 January 1996 pp.51-57„' DW Internet:  75300.2361@compuserve.com„'      DW BBS:  603-924-3181 [8-N-1]„'  DW Address:  DOS World, 86 Elm St., Peterborough, NH 03458  USA„'    Comments:  To find out what the mouse is doing, your program must "talk"„'            :  to the mouse driver. A mouse and driver must be installed„'            :  for this program to work. Then your program must make requests„'            :  of the mouse driver by calling Interrupt 33 hexadecimal. (An„'            :  Interrupt is similar to a CALL or GOSUB in QBasic, but instead„'            :  of working within a program, it lets one program call another,„'            :  without worrying about where the second program is in memory.„'            :„' Essential Mouse Services„' Procedure  :  Purpose„'------------:---------------------------------------------------------------„'   MouseCall:  Calls mouse and passes it a command via CPU registers.„'            :„'    MouseInt:  Initializes mouse and reports number of buttons. Returns 0„'            :  if mouse driver unavailable or mouse not present.„'            :„'  MouseSetup:  Sets up mouse machine-language routine. You must call this„'            :  subprocedure before calling any other service!„' -----------:---------------------------------------------------------------„' Optional Mouse Services   „' Procedure  :  Purpose„' -----------:---------------------------------------------------------------„'   MouseShow:  Displays mouse cursor.„'            :„'   MouseHide:  Hides mouse cursor. To avoid appearance of "ghost" cursors,„'            :  use this service before printing or updating screen.„'            :„' MouseGetPr_:  Gets information about last mouse click. Shows which button„'essInfo     :  is down, number of clicks since last call, vertical and„'            :  horizontal position of cursor at last mouse click.„'            :„' MouseGetRe_:  Gets information about last release of mouse buttons. Use„'leaseInfo   :  MouseGetPressInfo and MouseGetReleaseInfo together to let„'            :  user drag objects around screen.„'            :„' MouseGetSt_:  Gets information on current status of mouse.„'atus        :„' MouseReadC_:  Returns horizontal and vertical position of mouse cursor,„'ounters     :  relative to its location last time function called.„'            :„' MouseSetHo_:  Restricts mouse movement by setting minimum and maximum„'rzRange     :  horizontal range of mouse cursor.„'            :„' MouseSetVe_:  Restricts mouse movement by setting minimum and maximum„'rtRange     :  vertical range of mouse cursor.„'            :„'MouseSetPosn:  Sets mouse cursor to correspond to values of HPosn% and VPosn%„'            :„'            :„'----------------------------------------------------------------------------„DECLARE SUB Demo3 ()„DECLARE SUB Demo2 ()„DECLARE SUB Demo1 ()„DECLARE FUNCTION MouseInit% ()„DECLARE SUB MouseCall ()„DECLARE SUB MouseGetPressInfo (LBtn%, RBtn%, MBtn%, Count%, HPosn%, VPosn%)„DECLARE SUB MouseGetReleaseInfo (LBtn%, RBtn%, MBtn%, Count%, HPosn%, VPosn%)„DECLARE SUB MouseGetStatus (LBtn%, RBtn%, MBtn%, HPosn%, VPosn%)„DECLARE SUB MouseHide ()„DECLARE SUB MouseReadCounters (HCount%, VCount%)„DECLARE SUB MouseSetHorizRange (HMin%, HMax%)„DECLARE SUB MouseSetPosn (HPosn%, VPosn%)„DECLARE SUB MouseSetup ()„DECLARE SUB MouseSetVertRange (VMin%, VMax%)„DECLARE SUB MouseShow ()„„MouseInt:„' Machine language routine 40 bytes long:„DATA 55          : 'PUSH BP„DATA 89, E5      : 'MOV  BP, SP„DATA 56          : 'PUSH SI„DATA 8B, 76, 06  : 'MOV  SI,[BP+6]„DATA 8B, 04      : 'MOV  AX,[SI]„DATA 8B, 5C, 02  : 'MOV  BX,[SI+2]„DATA 8B, 4C, 04  : 'MOV  CX,[SI+4]„DATA 8B, 54, 06  : 'MOV  DX,[SI+6]„DATA 8E, 44, 08  : 'MOV  ES,[SI+8]„DATA CD, 33      : 'INT  33h„DATA 8C, 44, 08  : 'MOV  [SI+8],ES„DATA 89, 54, 06  : 'MOV  [SI+6],DX„DATA 89, 4C, 04  : 'MOV  [SI+4],CX„DATA 89, 5C, 02  : 'MOV  [SI+2],BX„DATA 89, 04      : 'MOV  [SI],AX„DATA 5E          : 'POP     SI„DATA 5D          : 'POP  BP„DATA CB          : 'RETF„„TYPE MouseRegs„  AX AS INTEGER„  BX AS INTEGER„  CX AS INTEGER„  DX AS INTEGER„  ES AS INTEGER„END TYPE„„DIM SHARED MReg AS MouseRegs„REDIM SHARED MouseRoutine%(0 TO 19)„DIM SHARED MouseReady%„MouseReady% = 0„MouseSetup„MouseReady% = MouseInit„„DEFINT A-Z„„CLS„TYPE TextMask„  Bg AS INTEGER„  Fg AS INTEGER„  Char AS INTEGER„  Mask AS INTEGER„END TYPE„„IF MouseReady% THEN„  Demo1„  Demo2„  Demo3„ELSE„  CLS„  PRINT "No Mouse available for demonstration"„END IF„END„„SUB Demo1„'*„'* display the mouse„'* and its current status„'*„  CLS„  PRINT , , "Press Esc to end"„  PRINT "Mouse has"; MouseReady%; "buttons";„  MouseShow„  DO„    CALL MouseGetStatus(L%, R%, M%, Horiz%, Vert%)„    LOCATE 3, 1„    IF L% THEN PRINT "Left Dn";  ELSE PRINT "Left Up";„    IF MouseReady > 2 THEN„      IF M% THEN PRINT " -- Mid Dn";  ELSE PRINT " -- Mid Up";„    END IF„    IF R% THEN PRINT " -- Right Dn";  ELSE PRINT " -- Right Up";„    LOCATE 4, 1„    PRINT USING "Mouse at column ### and row ###"; Horiz%; Vert%„    Esc$ = INKEY$„  LOOP UNTIL Esc$ = CHR$(27)„  MouseHide„END SUB„„SUB Demo2„  RANDOMIZE TIMER„  MouseShow„  DO„    CLS„    PRINT "Click left button for new window - right button to end. "„    Top = INT(RND * 15) + 2„    Vert = INT(RND * (22 - Top)) + 3„    Left = INT(RND * 60) + 1„    Horiz = INT(RND * (77 - Left)) + 3„    LOCATE Top, Left„    PRINT CHR$(201); STRING$(Horiz, 205); CHR$(187);„    FOR I = 1 TO Vert„      LOCATE Top + I, Left„      PRINT CHR$(186); STRING$(Horiz, 32); CHR$(186);„    NEXT I„    LOCATE Top + Vert, Left„    PRINT CHR$(200); STRING$(Horiz, 205); CHR$(188);„    CALL MouseSetHorizRange(Left * 8, (Left + Horiz - 1) * 8)„    CALL MouseSetVertRange(Top * 8, (Top + Vert - 2) * 8)„Demo2LP:„  L = 0: R = 1: M = 0„  CALL MouseGetPressInfo(L, R, M, CNT, H, V)„  IF R THEN„    MouseHide„    EXIT SUB„  END IF„  L = 1: R = 0: M = 0„  CALL MouseGetPressInfo(L, R, M, CNT, H, V)„  IF L = 0 THEN GOTO Demo2LP„  DO„    CALL MouseGetStatus(L, R, M, H, V)„  LOOP UNTIL (L OR R OR M) = 0„LOOP„END SUB„„SUB Demo3„  CLS„  PRINT "Press Esc to end"„  PRINT "Use mouse and left button or arrow keys and Enter to select"„  DIM CH$(1 TO 4)„  FOR I = 1 TO 4„    CH$(I) = CHR$(64 + I)„    LOCATE 10 + I, 35„    PRINT "Select "; CH$(I);„  NEXT I„  COLOR 0, 7„  LOCATE 11, 35„  PRINT "Select "; CH$(1);„  OldSel = 1„  Hit = 0„  CALL MouseSetHorizRange(34 * 8, 34 * 8)„  CALL MouseSetVertRange(10 * 8, 13 * 8)„  CALL MouseSetPosn(34 * 8, 10 * 8)„  DO„    CALL MouseGetStatus(L, R, M, H, V)„    Sel = V \ 8 - 9„    Hit = L OR R OR M„    K$ = INKEY$„    IF LEN(K$) THEN„      SELECT CASE K$„        CASE CHR$(27)             'Esc„          EXIT SUB„        CASE CHR$(0) + CHR$(72)   'Up arrow„          IF Sel > 1 THEN Sel = Sel - 1„        CASE CHR$(0) + CHR$(80)   'Dn arrow„          IF Sel < 4 THEN Sel = Sel + 1„        CASE CHR$(13)„          Hit = -1„      END SELECT„    END IF„    IF Sel <> OldSel THEN„      COLOR 7, 0„      LOCATE 10 + OldSel, 35„      PRINT "Select "; CH$(OldSel);„      COLOR 0, 7„      LOCATE 10 + Sel, 35„      PRINT "Select "; CH$(Sel);„      OldSel = Sel„      IF Sel <> V \ 8 - 9 THEN„        CALL MouseSetPosn(34 * 8, (Sel + 9) * 8)„      END IF„    END IF„    IF Hit THEN„    COLOR 7, 0„    LOCATE 25, 1„    PRINT USING "Selected &"; CH$(Sel);„    Hit = 0„  END IF„LOOP„END SUB„„SUB MouseCall„'*„'* Call mouse using current values in MReg registers„'*„  DEF SEG = VARSEG(MouseRoutine%(0))„  Addr% = VARPTR(MouseRoutine%(0))„  CALL Absolute(MReg, Addr%)„  DEF SEG„END SUB„„SUB MouseGetPressInfo (LBtn%, RBtn%, MBtn%, Count%, HPosn%, VPosn%)„'*„'* Gets info about last mouse click„'* Set LBtn%, RBtn%, or MBtn% <> 0 for button to query„'* LBtn%, RBtn%, or MBtn% return 1 to show which„'* button is currently down or 0 to show which button„'* is currently up„'* Count% has count of clicks since last call„'* HPosn% and VPosn% are horizontal and vertical position„'* of cursor at last click„'*„  IF MouseReady% THEN„    IF (LBtn% OR RBtn% OR MBtn%) <> 0 THEN„      MReg.AX = 5„      IF LBtn% THEN MReg.BX = 0„      IF RBtn% THEN MReg.BX = 1„      IF MBtn% THEN MReg.BX = 2„      MouseCall„      LBtn% = MReg.AX AND 1„      RBtn% = (MReg.AX AND 2) \ 2„      MBtn% = (MReg.AX AND 4) \ 4„      Count% = MReg.BX„      HPosn% = MReg.CX„      VPosn% = MReg.DX„    ELSE„      CALL MouseGetStatus(LBtn%, RBtn%, MBtn%, HPosn%, VPosn%)„      Count% = 0„    END IF„  ELSE„    LBtn% = 0: RBtn% = 0: MBtn% = 0„    Count% = 0„    HPosn% = -1: VPosn% = -1„  END IF„END SUB„„SUB MouseGetReleaseInfo (LBtn%, RBtn%, MBtn%, Count%, HPosn%, VPosn%)„'*„'* Gets info about last mouse release„'* Set LBtn%, RBtn%, or MBtn% <> 0 for button query„'* LBtn%, RBtn%, or MBtn% return 1 to show which„'* button is currently down or 0 to show which„'* button is currently up„'* Count% has count of releases since last call„'* HPosn% and VPosn% are horizontal and vertical position„'* of cursor at last release„'*„  IF MouseReady% THEN„    IF (LBtn% OR RBtn% OR MBtn%) <> 0 THEN„      MReg.AX = 6„      IF LBtn% THEN MReg.BX = 0„      IF RBtn% THEN MReg.BX = 1„      IF MBtn% THEN MReg.BX = 2„      MouseCall„      LBtn% = MReg.AX AND 1„      RBtn% = (MReg.AX AND 2) \ 2„      MBtn% = (MReg.AX AND 4) \ 4„      Count% = MReg.BX„      HPosn% = MReg.CX„      VPosn% = MReg.DX„    ELSE„      CALL MouseGetStatus(LBtn%, RBtn%, MBtn%, HPosn%, VPosn%)„      Count% = 0„    END IF„  ELSE„    LBtn% = 0: RBtn% = 0: MBtn% = 0„    Count% = 0„    HPosn% = -1: VPosn% = -1„  END IF„END SUB„„SUB MouseGetStatus (LBtn%, RBtn%, MBtn%, HPosn%, VPosn%)„'*„'* Gets current mouse status„'* LBtn%, RBtn%, and MBtn% return„'* 1 if button is down or 0 if button is up„'* HPosn% returns horizontal position„'* VPosn% returns vertical position„'*„  IF MouseReady% THEN„    MReg.AX = 3„    MouseCall„    LBtn% = MReg.BX AND 1„    RBtn% = (MReg.BX AND 2) \ 2„    MBtn% = (MReg.BX AND 4) \ 4„    HPosn% = MReg.CX„    VPosn% = MReg.DX„  ELSE„    LBtn% = 0: RBtn% = 0: MBtn% = 0„    HPosn% = -1: VPosn% = -1„  END IF„END SUB„„SUB MouseHide„'*„'* Hide the mouse cursor„'* Decrement the mouse cursor flag„'* Cursor hidden if flag <> 0„'* MouseInit sets flag to -1„'*„  IF MouseReady% THEN„    MReg.AX = 2„    MouseCall„  END IF„END SUB„„FUNCTION MouseInit%„'*„'* Initialize mouse and return„'* number of buttons„'* Return 0 if mouse driver„'* unavailable or mouse not„'* present„'*„  DEF SEG = 0„  Sum% = 0„  FOR I% = &H33 * 4 TO &H33 * 4 + 3„    Sum% = Sum% + PEEK(I%)„  NEXT I%„  IF Sum% = 0 THEN„    MouseInit% = 0„    EXIT FUNCTION„  END IF„  MReg.AX = 0„  MouseCall„  IF MReg.AX = 0 THEN„    MouseInit% = 0„  ELSE„    MouseInit% = MReg.BX„  END IF„END FUNCTION„„SUB MouseReadCounters (HCount%, VCount%)„'*„'* Returns mouse movement relative to„'* the last time this function was called„'* Measurements are in "mickeys". By default,„'* 1 mickey = 1 pixel horizontally and„'* 2 mickeys = 1 pixel vertically„'*„  IF MouseReady% THEN„    MReg.AX = 11„    MouseCall„    HCount% = MReg.CX„    VCount% = MReg.DX„  END IF„END SUB„„SUB MouseSetHorizRange (HMin%, HMax%)„'*„'* Sets the minimum and maximum horizontal„'* range of the mouse cursor.„'* Moves the cursor inside the range if it's„'* outside.„'*„  IF MouseReady% THEN„    MReg.AX = 7„    MReg.CX = HMin%„    MReg.DX = HMax%„    MouseCall„  END IF„END SUB„„SUB MouseSetPosn (HPosn%, VPosn%)„'*„'* Sets mouse cursor to HPosn and VPosn„'*„  IF MouseReady% THEN„    MReg.AX = 4„    MReg.CX = HPosn%„    MReg.DX = VPosn%„    MouseCall„  END IF„END SUB„„SUB MouseSetup„'*„'* Setup to use mouse„'* MUST be called before„'* MouseInit or any other„'* mouse calls„'*„  RESTORE MouseInt„  DEF SEG = VARSEG(MouseRoutine%(0))„  Addr% = VARPTR(MouseRoutine%(0))„  FOR I = 0 TO 39„    READ A$„    POKE Addr% + I, VAL("&H" + A$)„  NEXT I„  IF A$ <> "CB" THEN ERROR 255„  DEF SEG„END SUB„„SUB MouseSetVertRange (VMin%, VMax%)„'*„'* Sets the minimum and maximum vertical„'* range of the mouse cursor„'* Moves the cursor inside the range if it's„'* outside„  IF MouseReady% THEN„    MReg.AX = 8„    MReg.CX = VMin%„    MReg.DX = VMax%„    MouseCall„  END IF„END SUB„„SUB MouseShow„'*„'* Display the mouse cursor„'* Increments mouse cursor flag„'* Cursor is displayed if flag is 0„'* MouseInit sets flag to -1„'*„  IF MouseReady% THEN„    MReg.AX = 1„    MouseCall„  END IF„END SUB„„John Rodgers                   GRAPHICAL MOUSE USAGE          coolfool@flinet.com            03-04-96 (12:55)       QB, QBasic, PDS        402  10589    GRMOUSE.BAS '                         How to use the MOUSE in QBasic„'                    note# the reusable button and box code„'              Mouse calls and code stolen from FIDO QuickBasic Sub„'                              John Rodgers„'                             Too Cool Fool„'                           Wizard Productions„„DECLARE SUB chkInkey ()„DECLARE SUB typeSub ()„DECLARE SUB eye ()„DECLARE SUB review ()„DECLARE SUB getTime ()„DECLARE SUB winSub ()„DECLARE SUB drawButton (x, y, l$)„DECLARE SUB pushButton (x, y)„DECLARE SUB threeDbox (uRow%, uCol%, lRow%, lCol%)„COMMON SHARED prTime$„COMMON SHARED a$, text$„COMMON SHARED row%, col%, rows%, cols%, outv„„'the  following mouse code and calls I stole off FIDO QuickBasic Sub, TCF„DEF SEG = 0„M.seg& = 256& * PEEK(207) + PEEK(206)„M.info% = 256& * PEEK(205) + PEEK(204) + 2„„' see if a Mouse Driver is loaded„DEF SEG = M.seg&„IF (M.seg& OR (M.info% - 2)) AND PEEK(M.info% - 2) = 207 THEN„ COLOR 0, 7„ CLS„„ SCREEN 11„ LOCATE 12, 30„ PRINT "Mouse Driver Not Found!"„ LOCATE 14, 28„ PRINT " Load the Mouse and re-try"„ „END IF„'CALL absolute(0, 0, 0, 0, M.info%)  'Set Defaults„'CALL absolute(1, 0, 0, 0, M.info%)  'Turn on Pointer„'CALL absolute(2, 0, 0, 0, M.info%)  'Turn off Pointer„'CALL absolute(3, 0, 0, 0, M.info%)  'Status„'CALL absolute(4, 0, col%, row%, M.info%) 'Locate Pointer„' in text mode Mickey reports 640 x 192„' Divide by 8 to use row and col„ „CALL absolute(0, 0, 0, 0, M.info%)  'Set Default„ SCREEN 9„COLOR 8, 7„CLS„ „CALL absolute(1, 0, 0, 0, M.info%)„CALL absolute(4, 0, col% * 8, row% * 8, M.info%)„„drawButton 2, 4, "A"„drawButton 2, 10, "B"                    'draw buttons„drawButton 5, 4, "C"„drawButton 5, 10, "L"„drawButton 21, 36, "Q"„„threeDbox 1, 2, 8, 16                   'drawboxes„threeDbox 1, 20, 8, 60„threeDbox 5, 61, 8, 79„threeDbox 9, 27, 20, 79„threeDbox 21, 22, 23, 34„threeDbox 21, 1, 23, 19„threeDbox 21, 42, 23, 54„threeDbox 21, 57, 23, 71„  rows% = 10„ DO                                   'main loop„ getTime„threeDbox 1, 2, 8, 16„ CALL absolute(3, mbut%, xpos%, ypos%, M.info%)  'check on mouse„ LOCATE 22, 2„ PRINT " Row"; (ypos% \ 8) + 1; "  "; "Col"; (xpos% \ 8) + 1„ LOCATE 22, 23„ PRINT " Button "; mbut%„  LOCATE 22, 59„ PRINT "           "„                                                'if buttom pressed„    'A                                                                                                               „ IF (ypos% \ 8) + 1 = 5 AND (xpos% / 8) + 1 > 4 AND (xpos% / 8) + 1 < 8 AND mbut% = 0 THEN : LOCATE 22, 61: COLOR 14: PRINT "Message"„ IF (ypos% \ 8) + 1 = 5 AND (xpos% / 8) + 1 > 4 AND (xpos% / 8) + 1 < 8 AND mbut% = 1 THEN„   pushButton 2, 4„  typeSub„ END IF„   „  IF (ypos% \ 8) + 1 = 5 AND (xpos% / 8) + 1 > 4 AND (xpos% / 8) + 1 < 8 AND mbut% = 0 THEN„   drawButton 2, 4, ""„  END IF„    'B„  IF (ypos% \ 8) + 1 = 5 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 0 THEN : LOCATE 22, 59: COLOR 14: PRINT "View Window"„  IF (ypos% \ 8) + 1 = 5 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 1 THEN„   pushButton 2, 10„   „   winSub„  END IF„  IF (ypos% \ 8) + 1 = 5 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 0 THEN„   drawButton 2, 10, ""„  END IF„    'C„    IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 4 AND (xpos% / 8) + 1 < 8 AND mbut% = 0 THEN : LOCATE 22, 59: COLOR 14: PRINT "Clear Views"„  IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 4 AND (xpos% / 8) + 1 < 8 AND mbut% = 1 THEN„   pushButton 5, 4„   „  review„  END IF„  IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 4 AND (xpos% / 8) + 1 < 8 AND mbut% = 0 THEN„   drawButton 5, 4, ""„  „  END IF„    'L„     IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 0 THEN : LOCATE 22, 59: COLOR 14: PRINT "Show Logo"„  IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 1 THEN„   pushButton 5, 10„   eye„  END IF„  IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 0 THEN„   drawButton 5, 10, ""„ „  END IF„    'Q„     IF (ypos% \ 8) + 1 = 38 AND (xpos% / 8) + 1 > 36 AND (xpos% / 8) + 1 < 40 AND mbut% = 0 THEN„     LOCATE 6, 62„     COLOR 14„     PRINT "**** Click Q ****"     'this gets printed if the cursor goes across the "Q" button„     LOCATE 7, 62„    PRINT "**** to QUIT ****"„    END IF„  IF (ypos% \ 8) + 1 = 38 AND (xpos% / 8) + 1 > 36 AND (xpos% / 8) + 1 < 40 AND mbut% = 1 THEN„  outv = 1„  END IF„  IF (ypos% \ 8) + 1 = 10 AND (xpos% / 8) + 1 > 10 AND (xpos% / 8) + 1 < 14 AND mbut% = 0 THEN„   drawButton 5, 10, ""„„  END IF„  a$ = INKEY$„   „ ' a$ = "s"„  IF LEN(a$) THEN chkInkey        'keyboard input„' LOCATE 7, 62„' PRINT rows%; " "; cols%„ LOOP UNTIL outv = 1              'exit„LOCATE 12, 2„COLOR 8, 0„                                 'brag„PRINT "    Works. Don't it?   "„FOR T = 1 TO 30000„NEXT„FOR T = 1 TO 30000„NEXT„„SYSTEM„„SUB chkInkey           'controls user input„ STATIC rows%„ IF rows% = 0 AND rows% < 11 THEN rows% = 10„    SELECT CASE a$                                   'input„„   CASE CHR$(8)   'backspace„    IF fields = 4 AND LEN(text$) = 6 THEN„   „      LOCATE rows%, 30 + LEN(text$)„      „      text$ = LEFT$(text$, (LEN(text$) - 1))„     ELSE„     LOCATE rows%, 30 + LEN(text$)                  'black out entire string„     PRINT STRING$(LEN(text$), " ")„    END IF„„     a$ = ""                                  'clear a$„     'ON ERROR GOTO eror:„    IF LEN(text$) - 1 >= 0 THEN„      text$ = LEFT$(text$, LEN(text$) - 1)         'reprint shortened text$„     END IF„„ „  CASE CHR$(13)   'carrage return„„      typeSub„      eye„      winSub„„    rows% = rows% + 1„    text$ = ""„    „  CASE CHR$(27)   'escape„„     „   outv = 1„END SELECT„text$ = text$ + a$„IF LEN(text$) >= 46 THEN BEEP: text$ = LEFT$(text$, 46)„   cols% = 29„   LOCATE rows%, 29„PRINT text$„„„END SUB„„SUB drawButton (x, y, l$)„                           'draws a button at x and y with a letter l$„COLOR 15„LOCATE x, y„PRINT "⁄ƒƒƒ"„LOCATE x + 1, y„PRINT "≥"; " "; l$„LOCATE x + 2, y„PRINT "¿"„COLOR 8„LOCATE x, y + 4„PRINT "ø"„LOCATE x + 1, y + 4„PRINT "≥"„LOCATE x + 2, y + 1„PRINT "ƒƒƒŸ"„END SUB„„SUB eye                    'draws my logo„„LINE (500, 8)-(605, 35), 8, BF„LINE (499, 7)-(606, 36), 4, B„CIRCLE (550, 20), 32, 14, , , 2 / 9„PAINT STEP(0, 0), 14„CIRCLE STEP(0, -1), 11, 8„PAINT STEP(0, 0), 8, 8„CIRCLE STEP(1, 1), 1, 12„STATIC T„T = T + 1„IF T >= 14 THEN T = 0„COLOR T„„LOCATE 4, 62„PRINT "Wizard Productions"„END SUB„„SUB getTime„„           'convert SYSTEM time and date to prTime$ and prDate$„                        'for program use„T$ = TIME$„Hr = VAL(T$)„IF Hr < 12 THEN Ampm$ = " AM" ELSE Ampm$ = " PM"„IF Hr > 12 THEN Hr = Hr - 12„IF Hr = 0 THEN Hr = 12„„ prgTime$ = STR$(Hr) + RIGHT$(T$, 6) + Ampm$„„„ IF Ampm$ = " AM" THEN                        ' convert prgTime$ to 5 characters„„prTime$ = LEFT$(prgTime$, 5) + " AM"                'for AM„ END IF„„ IF Ampm$ = " AM" AND VAL(LEFT$(prgTime$, 3)) >= 10 THEN ' convert prgTime$ to 6 characters„ prTime$ = LEFT$(prgTime$, 6) + " AM"                'for PM after 10„ END IF„ IF Ampm$ = " PM" THEN                          ' convert prgTime$ to 5 characters„prTime$ = LEFT$(prgTime$, 5) + " PM"                 'for PM„ END IF„„ IF Ampm$ = " PM" AND VAL(LEFT$(prgTime$, 3)) >= 10 THEN ' convert prgTime$ to 6 characters„prTime$ = LEFT$(prgTime$, 6) + " PM"               'for PM after 10„ END IF„„COLOR 15, 11„LOCATE 22, 43        '  PRINT prTime$„PRINT LTRIM$(prTime$); " "; RIGHT$(TIME$, 2)„   „„  „„„END SUB„„SUB pushButton (x, y)„               'show a double line button at x and y„                'while mouse button is pressed„ COLOR 8„LOCATE x, y„PRINT "…ÕÕÕ"„LOCATE x + 1, y„PRINT "∫ "„LOCATE x + 2, y„PRINT "»"„COLOR 15„LOCATE x, y + 4„PRINT "ª"„LOCATE x + 1, y + 4„PRINT "∫"„LOCATE x + 2, y + 1„PRINT "ÕÕÕº"„„END SUB„„SUB review„VIEW„CLS                     'clears and redraws screen DO NOT DO THIS„                            'very kludgey„threeDbox 1, 2, 8, 16„threeDbox 1, 20, 8, 60„threeDbox 5, 61, 8, 79„threeDbox 9, 27, 20, 79„threeDbox 21, 22, 23, 34„threeDbox 21, 1, 23, 19„threeDbox 21, 42, 23, 54„threeDbox 21, 57, 23, 71„drawButton 2, 4, "A"„drawButton 2, 10, "B"„drawButton 5, 4, "C"„drawButton 5, 10, "L"„drawButton 21, 36, "Q"„ „END SUB„„SUB threeDbox (uRow%, uCol%, lRow%, lCol%)„ COLOR 8„   ' Draw top of box.„  LOCATE uRow%, uCol%: PRINT CHR$(218);„   LOCATE , uCol% + 1: PRINT STRING$(lCol% - uCol%, CHR$(196));„   LOCATE , lCol%: PRINT CHR$(191);„„   ' Draw body of box.„   FOR i = uRow% + 1 TO lRow% - 1„   COLOR 8„      LOCATE i, uCol%: PRINT CHR$(179);„      COLOR 15„      LOCATE , lCol%: PRINT CHR$(179);„   NEXT i„„   ' Draw bottom of box.„            LOCATE lRow%, uCol%: PRINT CHR$(192);„   LOCATE , uCol% + 1: PRINT STRING$(lCol% - uCol%, CHR$(196));„   LOCATE , lCol%: PRINT CHR$(217);„„„END SUB„„SUB typeSub            'types a message to the screen with an annoying noise„STATIC T, e„T = T + 1„IF T >= 14 THEN T = 0„COLOR T„ „a$ = "This is a demonstration of the "        'define strings„b$ = "possibilities of mouse support when"„c$ = " added to programs in MS QBasic"„d$ = "Too Cool Fool"„FOR w = 1 TO LEN(a$)                'print each string one letter at a time„SOUND 200, .1                           'annoying noise„LOCATE 3, 25„PRINT LEFT$(a$, w)„FOR q = 1 TO 500„NEXT q                                  'lousy way to do this but I was„NEXT                                      'havin' fun„FOR w = 1 TO LEN(b$)„SOUND 200, .1„LOCATE 4, 23„PRINT LEFT$(b$, w)„FOR q = 1 TO 500„NEXT q„NEXT„FOR w = 1 TO LEN(c$)„SOUND 200, .1„LOCATE 5, 24„PRINT LEFT$(c$, w)„FOR q = 1 TO 500„NEXT q„NEXT„COLOR 14„SOUND 440, 1„FOR w = 1 TO LEN(d$)„SOUND 240 + w, 1„„LOCATE 6, 33„PRINT LEFT$(d$, w)„FOR q = 1 TO 500„NEXT q„NEXT„„„END SUB„„SUB winSub„STATIC a                       'another pointless sub„a = a + 1„IF a >= 16 THEN a = 1„VIEW (10, 130)-(195, 270), a, 9„LOCATE 11, 2„COLOR a, a„ „PRINT " This is a view window  "„winText$ = text$„IF LEN(text$) >= 24 THEN„winText$ = LEFT$(text$, 24) + CHR$(13) + MID$(text$, 25, (LEN(text$) - 24))„END IF„LOCATE 12, 2„PRINT winText$„FOR T = 1 TO 300„NEXT T„END SUB„„Brian Roche                    GRAPHICAL MOUSE CURSORS DEMO   FidoNet QUIK_BAS Echo          03-08-96 (00:13)       QB, PDS, VBDOS         361  12931    MEESES.BAS  '„'           M e e s e s  .  B a s      from B. Roche„'„'              Demonstrates Graphical Mouse Cursors„'             Translated over from VBDOS Program„'     Make sure to enter Environment with /L for Interrupt Support„„'   Currently set up to run *AS IS* in QB ..REM/UNREM the appropriate„'                   spots to use Far Strings ..„„'    Multiple Versions of some Cursors are given because some look„'          Better on White BG, some better on Black BG„„„DECLARE FUNCTION HaveMouse% ()      ' Checks to See if Driver Installed„DECLARE SUB PrintR (A$, X%, Y%, StepX%, StepY%, CO%, BackGround%, Shadow%)„        ' Prints Text in Graphics Mode 12„DECLARE SUB ChangeCursor (A$)       ' Changes Graphics Mouse Cursor„DECLARE SUB Mouse (M0, M1, M2, M3)  ' Mouse Driver„DECLARE SUB MouseShow ()            ' Displays Mouse Cursor„DECLARE SUB MouseHide ()            ' Hides Mouse Cursor„„„ ' $INCLUDE: 'QB.BI'         ' Use for QB45 (Keep at least One REM here!)„ REM '$INCLUDE: 'VBDOS.BI'„ ' Use 'VBDOS.BI' for VBDOS, 'QBX.BI' for PDS„„DIM Regs AS RegType          ' Interrupt needed for Regular Mouse Routines,„                             ' QB also uses Interrupt for Mouse„                             ' Cursor Routines„REM 'DIM RegsX AS RegTypeX   ' InterruptX needed for PDS/VBDOS„                             ' Far Strings, but both Interrupt calls„                             ' Still needed for QBX/VBDOS„„„ON ERROR GOTO NOVGA:         ' Make sure we've got VGA ..„ SCREEN 12„ON ERROR GOTO 0„„  ' Now Blank the Monitor while Drawing the Screen ..„  OUT &H3C4, 1: CMR% = INP(&H3C5): OUT &H3C5, CMR% OR &H20„  LINE (0, 0)-(640, 480), 7, BF     ' Use a White backGround„  LINE (320, 20)-(600, 305), 0, BF  ' Black "Window" to also check Cursors„„ ' Yeah, I know using DATA statements is not an example of„ ' Programming Virtuosity, but this is just Demo code ...„ FOR I% = 1 TO 14„  READ Prompt$„  Prompt$ = CHR$(I% + 64) + ") " + Prompt$„  PrintR Prompt$, 25, I% * 20 + 5, 8, 0, 15, 7, 1„ NEXT„„ Prompt$ = "Q) Quit program."„ PrintR Prompt$, 25, 305, 8, 0, 15, 7, 1„„ Prompt$ = "Press the Letter of the Cursor you want, or <Q> to Quit."„ PrintR Prompt$, 45, 400, 8, 0, 11, 7, 1„ Prompt$ = ""„„„  ' Now that the screen is Drawn, Turn the Screen back on..„  OUT &H3C4, 1: CMR% = INP(&H3C5): OUT &H3C5, CMR% AND &HDF„„  ' And Check for the Rodent ...„ IF HaveMouse% THEN               ' Check For Mouse Driver„   Mouse 0, 0, 0, 0               ' Initialize Mouse„   MouseShow                      ' Show Mouse Cursor„ ELSE„   SCREEN 0„   LOCATE 15, 28: PRINT "You need a Mouse for a Mouse Cursor Program, Silly!"„   WHILE INKEY$ = "": WEND„   SYSTEM„ END IF„„„ ' Now Run a Loop, Checking Input, and Change the Mouse Cursor accordingly ..„  DO„    DO: A$ = INKEY$: LOOP UNTIL LEN(A$)„    A$ = UCASE$(A$)„    IF A$ = "Q" THEN„      MouseHide„      SCREEN 0, , 0, 0: SYSTEM„    END IF„    IF A$ >= "A" AND A$ <= "N" THEN ChangeCursor A$„  LOOP„„„NOVGA:    ' VGA Error Trap„  SCREEN 0, , 0, 0„  LOCATE 15, 25: PRINT "You Must have a VGA to run this program"„  SYSTEM„„„' Menu Data ...„DATA "Bulls Eye Cursor #1","Bulls Eye Cursor #2"„DATA "Hour Glass Cursor #1","Hour Glass Cursor #2"„DATA "Hour Glass Cursor #3", "Hour Glass Cursor #4"„DATA "Hour Glass Cursor #5","Stop Watch Cursor"„DATA "Smiley Face Cursor", "Smiley Face Cursor #2"„DATA "Cross Hair Cursor", "Cross Hair Cursor #2"„DATA "Pointing Hand Cursor","Pointing Hand Cursor #2"„„„'---------------- Start of Mouse Cursor Data ----------------„BullsEye1:„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&H8001,&H8001,&H8001,&H8FF1,&H8811,&H8811,&H8811„DATA &H8811,&H8811,&H8811,&H8FF1,&H8001,&H8001,&H8001,&HFFFF„DATA 7,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„BullsEye2:„DATA &H0,&H0,&H0,&H0,&HFF0,&HFF0,&HFF0,&HFF0„DATA &HFF0,&HFF0,&HFF0,&HFF0,&H0,&H0,&H0,&H0„DATA &H0,&H7FFE,&H7FFE,&H6006,&H6006,&H6006,&H6006,&H6006„DATA &H6006,&H6006,&H6006,&H6006,&H6006,&H7FFE,&H7FFE,&H0„DATA 7,8„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„HourGlass1:„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&H2004,&H2004,&H2004,&H1008,&H990,&H420,&H240„DATA &H240,&H420,&H810,&H1008,&H2084,&H2144,&H22A4,&HFFFF„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„HourGlass2:„DATA &H0,&HDFFB,&HDFFB,&HDFFB,&HEFF7,&HF66F,&HFBDF,&HFDBF„DATA &HFDBF,&HFBDF,&HF7EF,&HEFF7,&HDF7B,&HDE3B,&HDC1B,&H0„DATA &H0,&H0,&H0,&H0,&H0,&H0,&H0,&H0„DATA &H0,&H0,&H0,&H0,&H0,&H0,&H0,&H0„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„HourGlass3:„DATA &H0,&HC003,&HC003,&HC003,&HE007,&HF00F,&HF81F,&HFC3F„DATA &HFC3F,&HF81F,&HF00F,&HE007,&HC003,&HC003,&HC003,&H0„DATA &H400,&H1FF8,&H1FF8,&H1FF8,&HC30,&H660,&H3C0,&H180„DATA &H180,&H3C0,&H7E0,&HFF0,&H1E78,&H1C38,&H1818,&H0„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„HourGlass4:„DATA &H0,&H8001,&H8001,&H8001,&HA185,&HB00D,&HB81D,&HBC3D„DATA &HBC3D,&HB81D,&HB00D,&HA005,&H8181,&H83C1,&H87E1,&H0„DATA &H0,&H1FF8,&H1FF8,&H1FF8,&HC30,&H660,&H3C0,&H180„DATA &H180,&H3C0,&H7E0,&HFF0,&H1E78,&H1DB8,&H1FF8,&H0„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„StopWatch:„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &H3000,&H63E0,&HDC18,&H1004,&H2002,&H2602,&H4301,&H4181„DATA &H40C1,&H4081,&H4081,&H2082,&H2082,&H1004,&HC18,&H3E0„DATA 1 ,1„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„Smiley1:„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HE70,&H1FE8,&H3C3C,&H381C,&H6006,&H8422,&H8421,&H8001„DATA &H8181,&H9011,&H4822,&H43C2,&H2004,&H100C,&H399C,&H700E„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„Smiley2:„DATA &HE70,&H1FE8,&H3C3C,&H381C,&H6006,&H8422,&H8421,&H8421„DATA &H8001,&H9191,&H4812,&H4422,&H23C4,&H1008,&H399C,&H700E„DATA &HF18F,&HE017,&HC3C3,&HC7E3,&H9FF9,&H7BDD,&H7BDE,&H7BDE„DATA &H7FFE,&H6E6E,&HB7ED,&HBBDD,&HDC3B,&HEFF7,&HC663,&H8FF1„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„CrossHair1:„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF,&HFFFF„DATA &H100,&H100,&H100,&H100,&H100,&H100,&H100,&H100„DATA &HFFFE,&H100,&H100,&H100,&H100,&H100,&H100,&H100„DATA 7 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„CrossHair2:„DATA &HFFFF,&HFC7F,&HFC7F,&HFC7F,&HFC7F,&HFC7F,&HFC7F,&H1„DATA &H101,&H1,&HFC7F,&HFC7F,&HFC7F,&HFC7F,&HFC7F,&HFC7F„DATA &H0,&H0,&H100,&H100,&H100,&H100,&H100,&H0„DATA &H7C7C,&H0,&H100,&H100,&H100,&H100,&H100,&H0„DATA 7 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„Hand1:„DATA &HF3FF,&HEDFF,&HEDFF,&HEC7F,&HED8F,&HEDB1,&HEDB6,&H8DB6„DATA &H6DB6,&H6FFE,&H6FFE,&H7FFE,&H7FFE,&H7FFE,&HBFFD,&HC003„DATA &HC00,&H1200,&H1200,&H1380,&H1270,&H124E,&H1249,&H7249„DATA &H9249,&H9001,&H9001,&H8001,&H8001,&H8001,&H4002,&H3FFC„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„'---------------- Start of Mouse Cursor Data ----------------„Hand2:„DATA &HF3FF,&HE1FF,&HE1FF,&HE07F,&HE00F,&HE001,&HE000,&H8000„DATA &H0,&H0,&H0,&H0,&H0,&H0,&H8001,&HC003„DATA &H0,&HC00,&HC00,&HC00,&HD80,&HDB0,&HDB6,&HDB6„DATA &H6DB6,&H6FFE,&H6FFE,&H7FFE,&H7FFE,&H7FFE,&H3FFC,&H0„DATA 5 ,0„'------------------ End of Mouse Cursor Data ------------------„„SUB ChangeCursor (A$)„  DIM Regs AS RegType          ' Use for QB45 Near Strings„  REM DIM Regs as RegTypeX     ' Use for QBX/VBDOS Far Strings„„  ' Assigns Custom Cursor Shape Depending on String Passed.„  ' Use RegType in QB; need ES Register for PDS/VBDOS Far String support.„„  SELECT CASE A$„  CASE "A"„     RESTORE BullsEye1:„  CASE "B"„     RESTORE BullsEye2:„  CASE "C"„     RESTORE HourGlass1:„  CASE "D"„     RESTORE HourGlass2:„  CASE "E"„     RESTORE HourGlass3:„  CASE "F"„     RESTORE HourGlass4:„  CASE "G"„     RESTORE HourGlass4:„  CASE "H"„     RESTORE StopWatch:„  CASE "I"„     RESTORE Smiley1:„  CASE "J"„     RESTORE Smiley2:„  CASE "K"„     RESTORE CrossHair1:„  CASE "L"„     RESTORE CrossHair2:„  CASE "M"„     RESTORE Hand1:„  CASE "N"„     RESTORE Hand2:„  CASE "Q:"„     SCREEN 0, , 0, 0„     CLS : SYSTEM„  CASE ELSE„     EXIT SUB„  END SELECT„„  '====================================================================„  ' Below is the part you're most interested in. I read it in as a„  ' String * 1 (BYTE) .. 16 Bytes for the Cursor Mask, 16 Bytes for„  ' the Screen Mask, and the last two Integers the location of the Cursor„  ' Hot Spot - the Point actually referenced in Mouse Coordinates.„„  ' Read in Graphical Mouse Cursor Data„  FOR I% = 1 TO 32„    READ Wrd%„    MMsk$ = MMsk$ + MKI$(Wrd%)         ' Cursor Graphical Data„  NEXT I%„  READ Hotx, Hoty                      ' Cursor HotSpot„„  ' Now For the Interrupt call ..„  ' Use Function 9 from Int 33 ..„  Regs.ax = 9: Regs.bx = Hotx: Regs.cx = Hoty„  Regs.dx = SADD(MMsk$)   ' Use with ALL Basics ..„„  ' Next Line not needed for QB, (Optional for PDS ??), needed for VBDOS„  ' But using it stores Data as a Far String.„  REM Regs.es = SSEG(MMsk$)  ' Need InterruptX for this One ..„„  INTERRUPT &H33, Regs, Regs        ' Call QB45 Near string Interrupt„  REM INTERRUPTX &H33, Regs,Regs    ' Call VBDOS/PDS Far String Interrupt„END SUB„„FUNCTION HaveMouse%„  ' Checks to see if Mouse is Installed„  DEF SEG = 0„  MouseSegment& = 256& * PEEK(207) + PEEK(206)„  MouseOffset& = 256& * PEEK(205) + PEEK(204)„„  DEF SEG = MouseSegment&„  IF (MouseSegment& = 0 AND MouseOffset& = 0) OR PEEK(MouseOffset&) = 207 THEN„    HaveMouse% = 0„  ELSE„    HaveMouse% = 1„  END IF„  DEF SEG„END FUNCTION„„SUB Mouse (M0, M1, M2, M3) STATIC„  ' Note: VBDOS will move the "STATIC" in front of this SUB Name.„  ' If you then go back into QB, you'll have to manually put the "STATIC"„  ' back at the end of the Sub Declaration, or generate an Error.„„  ' M0 = 0 : Initialize the Rodent„  '      1 - Show Mouse„  '      2 - Hide Mouse„  '      3 - Mouse Location/Button Status„„  DIM Regs AS RegType           ' Use for ALL Basic's ..„  ' Calls interrupt &H33 to invoke mouse functions in the MS Mouse Driver.„„  Regs.ax = M0: Regs.bx = M1: Regs.cx = M2: Regs.dx = M3„  INTERRUPT &H33, Regs, Regs              ' Use for ALL Basic's ..„  M0 = Regs.ax: M1 = Regs.bx: M2 = Regs.cx: M3 = Regs.dx„END SUB„„SUB MouseHide                   ' Hides Mouse cursor„  Mouse 2, 0, 0, 0„END SUB„„SUB MouseShow                   ' Shows mouse Cursor„  Mouse 1, 0, 0, 0„END SUB„„SUB PrintR (A$, X%, Y%, StepX%, StepY%, CO%, BackGround%, Shadow%)„  ' Prints Graphical Chars from Rom Data Table„  ' A$ Param is string to print„  ' X%=Graphics Horz pixel Position„  ' Y%=Graphics Vert pixel Position„  ' StepX% and StepY% control size of chars„  ' CO%= Foreground color„  ' BackGround%= BackGround Color„  ' Shadow% is a Boolean for Shadow enabling„„  ExtX% = StepX%: ExtY% = StepY%„  DEF SEG = &HFFA6        ' ROM Segment for Character Shape Tables„  FOR I% = 1 TO LEN(A$)„    Addr% = 8 * ASC(MID$(A$, I%)) + 14     'Address character shape table„    IF BackGround% THEN                    'Color background„    IF BackGround% = 256 THEN BG% = FALSE ELSE BG% = BackGround%„    IF I% = LEN(A$) THEN ExtX% = FALSE: ExtY% = FALSE„    LINE (X%, Y%)-(X% + 7 + ExtX%, Y% + 7 + ExtY%), BG%, BF„    END IF„    FOR J% = 0 TO 7„    Mask% = PEEK(Addr% + J%) * 128„    IF Shadow% THEN„    LINE (X% + 9, Y% + J% + 2)-(X% + 2, Y% + J% + 2), 0, , Mask%„    END IF„   LINE (X% + 7, Y% + J%)-(X%, Y% + J%), CO%, , Mask%„  NEXT„  X% = X% + ExtX%„  Y% = Y% + ExtY%„  NEXT„  DEF SEG                 'Back to DGROUP„END SUB„Dave Shea                      PSYCHADELIC ELVIS MOUSEBOY     FidoNet QUIK_BAS Echo          03-09-96 (13:45)       QB, PDS                69   2557     ELVIS.BAS   'Psychadelic Elvis MouseBoy - By Dave Shea„„'This is a little demonstation to show you how to customize your mouse„'cursor. Alter it, use it, destroy it, do whatever you want with it. Just„'remember to credit me at least a little bit, eh? Just remember you're using„'this at your own risk... If it radiates your cat, don't blame me....„„'These following lines initiate the mouse setup. Sorry, can't remember what„'everything does... :(„„'$INCLUDE: 'qb.bi'„DIM Cursor%(1000): DIM MaskCursor%(1000): DIM Back%(1000)„DIM inreg AS RegType: DIM outreg AS RegType: inreg.ax = 0„CALL INTERRUPT(&H33, inreg, outreg)„hmin% = 1: hmax% = 290: inreg.cx = hmin%: inreg.dx = hmax%: inreg.ax = 7„CALL INTERRUPT(&H33, inreg, outreg)„vmin% = 1: vmax% = 170:  inreg.cx = vmin%: inreg.dx = vmax%: inreg.ax = 8„CALL INTERRUPT(&H33, inreg, outreg)„inreg.cx = 0: inreg.dx = 0: inreg.ax = 4„CALL INTERRUPT(&H33, inreg, outreg)„„„CLS : SCREEN 13                           'I sure as heck hope I don't need„DEFINT A-B                                'to explain THIS....„„'This draws & GETS my funky Elvis look-alike„„PSET (16, 7)„DRAW "c161nr2dnrlnd2rdc66rc1dc66nrl1drgdc15nenhr3c66rlc15l3"„DRAW "l3c66lrc15r3dnrnldnrnld"„DRAW "c16nrnlc44dc1nrld3c161nluc1u2r2d3c161nr "„GET (5, 4)-(28, 24), Cursor%„„'This draws & GETS a mask of my funky Elvis look-alike„'This is vital, as creating a mask will allow you to place the cursor over„'a background without totally destroying it.„„FOR a = 1 TO 30„ FOR B = 1 TO 30„  IF POINT(a, B) = 0 THEN PSET (a, B), 255„  IF POINT(a, B) <> 0 AND POINT(a, B) <> 255 THEN PSET (a, B), 0„ NEXT„NEXT„GET (5, 4)-(28, 24), MaskCursor%„„CLS„x = 160: y = 100„FOR a = 1 TO 200                     'Shnazzy Background setup-sequence„ LINE (1, a)-(320, a), a„NEXT„„mouseloop:„GET ((x - 1) / 2, y)-((x - 1) / 2 + 25, y + 25), Back% 'Get temp background„PUT ((x - 1) / 2, y), MaskCursor%, AND                 'Lay down the mask„PUT ((x - 1) / 2, y), Cursor%, XOR                     'Overlap with Elvis„WAIT 986, 8                                            'Vertical retrace„PUT ((x - 1) / 2, y), Back%, PSET                      'Restore BackGround„„'get mouse location and status„'if outreg.bx=1 then left button is pushed„'if outreg.bx=2 then right button is pushed„'if outreg.bx=3 then both buttons have been pushed„inreg.ax = 3„CALL INTERRUPT(&H33, inreg, outreg)„x = outreg.cx + 1„y = outreg.dx + 1„IF outreg.bx = 1 THEN PSET ((x - 1) / 2, y), 4„IF outreg.bx = 3 THEN END„GOTO mouseloop„Dave Shea                      ANIMATED MOUSE CURSOR          FidoNet QUIK_BAS Echo          03-30-96 (00:00)       QB, PDS                46   2849     MOUSANIM.BAS'Well, I sat down and wrote me a program that'll give you an animated„'mouse cursor.„„DEFINT A-Z:DIM SHARED K,S,B&,Z&:V1 'Created by PostIt! 7.2„SUB V1:OPEN "O",1,"MOUSANIM.ZIP",4^6:Z&=1787:?STRING$(50,177);„U"%up()%9%%%I-%[L8PE*T=Ea0(7%%)2%%%1%%%%rt%zxjf%srSgRfx&%;<>Sms5w„U"7KEwVvCUN?$scWn#*&io)qARi%P>r4([c1:O*Cx;]Au8wo>:I:Pu&_GIYZle\6o„U"?$,,,=uV=2DV^brHT?H0i_[#s=n5wb/]h$fc3rg\?+SE93xH#%&VU?sdsib6Wai„U"?[5<%3a4Lp1kT:7KZ])NA80t*Y02_mWbfc=V42#lC\+a)BeDLH7)/$+4f9aARUY„U"C6t_#jO/kpQu-WXm*cUZ**l8F$tv'O;cRBd-qXpHK,[OP*S>rP75>960_d:Sj=9„U"2S>m47r0w'aBw)cq7//'>i-&%NMcHbCpTry/;w0xJdrz;))0#OWTw+\a/TyRM5d„U"<%rQeC/hy;z;T/z/,b4T:/c<Q=n]#x-Z5efPd:+yd=1&VQb>3iO'4=m0WUC[u5S„U"ofQ1nZ_qp'W-KX.CtOqlR+91G.7WAP6MzQh[,r:Vr\5N;K[]dixl+$SqLHwYDJ.„U"6uM4abLX9-C0v>DTcG>>.7TsG>9nTG:pkbGI3lL>db\CHa8S&=putb7P&f,[sHO„U"J8CJ5U\m6uPfmbqbK(&R*^xS/2?j;K)?U%w+IkM\VCbCj;VZ/A-a*cEkEX\3=n.„U"rd/#4tb2VGb?A7pZ6bm#?[lm2:rA-GqneI\iVFn'?\xKIC4%5u_j36%*\WnSkn\„U"S8jcZ5)T\K60TSWKk.l7cbE+_-2Kg6$\u<ooMG3Qp<_rDCHgPx;XFxR;xg5vkC$„U"ofy/<8sKc1bdfzUU^Y(leoK,cGKZu=#$D]DPK>deAxAI=pjnwt;l]Q+GaOrM.+[„U"EnSbSU0::_;nK+c;IPl-ZG%X6\F&&P5NibvBmt=tD^'rF$#4^o+1ckSt:M$LlJI„U"ay+]s/i-7YX8%)$23H8ga7,dxk\?T2ZD1C/Hq5'ITnP?Sm1[Fb%r:N.xq<+AP[3„U"n:#.S2Uq<CBP[4:Yj.Su_q<BPK/3:*Q.Seqn<DP/p4:T.lS/qf4APE3n:$.Sq]q„U"VwZY5TYcoF,hoprbe2K?r5n,zxFoJa4>_XI[B#lBs[cwg1=YLRd7<IEDDM&;Z+W„U"QN$ctd=eK-=06k124Y7B_C#r0k'dHTuNCZa&7o$IfCvXo1V,[r?;=X2ZxJBEg=.„U"nTd.%qKh^Sj:a6]]_Rfr/&[;zSkdUDuc-ubRb_]UFAf*\R54)\ES[=5N^kHj\N=„U"ZQB8ZUlBaDh=607hZ'e1*MDqTZD*ZhjcLa#,G5\,[=v%4up(%)9%%#%-%^\SxER„U"H95]?%'%%,'s%%,%%%%r%fsSfmsrfT;,ASU#9+u<c=9Sk[ORN%qw:b+O_Lhinn+„U"B\'dEq(aY$a_p#(k#kDisL-XbloEb&'-9S[mBSr#sZ_R>=nuLXvsZTh<LJmdIKP„U"NtLXroHwaF>sP>ZNjSRCdLYEY*F_2GmX7N]3tDfp<%bheyMkSTdl,.36uH&P9pH„U"TpMK-(u(/X#;ik#8J;Tn?H6HNiXb;Vr9-RDvhm^iPNX:*>Vi,N.dcCp3,+.tc(k„U"x)ve+wXgA8Fo2u+FVJEZQfc<[9DI?cPo\u8H*86cjgqswIsjD$YCku>r4sMEvzA„U"fh*v0lU()l7[/?JJ];%Lm7jNWPE:ta6[JkkKvS:EQ4qCFk^?3pA4v>r9utt#,]v„U"BsR6Y**tW[w[t75TVIXit\9sBP1p^^X8ff0%,KHF[rlap.G?Zh8w=stFkbxCSJ#„U"5l0z9GtvgdyDrXKoaLNL\nHN<Rk;Trb>u?^.i=C$b4HH1cXVMca(Aog/q8.fvK:„U"_FoSQ[i_ulEsPtT/=B.vZ^BLi<qHj1SERacZ=3N_$<oFrcH($T[*??xLM<NjpJM„U"bwr?j#<UoEi$+:S(tKm<i<*'SMO0Lv8rMrZib:HvvyNrsJ7wP=sFy'xZ'%R%%YD„U"ouqahGPvN?V,Ls*D&n+&$/vclcpQ&M?Y3s7D:UtN=+i:8Yw:Tz?LYs/78P#tqT:„U"CL'Zboqo%=9=N3v&RZvffDZ1+=uf:inj;N58Lump)s$mvdvfbtNaptN(^3v,L%%„U"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%n'q(up%&'9%%9%%„U"%I-%[L8PE*T=Ea0(7%%)2%%%1%%%%%%%%%&%%E%%%%%%%%%rtzx%jfsr%Sgfx%u„U"p&'%9%9%%%%-%)^SxE?R95]&?'%%+,s%%%,%%%%%%%%%%%E%7%%Z(%%%rf%sSfs„U"%rup*%+%%%%%'%'(%>%%(%E+%%%%%„END SUB„CLOSE:IF S=168AND B&=Z&THEN?" :) Ok!"ELSE?" :( Bad!„SUB U(A$):FOR A=1TO LEN(A$):C=ASC(MID$(A$,A))-37:IF C<0THEN C=91+C*32„IF K<4THEN K=C+243ELSE?#1,CHR$(C+(K MOD 3)*86);:K=K\3:B&=B&+1„S=(S+C)AND 255:NEXT:LOCATE,1:?STRING$(B&*50\Z&,219);:END SUB„Jamshid Khoshrangi             LALEH'S MOUSE ROUTINES V2.0    qjackson@direct.ca             04-08-96 (19:03)       PB                     394  26098    LMR.BAS     ' Please run this code under PowerBASIC to extract LMR_200.ZIP„' To extract under QB, add a DIM before SHARED„DEFINT A-Z:SHARED K,S,B&,Z&:V1 'Created by PostIt! 7.2„SUB V1:OPEN "O",1,"LMR_200.ZIP",4^6:Z&=19247:?STRING$(50,177);„U"%up()%9%%%I-%Cg8WE\z7p+ANd%%A0%%%0%%%%qr(w.WU%USgfjxfLfYA\A$$YN„U"lEI$yC[e>IjFPds:I0_kEuIII#V1G8Ow\zB#Z5OAq-7\-i%Uu9rpfgGEhQxrV.5„U"1p83khnP%#g&IJQe.>>g9E^=ZCCCyuCCC(^oMb5e/L.vi[z.)r6Nw\sT^HGX3xj„U"f9xxw4YNv0lu9xo(YNwpNovXYv?DxW2cEKyvo38qHlxd&xolT[$iX^Yn,#tylk0„U"E&Xc]e_Vr_krbE/W7ml,#&VTOZs_7jj:8YExEMN0\aSNFm2m$*N3$GnkY8-eRt\„U"rH(m)XOQbFlX6RWoLUDrLK\rkX*b+G#/XsJj,bi,kH3-lVs/p#D)q\$]57IiQkL„U";bD506tgnVTB,q;6S9;r:<M;ht:roVW[mVq_^bn6a$ZdtqhY\;]07#cid)C'n+=„U"eWl],LcO_>K7]>jTtKH,)4(J96]_.U#DRV-$)M_sQA3FYZQT;5G+Wcr,BokCJJV„U"*,#22<*T338*B.M?(+0&xM+>1-F7qb,hq*m^dJQJN[b&YeomRt$iWgLp/%&\LmX„U"tp1<BHGKK\dGFN<(FIqMR,uBS#4UO<q*NjWi'Yb,+<NuG59HW(v<$r#=?<^>JV3„U"*opX[pq>Qt>bph)2m*>a(83rSaSY(XknqA/qr$q)EuGWlj2(V8Np/Vv&m\MdB3=„U"rIZ+dMnZm6:\ThFe?TUDVc=i6at??:%\VmDHV]1S((=dcrJ9.\$QlY>\pI-qACk„U"+.+Ut[t,ZS31Ff)(gQK,Xp^O,0wE;Z\u\<k>=QfGL9D'(T/DKiwo20prZEV]_J0„U"K8E181o#XhK0l*D<r^.%pukpiP+T(L\tPPn6N9jDVr)U_Ht(rxxMEDAqFFt\MsU„U"j4:6N]R8lkMU5%?3aLB]P2H_(]BEkI,j94bs:2[.yo5KL.TeD_>1k3LA)f1^zZn„U"=Bk&&$bJH(k&w=9joAF?Ea&8NZqtBGfO#DH7L\\f7eE8ZCE>bNF[e#?=?k6&hHH„U"#Pff,MpnKYbxV7\wlm&^lgTM'M5oMH4R:#C(LW90VMs^qElI(/H=KYA]6uVY_UY„U"nUEUt2H=RrP_W1nFck3px>Unr'>cdO^I_RG0Y+d__mVsZn)xr-p*$BiWHr'fXP8„U"'#ETO-)i[,hegt>Mhl++Q%]tt1;kRlvL<^>FkE^J:^:TI5Emp\DCs-giT5Yi>S$„U"lDMr,XX4fm-3>mpfhOJze:zPCs]m017^(e'gi59M#Fa/N1r8RoJ]J,RG/7eu[lr„U"X)K]t]9#,<6RiE]it'r,;6mF;BA?THE7NXli:%i5,CS\t**.wL>fJ?^IUk>R3m9„U"+\3i>h0uk;_]L?oSKLjG8AsVtIl;tG%hhmike#*fn5GFM#.0WMIJnsNdSpE.P1?„U"gOl(4]B)[+nA\iSM(ets\ouWs-tQ)tu-4gNVD>VQweuS'gtKc[/L.rrG+t91TpR„U"DBNVj8#GFR8I\AGb?gn=5oo7K]6IY5_GlqX>+es)7Kk$BCDHRq5*:CWXt#oEl6J„U"hJH=4>#=Q3VIP\Ua\H7,eGQIu.8A2wOm2&>b&kal(]mby$4SPG]qU-l5\?.rL?_„U"]^S.ABPL+lQ.vx?B7cZ6XY1f\QtWoz3-Y9\h.*FeYVZ%NU*SEU9\p\kqI<kVe?a„U"3.[D.nrk=o#ckDH:p'/h#eZA9lVH6J3<I%FV2$Y$BS#%gsRe&rr8mVF(5g4rAcr„U"V8(xG2HD'lS9&8d%Eumq7tcG/m\+M;&f5=1K$tNs,eu\cEL%:RxyE&.&TYM,HAB„U"%p9Lg;e?#4>U[[t88iRc%noTk[:a[\r%?JJbcDM)1a/,*QROcHHBZGw/NadBJl]„U"v<oBABYw?HVL1&E&-1MHi,t+j)n00$g<\\jYPqf[[)iBMV)MDMlSGK\5HEjB_n'„U"brrLw9e'134d<1[c%]J%=h;,UgC3^18])9#I4=?RB_/YNd)PKn;Z>99aml-QPRj„U"gR12g:hf?tnaT+mFjaVaJ%/wlm:fJa[R%kG6BWt85rT\OFq(dtnv'd__\?/;a_l„U"[DQV2>ZqI;Ebja<$ZXogo*Irb7#_4L2G+S-0^AAEVU.*<\U])ooOFw0-(%Q0czg„U"&uhOPm4_u2^bo:,qC$C?3rJ2R/O3xg5Z)-2-bddMR]RPoeM-?Q/qv,6]a[AX?[/„U"R#Gh#pA$su\fsB7AO,6C^cp4XmNl>&Xa'J<.Eb9t04VN^X:vJU^Z#0,[4$M.>2C„U"aZ)Yr$&)b^(-?W;NHB7Y:J[S/J#Qr32h5:i,wpgAHfTMF5/dV.bJ[Q$\k:PG]_-„U"ORLKg6kaL[iTKl:<;8,[Cf*+1ONo'&pv+>TeH_,p>xn+Yjk4QTA;sRDR)&_:%Mp„U"+at6oWYg<:zDY)bz7QK;fjaXJ^>IC:)UT;s10c%O\m&m>ku'6,R15e6'];6IbkH„U"iEb-DFlncv*KN0)cP[+&Y&]zfP-:M)2>2aN9=GxG.Q(O1d#;QTpA[SD,,,A+y>l„U"mb+2%C]yo/jdf\)WEDKKLr^eBMzHga\de-rUasHqRb]ca\C#reR\A6._(6<iSWz„U"8DcCp2OwWCkr[hkXEAQu*736#nI4g\t/,iZ5R3sqH0pV6<rUl*^P%>HV&85w3pm„U"08ufWKtRmow2UJ>'r>KG\]pqG3&T]cU,;&0+Mut3h.Md7+RM+eA58g9vUA]f\wl„U"DNsY>(/V9h;-Q)\D.H6J^AKCAbK&J4HuVj(;=[v3koSPc-o;;cf3y'mvr5oKA/k„U"=]>wEj%c<ALo[71P\RfdVIKy\yb3Z[Dl92';')^'Bp2fiP**-1DFa-R&;/sPI.P„U"FtY9v1c:hBmI^42xvP/L2QmGdeAqn1N0[>Ar26EF4;=G%JaF;ESbYpnBQ<#,Ez=„U"^$*irdK3nR=gE$-S5Tj[<K?:<4b$x]q06Y9V6v^N2BpRu$.>U5kePLRsV1crNWO„U"9PTWB3(ak[Xaj%W-u:HGG0]7CKYfHb5LtjlJ)-(p7%mu\#oNRY6KqwT$iUgL;55„U"&Wg_fL*529m(71$0#6iB;'u*%g&O5eg7?X4MCZ[\]YuS+erJT^Ye?-WHdb1V\\&„U"U/<(GeDy,lX_A.\xUE/qHm\EA:B6UG/fq>7-8w9$g7kT9W.%oT+K3#<tGFg.zb'„U"c%i>px4?6JSe&TSJJDTwN;1\Z04;=xa%R$\q2)I#OL9k8f&P\jKhc&koRjVIWs8„U"BGznvM/JnX^E/u;[hYMi(S^5+6=vL]rxC5X7?Webklr.Q$tfXxl?dgx<rQ'k+YJ„U"1(bhL8kLI'<Zjjsc-_a8qe?(LHp.;ks;Ifa#*GyHf=\YUBuO;UkzeJr)ruN^Ag0„U"rhcUp5AVk]#F\N912+x#_;Gpu84bvNWqS[7F.(H;n[NJAN^Vp)tQE?LL2Ric'O#„U"G/yr<#>H2%4'&uh-WK\rq.\/)u)&)2GrpV06;h5(cSS\.*V-IsimU>[TJPq_U-O„U"C>$9.ctMUcbOms\ks,YAm92Yjt#/Vmpb&Tj6/W9AG^i;2Sp2A<Dj*4BR80*+u[e„U"loCTeRz,6\cqh#u$p<l?s(d9XQwM$#ph?J%ZfJ*1f6h/6FB:ddh9sFCF/oWI.Vh„U"fX9mtv0XJiP1*P/mZheJ+)U(^Yn4(#TS>6aWGW\MU>D+xWK$BcnP=XJrJd$b58U„U"GBXJ0uTh_*bIK_QT\NCq\.B<>i/$]Y$aX'aj2;*FQ$j]fW<p6T_j/l^<*uL.x;d„U"rU0P';-IccE_(u>olC^wejVEqijc_HPsavMxN<WCy1Ewd2d5L]?L$6r0gne\hQW„U"I%9?RB'r>Q%'-rxc.TYBb-.r)#b-P&DiFl^XBX:HdhvR?^NT5)Ka:og0.+pX]I%„U"pUhP15R70D0LRR&C/2fm\%JvHG4Lxg+911JK3M[r#d.4nQ)9C%9L\YOHW97c>R;„U"+Q&rQT%;>f*4;OzcyR3xw6oJ&Ik/F-&9Jxgr%fsV[0dAq9ui1)AD4,A+ddL)+Q)„U"g^vC'VlV]FdcdbZ^+conkf=\aSfy^8G\iPt?fR(X&T]oQNgOy[yW30L_G\BhC]a„U":Js(x\]/7+PY.R?dM6d17FH0BRt?d5-oV_?Ho4\C89H[^q&ActP(cx$%MkX7hME„U"xLrbk5RY];N/WeKSAk>y'4a02%F/g1M)nY8pVYNZ-(L9iI8Y,,jZspHjbiFm2=(„U":_K6pZoDW,tVN+/8WUJ=M,y'XWZw=?A;NUe.7Ks*a:g;5nvJ7V;tY9oU^%PKVy'„U"Bhto$ug)Gv;i$=i]EB:/yQB3Ah2.o-#9gC?QY14CBJF:(8(<)[<,DevJ'/'y7O(„U"ntay\j24,DktgYVX2R<0S#aLc$WAPY\3LYbwEDp*U6]xS#'CXt*dN*ts47g'=1P„U"YC2Zx.Jbjczb4:QO:7o;G/%-Adhp.i=fHUMkLE?dSiE&0k09<,fNpi+?L:aHim9„U"v+^7^A-G40$n5Aj;zAPJFlQV(tTV(zTKO0Q8?MoGQ_40/2a;PjGcJS6OXYXo[%K„U"OQMXxWE?[+G#._R<AyNBpNEj<MVw'hPjW08$;zzD2Zf?0ZDnL9#j,SLf+.0;s;5„U"YR[_O$XVvW-8:8[lfSD(?mP%JKtbqClJ3+;Lc_5z5uU'+#h$4C+<+'T6H0)b.S6„U"r5O6E0jj'U-E[?O],CbXjYeM>WLtUh%m(Fj&)VDM?-x6\\qu^>r/BzE2HyWlRTM„U"?k-+rlHZemIuJQBjV#Lt:puv##pYjYEj[v/5*:lgJ711LoUh_w,8TlSA3A%7([?„U"'-r$b[_d&U<oZ]&gU;OL&L%^DIxc^lsx+]VgiL7b<0h6NJotf/?wS,4ZY:K7/A?„U"fU,uvYomkK?4O+.aYWzqBA>tORv;A1do8qE(s]-we2p'J.dlSjIO*mzB4_oeE>o„U"rEkJ4[F%GAu>2l/#C3PgwW,Y:GcA=_&5emZPb/fUL:+?>t+B^LKP8JmDNVkC^*r„U"P(hklM1TW8OpjUDE=VdPg4tu1#1e;50U^HYGE**N/iu2N?Z<e6]%Gob(-+(CL'q„U"j5WHH3#QhGJg:Y[#O=AQz[2)AWCFuYdI^H,U#;?OXK?J*hh9$aC80;'fD'z*\&a„U"jY<_qa/Y[/,Zi]_Pcx6=KsA>?1M=;AEKfN]1i52sa?V(TvBJE2iu+K^CD'2)Mab„U"#j^lbBH'J:IgW^)gJCdV:t/GpMgi+8X5VASLoM:t;GG:O)([EBL/N;XCfRR:b)h„U"C[AJ46-1<ucxmrR3B9*#l5p;qr=Wf#ckU5N.R^L8Yl)YEDaoIHZv#v)N2,0o11C„U"zbVl8y\xa$$jgc8o*D]/kzx+,Rd$o$;qI[#.2?VDsM/B^;V^m^iI<q&y0F02gUA„U"nAsp*$],ao_%)*C2me&#2td#b4bcxt2>+,>chK-hrH$b[(C=y&G%C2bee#D3d]e„U"y5UHw*G44>HZQSi0\Wrq3ObCH5V%1M+uoeXESeVgH-[T_QEGPw9sLAXH8j./fnF„U"8frG,8gtGes?6J;tEa];'=G+CPi?A+Gc_/,97o0V05Y3V9ir*/(81qleuDyeaEg„U".ZT<pKqChuMLqdhiA^5jAuPqM1\*Lv7s/[%f)).u>_=-<qNVKUll5Ognn^j;R5G„U"<]Ztd_yza)0tVjY1=.?ME(YdfovnB/X#\O,LdqsFwp::=yP.i?<*:tI3M;7jz39„U"HTDQVZ:7zNT+j]F?2gA=^NHX*ZLSVxTq/9$],5$>vC,rz$lW$/ERYd*JO3cIT4I„U"ETc]MI9U$U?L1T:w0DO'Yh+F&;2=*F)YAU#z_ON;U%=$)m5O/HfboPHZ/<P+21T„U"CjD3m^xRF;'u8aiFJp\LnC/Fi6W-p>(=\a)G?i:sH[1Fi7)VqHU?SjQ+T:lF\L'„U"aELEJXt-=04r=4Cr1)=<hG/FrYf937s-_V4E0sE6%K?5L^W]$jl46;QE(Vm>MQ3„U"$8e-Z&9IEGdRMH5*qfvg\HY[===)JfuW]RZxaFw;VomA85Zpq,c,<ObVoj^ZFBF„U"TG$$nzurpHY/rF:1qs<+m]*INP7HiB(6nQ8RJyIsf*A4&O%s_LoRQ<b52^T$X(v„U"Cpy7^W9bjlKS)K#JNH-scb.mGVodTk(<jMs'(+hiQ>:]<=k[&e0<0(yf1vLxB^q„U"AfC>\cW'^#eUA(\umV$L_FA$hhrq;RMWG&TZ^w2MD&Q&eh#?1fHYK/\nV3*+YFu„U"UpIiH$?[aU)P##4MvJqa\w/=w]CN<,:GQh-9jR-+CGm3v2k604XtQiRYT\+rNC)„U"PakRu0owRLwB:VCtZdA(q:W5hFeKcm*B.p8<?,5fq_Vv0%cU&.&/QfM.bOTi9dC„U"<F82O.FiAi4#OX*;mp0i<\Pk732HZcZ..mBD\DQ$FDyc%a9aPv6#oB:MO*tk7u8„U";sR9IFBQGSsm5)t,2i9$z\phMabr6hqu(Z2j-2++YZE4f;2cpT;$k178SSVq,2b„U"%RqBOR#psz&lH<g<+otKJlS1pFVd2s#Igf<>\kPA2S'[zgreCN71^Wm,p.Mm,pZ„U"uy;-oU5M?d&m\msN:GwaE]ilkTe-mVp5&2ol<Bj#pw,k7(vVfZ_D9q.gdVB)KTh„U")Ei(sos_YJs_QGQ=vBpj:o-I%D3P%SZ>IZ/sedp.[QYQc3X;uA'qI$M&4,)YhmA„U"(q$daAY-)Eud9xbODB7:8/suRJZIs]_27(5X/c;4:#lZpf9d9G]T76Y(Qgl?pmj„U"1A($7?_4ln')\C&ms+21W#d>A^R[Uq+l\[GCgiSRyg^LG)B3P>iRo8Mh?V:9KcW„U"'N3m_L$tvxRdX'a^4cW-tIG:WAxURqT5eR&,3ZHl('[P>AGQ0bP+178j8:pWOu)„U"_<FFLK,B+Z4BQA0ab#/JFa#3ZOl46q%EBV(lPf\EI)(*V_aBssSp*KGp'\=iH:)„U":x^tDo-4s]f?Id(OlS(B^\G:UQjsFM%_xI(DIkU9NEiz]a>f1LlQzhO)'gK;itl„U";Kt)i*fe8Dpnw,Fn8B'*OKZj:R2_My+1-[76%I25)HB'H8)8]vsY-kY6q?Q5+ib„U"(k,+U:\[]m]kBA2?dy##jk>9$EheojHq=&Vo)wIRF(_\BHmb./LOWI_?10(:a<j„U"/W6V<$IaVAivejE9;JU5&B6Ou*B5Og\\_,j3d%IU#(tU\'4._Jm'q%?q:kGjhtD„U"wZ#;q7m4>sQsJ0H^upIx1wb^bLiX,PMI%U9Rh+P\4ufLPRP34nSJ'tbB//(e5n*„U"os7L.y/yP2oj&gUn67dDkWQM>vX5Yh3[hitR4cN\\PdEJS3UDZe]A:Ash#xOcnc„U"xph:'e2wFF1<smE&+-PA2Vy+N'F5B&%nkD0?0)$3SL&;b]<GP.:0lU25RzXtPRp„U".6_h7d6b7h;'.f(JZ5<<sFR;*T:c6H;K*4Y^8^U0h1oKh8?LpRWfOnb&6MFsQi+„U"8Z9Rg.tfZfRyUHy?5)Z*hd1u$EwK]2pug=aBUv>.tu86=sxB36NIki7[-7JBTog„U"ly&P?GZup;lSCn]F(up;l?^j^pFFXDl(golPMZKd]th3hwkOKT<q9KyaXMJou:C„U"y4>Jld&V+K1NV[OofHwiHm/\pGdWOFOFo4J&62w&yn%cmE9\T,+UYkIWw]^bFi=„U"]6?&Ooeqsu%$klV2+=_0vRau(a#*Mkj#9xyO316&35n7ic2w[5127X+KC>2<QJJ„U"hB<7HHq%WhZ3_S1/%SrO+:YfP'd/AJ:PvC[0=v%4J&e\'AR.ln/8B[AYP&Hf_*l„U"Fa7XJ8_U9E*Cj^E?Yut+_e8GS4OsE=9N$W\\X7T,8C/WY_Kss.Fd1tKqh_d/M#K„U"hUf4P?Zk/H6b/;KX$sG$RCeGX(G#o2z&&jWf3'/aQb-8+_Ujm+fVfZUJ7l9g?#s„U"W4/El)+m-#P)wE$P0g$RH8=zZ2(0H,PpIM;78/5RsvuoT>Ht-E1)vz9\63-<%?%„U"MolwAn9H]*VZBSA6=,;^&4.XvGuR4k=&wa>ra6]u+0[NqKV,g,4&77SzJwYHx2+„U"zOrpk*jj4(%Cz.y&HNV4vh)oV1ncGXObr1tVD\rbB*tJsgHbdX#$m_R18:NNgzf„U"%K0yB9<=Xea74.XR#WOg4>+p%CrE8PJxhkv:j$'P\_BN,^Pme=F?p,B#q^rEQ+K„U"*pBc,]+,kbu_73i0A.>AK=F5EE[B(g]p1/5$m.&_)iEG9nMUQ>V6m7.,,0<Fzo>„U"]ZkQDYc>-*Ao&b95_18f+]l\[xD7-a-\'K?a:GWI(P],l/=Ok(:V1sRDaq]Ffn;„U"$_,v%>Ch&ph/OHd0*ZV+Nn1]+U*6gkudw0jl,K%C><&q>'Kjsy+K-?MYq5631;(„U"fM_q3i6&Lhxgi&KA1$DSbNK]Re=qZ)9'GSu89\mJCNZo>^Lh8D3mVSwieHo1.^l„U";OCB;1UWEpc\fmXUvWIO\J<$Y6;(*misu[B#z&$\7JoQWO)<(s;uSS$_o.FR]P6„U"ZTUqU]TGIOuDgbN%0\Oa=3HJI/lh^jW84cHr,dQ\tPG)6kx6IAco[wx,]:sp,Le„U"\l?&iPO,iHO_\Bp/<;W2GPHkSJCYkNDRv?il&AH+r[j^6;.M<]^mTu?(e9h^sMo„U",It^*>bx406mkRWJq]la14.lk_<Kp_*#0vt$fb)YhI[>N[397x5MyRi#EANI9k/„U";T4k>2\j^+j*7SGR=nij=QE)ncKwcSwN1G#K2't%8vRlHj^br$wPBQwH?C*IRth„U"F2/m$_<-eSecapJ;Znecj6.DYAl<4YLYbd:t]]h$EH_ZKA'Ar3.CPz-qRo;:t$j„U"x*n\WZHrA\=/-CFS31w&HZjV5.^05v1h?MN]0lc_+\q)TlOgltCOWt3_)^)$9mu„U"^+uU]jb,Qh/K$:o':.hBpu>\^U9h3_p8pX*\oWy4Lw/VItCYdcITF$CMf?VGdD8„U"i$7+L0:Y.[k<VGd-<bd)3;$-3(5d;YWn.o$8$>5mBgt<JCH11$uMBrP#F#Xcjun„U"lx/PZObE+4XT)i2Vm,.lMAdD<5d\S5d&5=dF?2O:%q4$j0:>o5gaI$OYQ/\OAu6„U"ZQ?mBFeM1WZSjIn8rix=fSxXB.c-JFbJdICI_RJ0YI$=3;mw655L4>9?%ofIVN:„U"v?qV[O):b$Gptn5v\_*ZrkbC0QV#RlBr5;$BOHwd5.>58x<GfJ>n=hC-^51'D(S„U"lm'n;bR,ns>OM&:zxe2e(s8O;uPuQ$oN;tnN4*hiuyxV,1Xz)[,[f7^r4dubU6a„U".%0rm.LzJEyL)b,P&RoJ$PNJ(yMce#x:/sTfe5z-6'r6x$j)3%.CLM4Df/N-Um?„U"Sg-dKeCwR3f\)ACl*\q^U5TLNVKDGA;[jIm7Yx1tg.'Gnd%#4n-#.rE&V\4BoN]„U"m<4<l1:%4M=U&DQKk9Y9OWYQx_hxMPuDRC#NZAiqrCI?$'5)GC7%BdX1x##TlLs„U"2.C3--i9&ysWNwP&QqK;)P2bpKCH?5s3ksbC86x&mv?BY=bCTmEwVHYmkqmkAe=„U"?2^G(aluDc+e5WkvTQ6SM2*_[^eg8$P>tM6XC$RC/vfC5L,XHR_XbIT/;2IqS%I„U"lYOlh_.1bATo\-)/h4veeD$Y+d/fRQRR[Kvc-qfnRAnh)L$Ytj*:p#I6EwTMkS6„U"aauFJmqfYN^]FOjkiZU?/C%^Mvuw?4KZWBQPag5I&FltfAPx1^m/&TD_W;J(DRy„U"8>/9b#741pMJ5\u_-1v*)J52r)2)Olca%k#^CF&.FEw+FK:FM2%6Yq\2g[*z\HX„U"T'b][dlgV%$+j,BW./>'#]?cI&A#J4Y24:qY9Z[;AI]1RwAkL9W&$Eh5aR3S>tl„U"LH+,S9TQ4qB8lTF+3\E>7:W$Y*2)Fo'N=i3p5-b&#Dq+;/.vn%c*,MlC'RqRsik„U"THQ=#(Yem\;egqpE<4cDrN%v3/#zEjjIsYY=nd?%2<c4G9uxE$T.gLnn,s[g<Lf„U"dC(WACv)#vfMA/c0i])cIf._x\r)62id%/5aoBWbKe9t-n-Gqu2&T1p=eB[)IZV„U"aYi4eB.zik$;n_YuX/9Pqzlx9ssfSbZ-<d))VI&u=/x_PS6^HeUI9ktQ*O,qHj/„U"IftX+CA?]iDf.v]Ks%S]#0(/vp+Kbt82]vt?3=;J0j?C*o.BF7:.G6<ip4vqaQI„U"eSrC%yfdD.s'O?kcxHr'+_vmVZS'vOV0e<Wl6VxY]WbDVSTRLQ^Ct3e67M#ha.M„U"Jqa65AaGwM(1-kxa36%$vZtQCvPfmuiZDP(oP?[%iTl-NDG488996oEJGC(<qR\„U"/Wi*pSn,6T2qGrgtL+sBW23[;v7nls.CFD(-^;;a=2T;\nK<4znSje*S:F^zcm%„U"S[T^yCP3fQ4r?fag(XIH$jD&V&/m2QPV<bsI_cen-:r8SIZf.e*lG.,+L=*W./u„U"g4N-3>Kd5KA2LhKkibt^,d*5$6yskt98?vb70e6n33DLE;RE6V[J6fk2-YESthC„U"lRw8pUt7QgBfo3Pjhn(i?&8sC..lWq)T.6*A('z+6lUHJQ5aV0kRK1nxiTUY[Ph„U"I=QJ1nY\36K^c^t'WQ$Svjh='3]Z>O32dduDY?RR&QmKW0V\Cb4Nv].xK;^*V%v„U"G71D).BFS'7'H-uubJN*.z=k,xhI5kY:vUqz.i]unB5*&Ca&=TBBe_^Aevt+bwx„U"ofop<8nw2c;g+EcimK(;8MdrOu^$7W50\g4_SFLYr>M[l=?=L(dDfe37wRNDIEI„U"QhddA.gSe6;\MR6-fiB_daCjma?P5gAaKcpD'OYra1Cj_wjC?SWIsy0[b2m5AV*„U":+1%5fauU0l_z/IGBuuFSmQk)]I;L)sgMW.ya$-5(EZ'GiZR;*m_e>B0UNkcOK2„U"uutnJAN4gLLpy\nC#MC.O=T5j0FzoMH=%^;Ypgo(LhOI#Z)z]<>Xt_gMnDhc>9Y„U"kn#M;ZU=qDJc>Vtv3,<k;&arP%83b(nGq,os*tbKJY8:\]r2QnuqskxX*#\OxbY„U"pK;eq6'W#_mvB:mKXc?Dgf(,8$&FBGb-a,R\0AZ%ZGt<[*A:T-MIf-FfM#.W-MF„U"De63#riVDqG3nVb^<AtRDELiE9Y;%,WY7y7(^pzy+u*;WJgPp:j6c=*Bk?Y<7WV„U"zp+x_e+&$,\K9T2+-SvQU%P.L[=zJa4n+-_i3:M>hg*p,^7:8H/DL.)VNqzbjTg„U"42]a,5S'DeHf<#L>t1+whNQ-H?6&H'Pb524lk7gM.^KQ^N>Mk]V-CK)pJEkX3+X„U"Eqx\d4E+Z,>s%2%[SW>?<0]]A_3oAf]y'nw0RZa^'OC$/6[X_IM%n_>yoCp2Q9S„U"iLYXQQ8)&>ZX2pd(e,t+s)GSVQCT;/3,Ege28;5jKKde2[0mo(XzK-QaFM?w0$U„U"*--[GOo/\aHr$LhKK%_P=9A'ag?\GF\bmgdO8jm\'Mjp&a-aI%+;:(tw?.juzU&„U"/[959/,0l(*%Qm<QY##3]I*aeU7#6tO7A574D<Mak7gR+LQa)0f=.PV)-1y5]#i„U"PGn/VdnaSMOCwEO-*IS*RBCl3l7C<dPrAGuZ<#xbp+voct0&,x\l1f\tNWoJ#sX„U"g<,*#UWw-iRjARc]d]DZUDM<L]QwWl46AKe0.rS1Z\OY3Z4f_7VXti$[l)k>I&t„U"]%q&<b-aO?ABH]rM=Ji8RxLjCID7Rv)wghM;&c+^Gk=_Qd(mK.:4XmI$_I>%e/f„U"l)/I\rxp$0(pmFqPN=s,>&>SN4BOeQjlqS,B;>$;(i1=vlU,60(-kJ4b)8O<)RZ„U"aHf>:XdwO<1<5,'0^6Ar9<hoBRygh;D5xXOmuEn=zuBI'O6AeH[tb&F6c%sFj'o„U"9$hDYcoV3Y9QhoaFTT25H3\Z*1H*fp'H6T&S>lg7Q%'50J\5Qe4NxpDEp$S+6Ng„U"WM]'^dj?KL&j(EdE-4_J,2PNZ6_uSVoYI]0hMTrd=1]X.H;Ge_bQBK_]3=?CcV?„U"+t_S,Aqk*iGq/#F[$1nnG\^[]bH?[J*5O1r-<?K[bhb69GaF=g#%J5CBQmkx'pu„U"=4&&7&;<=-'sRM-9=bZXiel67Ofo5Oi>c0$z.7hy(,Q0r=*62nz)FOD&agll.].„U"jQO02?OaWKJkl)/RO\\_&XLG?P6sp[6<Gsg+hP6BcPrTCP+z%6+L).hmA%;>D-I„U"tnT:?cO#29x>\oP%rA14)'qOz:JM\Y+KDT)pK>x?vGzY0Ckt*kc\Z'_YJ_%YCZB„U"^E/e<?jRf<M9)5VU+r$,1RolOXQQ4Q8SUhySSLtXN4doW3vRpr>MfmtK7s^K^KL„U"\XkcGjVk#[C5I+&cN;D/F=.tf8l=h_b.n/8aI8RCO/nDa+700i5L.siUrL3<H[,„U"OJ)lZ#1_z*#[f[py$:Hp[kD;_SEJrp;_PiedwXJbqXHr>2e+LP/*s(D?J7_'RNU„U"w#jgTKGTsZe7ABQ*;s'0(yfHfVv:7mH8nZ.xo[QTL(Wo)CxkxKLy(oaYs,rC=$7„U"eGs+9$q^ERut9rF+<r3^2&XwJ/L[W_I4F2?cHX[<>rlT,SJGm1B,pww)1g]WKuS„U"2afs7:M.$o$-in<<P6]Ylz912zA\[0*7gu%17_k**GXKrSUkDO56/r/b\8QdQ9D„U"?QqsE8qCPtIB5C$1KT;box]laMP;7AT$j.yG&a#;#MnKgt.]v:D$<.u-CexzWo_„U"L--H]#V^)kv<L2Qyd;qCxQi5Zqx+aE;B/d5tWs-0qOM00%\1ofqDKm5p,e?<1_,„U"pbTAaSf&Mfa^*;9+SqWaoi-$^zWeK7tp2GS?CvXJzX[j\q3Su6J&EiRvIUmd:?x„U")RMJ/k:y]7PpaU2a?5U?Ra,FU0'eh[=&-XIpUoKSU_nnzeTmPiwW,.dx0-B%-+R„U"W3,3WsJb:>_dzpdP1OTRG?*g,PFXXp7XG0B\u\=yP%9F.)O6[;^?AVtFD*r4rg_„END SUB„SUB V2„U"R383S>r4Hz<#Os\0ELQ$GnO>%[a5OgYBq&ft4ZlJ*j-ZC3k<D=d:dR_I+:zy$<W„U"4J?)%GGDQYDUC_(BX<5%5YGUEQ&0ae/2h8h2\aYP''gp#RK[8MSpVkVRKpjR2c#„U">Vi&&2-AeA3qHvE,yJVHNkU*T(ODd6+H,:0Uqv8bN_2A[fE/%7c.=wWWVXNiq\b„U"ZCP=u_?#FCR+^x88]F<q=Vg[DZWZgImPbSJ14SFLYnhqRF&G[A>-;[5jBsORQpr„U")QO?/u1f1<==B1-:[T6o8LjYSF3MMXX\8f7$C5%:]?o;YA^0\HU8d'k[l,a^-W[„U"8khwAcU)=3qz_/44cAr$2hMxwi6$UT7ma_Ya(%$M+l3l;fp]d#d#dgq<VzBQegs„U")-:kylN6eoBL5J,,_hrhS$%Yj.hce-iff^_z3KTeayg$43C98#9c7Oh,.;[S44J„U"J:=UG67M*q'uu'RIK>TDs=t\aZEvTlr[y$j4eSCeLI#(Ir7bh0T.c$EnbhkbtfS„U":(M8U#T9zJ3??4sMcp?FToOO*O%W>?3VKrpZbG2qneKTfeP.B64IkbFZ;gL6zN/„U"0hw7i6I=?vmbm7n8T)%2d$Fd,+sS7o'Rto\H>143Hd0i+^_/RUMjQa-3xg2zW3F„U"eyQjHm+iV:1J#Ky-w&kAXDpmOPd8ykkiRY$t+NvCM\v/s9Y1HCDrH*UXqi.F3d\„U"61'DvxrgE[2%'r/v-2NGZt$fsZFSZ#h$4LoJ.$eV2X[#.m;1sOR/r>+Gj8JTMFW„U",bMp'5o$iusMIKgt22Q0d9]IJI'HeKtuELH9\GS*V8ev'Vu%-A*%=LV>E\^u8s>„U"x%*up(%)9%%#%-%XDcWEF8Q(Iw[-%%Q%B%%/%%%%q.rw.W%UUSgOnF((&^#\7_M„U"e&xX,;i5f?0J[52,O(C)US:\cm?2346;d:>c3Y*cgr[=moEM%dO0Ilt7MienmMF„U"Z+Ag%A._7GAR:1'DyZz.^:ZjGl<j:kumw6tZpAJnfXdjH:fTXdux#u,).NbMHud„U"Tn>Mt^8uSvuhH<;iWcudfZstxstrHnV$'0xBdTSDcS1W'nM.W:x'*[XylRA92HG„U"M/Dr90WK?g](;ASjY[k#)#+a/KtfD,dY$yotGRAraI&B$,fTx5X3BO.:IQjlC)L„U"*-K0yg,(T<VM_tW2EYiQgOU_z5\m$<9(u4GIWN$Y^s.^ZOI+28q%FIPN51kp#9W„U"u7Y+d4ofE5/#Ra&8sb1ZKGq\[HM2d%K=HAAda'eP)rlORRz])mC>XnwqGAoT2Ns„U"sVj^R8=94nd'a[gCm^aH#gC):?Aki_'^p1i4bAL=^u\F?m.(\Yi04W'%eOHp=qC„U"I1bHo2r'7$HTQ8BT5s<:)I]1yK6a<,4<YF\Y;?W4-v7cAG+u\Pqf5>LZp_NG;5S„U"n4HI)fM,d<XD7_tNs%CrlVW1m$N1HYzUj;,MZ**0pjd$ipn>f<wrC$4D7l1j(\(„U"09xhP#&3g[9$]bAwLAp/bQ9vJlF6aV^p-)fs,spc=$372VW8\mA<fRO6E8%2ENR„U"/bJ.:nlwBO<gUUJ=#gFXUC4%Q66\,:(iz<pkC5,:R(*63_cxTg?x>;onC#S7Qdw„U"jr.%3Db&gm+0fLg#\6mb[im2Z[z9gF.tD2YEMx-p6>'axAycsr9^lQYK1xIVuqM„U":B91HYERN#AjmO_<RDO/OZPcSaFkH5Nh&sX<OH;E7/kO4-RlKfG[BO*cms*<JIi„U"dkCUG-2&x/rJ4I0B9l,tL:S^'Pgkd+.'#?Mb-,0%'Pr;YxO?j(iQw567C)ge,;8„U"/4J.Y4MO8I4IAJDt7VL*j_&dIHkTu8(4I[Cs.J;'2nuNvJf%x3+_2q=AEA/i1Ns„U"r_WAeOGmLkKf?Z=d;'iJgt+MCU7%9diTIVq?HqJom(GGe?02G)%W[r+W#W8js>*„U"mhEUCD5Hf+Q$9jWaM;Q_DX0gkXWTuXZY(k5Yf0_):BgM=^G0>P<Z80&bXqoAKQ?„U"AO63&D:Yxckl=c^];\W'8oX?AKYu6;O)nc%Ug_v<u1fLQl=DU$zwNMBCr:AJX0:„U"mQ=AAOs%FN3%eP(qPiP0\Ppi1#M5Y0Dxky9jaX;05PoLA)anq:$/=CSfsfyi'Ed„U"h\zBorrRwWZ]x:rPCYXL=I:.rj'AExmH8(SaGXo*znXG#gTroa4$L*^4rP*^IJ=„U"&[:P^h9aMHg:pSXWuYQity?X.C&G<*f)yuWNC=D_r]\-,sEwrU%=XU\Y3u')9Qx„U"qoF&oWb,4LUL-,.=<0OX%A23c,c/QN)Rr1LBKKdI#xS?;.y2t77m$M+F0_Lp&V)„U"wwgAWC:*9o/5O76eoiOQT251#8*hemzfTO_Fio^H042v$)'22cRm#zV1\c2gx?$„U"i[H^+3=ZmJhKig0Q>X2d$#mYX+17wW.qG't$DZN&?;5R_8aiu(_>gLql=a?]>zc„U"KQ2/a^LB7wLnuf^Z&l+C?Kfk*iI3+L$2A,8C)xc]Kp#mB%q0aLj(/NbO/qZghP*„U"8^Y8W2S]Iu*FG6qPEzLcoNLh-CKe(c(Vv4$I/0XA&gi]CH(FL_)yUo1RP:VoMq1„U"X7'JjY_=og..HdUK3FpB]r9(<0NKQ?5W3yA9OxkB9W?AX6l8AL;5Hg=V[vRsq<C„U"ulB'\AcW#_r48>Wg$/YB^Lc\R4]r:3cZi=;6k-:)dVt9=8eI^^Nr4Y=2Ca>MD.m„U"o1,SlRD-&>EjfIHbe,:>_On1E&E*FPAr:#64D3[[[kFebaiZNJx?P('m(g2jPf]„U"oQKc^$M2Vn%teft?8VK.T$Q$fEYTkJV2ilrQ$E#7<O6-WqCbQ&3sXT%NER5-lZc„U"c2/IEY4La;Zrn)_>CUAo/3J9$k<dEa/826d/DUM*HnZY=3TEElmmHQakO50i):?„U"W#B$W,s],p$L50Gi?5dS/=X>Ui'3Iq,%)ZqPdr#\O[W-GGR#^<N'4hepDSRbEXQ„U"LmeGr=4Rh]348jUpHm#3,l>u5%8cU<6Z'ZRd:SGgQRU&skOMU=([kx8uuW3;;Q,„U"OjY]6f?Zx]Jt<K#b9:#iFt'O0jj)0*7H]\qD.e9.3P<\Ke3-%Z/&V62fm4[j:TR„U"E7T#<]LBAYRW>]G'#7Ai9;ns4bg,1]L0,BI/]QUT>#=ytZ-$'X,U$sYpH6>w5:t„U"^5tNT:HBfhL<mg'u,EkmI)=;D=4hS=El#UCB<i%2\MKB,dv6lC8tB=D'-0d;?*r„U"_ey\?1T.U*2Y.s73V3U,4Uq)mSI2oW?A7p[VI>l=$SoKKieO(&O1*Up)reuaG7J„U"(4,Kr7kQ4E3kVrbx>Yl^HupY6tdq7tX'7H+41Qm.3J[*1]&'u(u;E4w#U;w(E<m„U"$vcufn5DwbVq]trbAR'eEi,fU=X0F]SoD06pYe[]WgTg09jZaYgPKykr8=NqqWi„U"W)7rRMV9]TLXNqZUJmbC(YLt[DYs;a7O*PdYhBGF_rj%r[RjbheqG3dT7d:]\23„U"J(HAvrLE8[-gjpWN'-am^dem:Zi?c,Jv3>r3g6394NfDy+huiq+kxD8xc_6\d?$„U"?(u04o5q0)M,4H>HcGbC[tM<,]G..O&$GPFp2I=7N2;.%Ae]-BC%K;(t;e\di5F„U"Hx*WN&u%p()9%%%%-I%I,hCD$\N-S9(%+%*,%%%0%%%%hts%xyfs%ySgnSdzD=B„U"T]9,RLewPCxom6^VPD*nd)I;6HMOBL>eREG5#m&d[6YMHiZyNM.-Ya5lR\\PeGL„U"nSBnV-Gt+)1.Z9e8-qPw(&i9w6%osyV.UZ$*)xcaMG)cd=W'>'>7.FtH:+(C.ef„U",e2&NNedYprdMup313PYB.Llp+k%Xxxoa$eX\r19&BM/g%an3g94we7hTJqF7s/„U",vhEmKG93U$Psu++ITN>ZWn+*Kf/#[Ra'(KPr,3luegwmMtvk5Zh=x1]KHt]3d)„U"Mq$2T+bO,](P:POAEOE,iYr?6aKC]/,HCmBD+a[m%;1uV[58hOrFoSw\Y?l\A1J„U"GIA88m:&n6dkOS?XRZ=WSXB2MZSE+PN6OS/EAQARG7s#TAEqSAMAWCuAX92ou-.„U"scp:LmN\_$6MVX]luwQrE-%KwJ=jJj:S_uvbV%oMt8%txx&zT0D^db^amTf(-SE„U"8u9#1Rx-AaB=zK=45]<Ki$IMLlaGVWU=iDsgxvjhpZh_,u:$M?oK81j5g9jXCHe„U"ADoso&eRZFk/U4S[eNzVm>u.Mc7bq*3CGVBd:,W6LyB*#Aev(mL4U41Q(QklhgE„U">L]sDu+lB]TTKP:;gUSxB]S<.(e^tl?>T=F&7Z_p:Z3O/JN]PwAS=-Mgjog;bd)„U"5#^kHxJXtJ<.PxkUBGY$4Q8DG/Ho?NN)=$Yy?)s_ejXb5r/zRK&el:I1G6'+WY^„U"7_(Ci?8rC+S[1MfrVTQjwh^vR_sp?Z>;e>I>.+cdh)t(oP?k/?-iH+WQoAA3[,r„U"t5VKZ/7-#L:Yv8CYc+J+JnY)rQ<6)Z.q#M\UVu/zB3w*^:5,)B;GCW6QsLn8^x-„U"CILd/P4Fe99,]0$1C+u_J^=^Vp<bLkFa#=8MFq=w5wJw$shMFj4OaXW+sX]C9QV„U"/$>b^M;^*wXnZjqJtESQOhN?djRP/w5Whr-g<u*4<J'T?vd.=[_XAIKP]++A:uk„U"2NvcS#YmJFJU-b7qn&V.?n[u&^RZlNH?eP0Oc.AiZYqZc8Kk\ul/LeN6,E+uJwL„U"P$o;egdkRtIWWOT?'/I:CQ-?ANj>+R_3M86=.b^tskc,KT;Kx)fS[=4+g8t76cK„U"'&<W+E&JRv<Kkc2hy]:AkZ&(2hQP6$wU0S8ZqWu#_\pSyBZ>FZRRmo8Z0Q/AbHs„U"22NLsPMsRXutu,4<E5w6<#itLBxjn&GMt5+VDFKCcTWgl:9nulG2ZDLrnjdX%up„U"()%9%%%R-%RgeWEAU&Nu$6.%%PT%%%0%%%%ts/.j'n%ySgfjxF)VtBT/+bNHqw2„U"V\vB'TxjLCsJ_8]Gr$+RiLc$%JBnsPitaP7mm=ZCnw%8sjrdh*gQDEnt]f<kl2I„U")dR7'elpwEZch?\iQ[bbvFtY#ncRmxir#GN8mCQZZqyNna\m4k^Q2E/L,Ox9O3D„U"/Dm;sPXjhG>Doc.&h6R$=.\tB1s^hfnmxTkXfn:02^s=LC;w>>k6U?+Sxcn'Q#,„U"UN+n.'9gKwA'.H$?DPw&LTNP$p143?ilX;ne=9[?c<:/pN0e^BNQ9806(k'<1^'„U"#uTR;k'B]EDsF^]VL+D<Cj2cO+j#WwFm#?ZiA+2b&n&;IqiCG25(+)3UmB?m.0r„U"%aAA9%l;b8Wq?b,'?G[Ugs6U(/<?=:>NJj=DYLo0u>x9'OmS;&xjbETVTcZOmtn„U"9tp?DZ83U72I;Ug]&/WC+<L4I7\?:HH_p]IeMTT+)i]k^SM:B^NlcecCEH<h0\6„U"yOEa&e&pYuASG.(,,e>PcHPKcbMS.$f;vP5Op=G7=_p)ra(R6<La21=8F_3,9lm„U"WQ7KdDs6jan*a\[0?Mhj#;??$6GGBme33jk&lNWLh)SNVfpTL2pdee=?KAn&0/k„U"3I:^n;c&Vkh.nIEOu9DmpRWBtj[T+f?J0qXZ7YK4?2DJwi0tI%<-]AzGkneC/A5„U"oC0T2B^[vBAJc\qTXUOh'oYi[.^B+C7hh^S;fuT;GiC:/N8Hhu=l#.cEpw3'^$H„U"h+>Jx3_=usHb$nih*rHUB)\>?grAzC;)sWuFLO2bO0>DpQ\4MWOVR[s<\&7^f:j„U"E&]1]ZVGMB9[c3F\)<j^w\o%rurkd5RjcPJut\VFM/d1[>c+K;gq$+vuridH2hG„U"/lRyz88O,A$OX3hR$V\<pc-dBh)Zic1m<cDN9w'Z3s=K$7;4Azl]E/J-i>;[?c,„U"-ICmD':d'<HuleAi*IqvlxWUbhPsq%%Nj]8*E_6l-vC5ziAeMF**1cyG=7i8.kU„U"BbL[On>pMFE,UHNoSeP;_H$5)I:i/Ap6[ea;O7bLnMT%Lk\<4pK\AjV_'I:VAs;„U"3T7km5=(klS:vpC89-ZtJKk&Jd1Iw]Tn.ee>C&YQ&a.rVcBRmPBZCZ;BYK2O7#o„U"aoo#nvFtIqJ^w$jtKR,1&N#g.WsF#r67BZD4dU(u0n$kB6f_,I)A4BHRQ4jcDQH„U"2CGep)bX)[dj;aB-Ciae;=C*sqsfGo&39wH;4h,vGLU>XpE/q<p4O=KaCc/w,v)„U"^>hR1)%GDZ*rf[<_bTvXq&sPl%QBeq1t-=<xwSnS/#mDdY*0F.$qTi/=RpuX9>G„U"-G9c5C%Bo%W]]*+kkfKeILln]=34RI>J+-pdo^a[YPb(e3V16)Vc;u<A]JUAN;9„U"S$GO^laqrWLD_9HNdhcZVs3b9Q'LB<fU&:.tAR8OSgzm9rUYL'_Klfa7COe;QcT„U"^dwN1,I+>#.?ZuhImObhI94iUEeu7m/Ayf'iq7+mKO$.V$r[$71M2=wjc5'q..1„U"D\3SAYhg-pG9/vwZTGCN+wV:v<^k+m+drg2e/Tb]Er)wEVw&:%Ibu_X-i7;7K.?„U"N,^OYZDR6k_wK1K^Amv-]8A$qI##qp_+E0kU3QBCq1.Z^4C0pEGDdqf<U(/f+uJ„U"(1D_jLfVaR?4^IIRy1FtY+Yf:&E*ou-N4qs%C7'[m.O:S:n2LE0rxd[<7SOoDGd„U"I='*8<nVcuPrOwePP%Sbc.mo,KY9FkX:MI'v%^GfvB;iwDrRPQ1%gExPhbVeRk1„U"6v+ZAJsy[/>m>PP=t.dym_Za_7m,g$h#6:I7c65AN0HRCY4H]>xI&WS5AOLoFXs„U"$=^1#e[)zUG0t2pU0]xBTdU]-Sj-=%qo)jL]B8G#h4J)_Mr<s[[kiPu(s0pNunt„U"T:jDv/32)[RJ$NkwaSU9#D:$B3o&in>FGtYf5J3gI3i]%(K6$NZ<M/C$z*%tvs4„U"o,8u:ObQN[QoqQWu3o<Mdo*<hs5RqdGvq[#eryy:mLK=;yr*1-hB5<'%P9g_6-'„U"M$'g?B.NPcK#lZGBJ7,R6se*LRk4xwe4vo%>tT4$\IW9S&OZ>+DnI*,SH5g>5by„U"efXUp]7%F>Sx9nDj3'nlIhW&DeyxZ?$=jN^9ET59Dt8]M;cSP6isZmIg\V+p$Q'„U"hUZ0x,a37yi)pajLaJ=YEfeg<,\c5)VOTF*b#0XkYPZAAAE#yPW$QJAq)W1<>0m„U"?V.qc3I#J#w+UhwUYJ>^QBFg/)4%*J2D+k-6k/R7&WA[X:Y^)u?nBXO.rD]J_XG„U"\%BauL96<TKl>3P(%fAltT>i:+U,vT)1W-3Yrxmu^^J;VH=cT?lN[P(0RQ_H*Ib„U"lGW.q)0:on*_z;m/nNhgxNOoA,^1+yuEn9+IKn.,C%eMJ7&cmuvNfwTSHD?HI09„U"Zta;?#=FkLG,lM2kbA$?v=kpWc8k*n&DDi87z$&7nUB32'8C:tD'g]$W.fGP,3\„U"4X1ok/\f4m7RvRo6r6rR+ygwX\4XpjRfoU8XS'G*_#Z$9$D%RP]gIAKP\DZU4(U„U"HH>2QS>(>#[90uA$W,o[C&SYqv(-A]%>BSIO\M-#bPL[$nxLP3.4tS-?uOM#Lu?„U"pY3+TP,[2q9Ct#C8_PgrG%:kH1NT*m>5Mu4^q_:Ra2JjX_VL0n:dk5E=SwV4Aow„U"l:g*J&%*xF-t2=:bh8:g-k<a#\.Dj4OYwsFv+t7D*iPF>ZD\j^$t6FDM?*?,Xr$„U"iiUTtydQ-xU2u[eK\7I&lwauo4Ze/Ecm)n?#UGR;DDVE:1V*Z9ne=g_)q2IALb4„U"-Yf?*o)1W;8(Xk]Tdu5jM]&?%L>JMLe&TgX$:z<(_M=0qEVG_koUFR,WZ;3+g2u„U"zwlnq[WV[QZ3o)-Y_e=_s*%xxUT9'd7DUq/m0f/=,;n/.\b(OG#QcU'#up+R$x#„U"2LdshiXskse^%U01I*u-d-6jDa&?+_Lk,qIQqS0;c=b*#di#SclU1Aqqz<'g1bt„U"U5AX[1UV:w$CD)sXkvTA*UOZe;f,FsKiVJI,hEZz6&cv(?VMLl//]+YOK't]Tna„U"+>LB+mbDBOY+/=>3Nf*$IIlckb8C2*seoP>DF7'/6a-2rS:BTJQ\*1=Lk3Y=#<e„U"foS=#-LW:#l*UE%t*S4Ka$C/FsWH]7nJ8DgN$H:E5V8,8=lSYApG<gSSNT$nRL.„U"0klAoP$%ukjI5zCP&M'TF8eH^9*mwWm^.9O?dA\*R0KNO9U_b4b6M'_>mSDl<6u„U"WTO;u##;fe<26,'%Q>1F8S-pk&nv'1;cHQ<KhmYuJ9M3IFMVZ'NmSPGa\7-fZ/*„U"%0(SJZ7M]jzt5J^^q.rm+u6.t.YsMOiPC/%D]L#Z,L#9Jniri:OYZ+P]ew2<&Qj„U".ZzB&o0m,)Ou=:23]+NxEB*SIfY*D>/rVk)H<17/mP,Er=g-7SSCuP'Zxts\(X5„U"YSg$kf#Uk:diB6M3:#DFY(V*]$42E[fLveYAIM/i?b[guJv$iv]^ORlPi1'.;q\„U"GMb3G_3M-H/e[f-zYW3P9>7Kj.Cm_?xA5lNRYh/2Ui71*%#$AeFT[V%LQRn5EpB„U"7n.uFHXUz-OA[O?KmYGT9rUw%.o7\')J2V<'o83jaJ9a/G-5DHD%)GQ$FQ9#[xz„U"1Nr(UTX#\MldxRH(u6h^B/LMAqN<)U,SdxNmOfiYq2uR&$TW#BbZwd([c^w>II:„U".(KLT0jWPwmrwqU6qji/-r?;j>G%#Tv?icRYcog7m6D9+*TpucW1&;Z:._j9C#x„U"QS,m^AEpF.&Mpm?3ccFh<fpG.;PvNm=G=6_kd?eFQbOwl&C(n\$dRG,2Cx$A)]x„U"uqmx?^BA>Cp427_KDm>y:xPt/-MCj*2EI_T:NR00[vd2+Luf]J(1-q]m$XUNm.6„U"V#4XNOI+Fn5U84Mm[VCEGAZ')\VUmn[9JZOBHr:HA_,9AV46U2Af*D>a1tdU,Am„U"uR?GM&IEise)Y>UGIgZHhPHd0EcNZICr_L8%_lJ.2JhK&[[9$GmPyS=J*)^z=gx„U"c=.#S,.=+=]Vyt4:3'+kA1I8iJYn*UBIq&\jZKuY_XD#4Y4p;5[?/FaUQ>X#UnT„U";jWs(Lv_U=G?d]7sM2R%^#,M4Op=PW->;mC>cSImT3rNUeV?=wZ$[Yd%LuNc((p„U"jU\gqc;MuoZxk\)H('3K$elCPP^/ku5aYwpctbjK6_Wa$O7D[tXFN&B=z1F0^fY„U"hL,FJRjDp#Fz;#+8kbHi4h:+n9#oCMH&jt=,bZ[e]$mpbp'.%ljNDX<N^.91j--„U"&6I>&ZMSc=y4l/<M\$9#3&nSZz=Lej2LZf.X:)'60_uD.$4k1mM03pqIVp(1n#*„U"<&peR;=7bIv2M?ef_p;0V+a/OZ.R2MKHvdd#e$>-/kTeYw>xEw5U(4+EN#LwcXa„U"4Er1orRPsAZPYnO/S_(z=aNpWPu0L=qsDvoW63\SF_Dz%NAE]4K%Y:NPnE5Br1j„U"'?^8g)LtZjmXu:#h3'\Og0Tn<g904u7F4xpN4bl-qAn9TDtqB];/5p3Cw+\_H5V„U"gTk(kJ:&5X'N4)*UHqvZ?(gkbz8ppAi3<4Oh]H+9RFv/YFU9.fqC#R7V?txGN7-„U"el:[LI]h_tT0LSJ:BfD-JXBlL)ife-o)z5=dt>5j\7H$C3?QT:J*_$BzWX*gweY„U"wzO$]30j8'(dg;k/(vM%IdPAJC\o'bzB*>)V/lT1C_rai[Fvnr^r,]+HBG'gKH\„U"+dSJG^Q0DF6'69eLj5Km7gG7Ak)f3NbwlqA<v6G2U44WCK-qnjKR'cJW\U.z_hv„U"LX7Tb3<olEqpGT3iR\&tTZJE[QfZxuRjdr+N%Oe.'G9MHc(kk.y(WNmO?2g2pBI„U"yD3Bu#f3K)962*$WGiajJ28n\a6/F>M4r3%SSN(o6D%cg^&t-4PK%$fI_rmheoy„U"oZsOS9jmW,dcuV0qV5mW,e)_I,qed$u3w7<l-(EjU(.UP=(3e&Jr$]ZbrbZo,ao„U"bxg_19D$B4Cpt\hpFP0e_sCesvjksgt=)luf[M:t)8kN&nmOI$+^A8BBEa>(VDK„U"f_G]2Db&wJjnLkAVjRts4)u(MXyZBS)O*2rQwD5mL7L:oZWCnC*r30x8u6w<FJd„U"SHfT\*'W.BxMVCQMxWtQg/,zt^CXL6?VNKo(GIQsw3DZvDk2g6ns;bpH>OFLyqZ„U":R8y<9=*x[\ClxMWGcbY)Ns$6u]NMreE2rspRcJ$ETi7>$4u4Q$*,MA1qw6c.g0„U"-2ZFw0i?2'm?1$xBD2n3Xu(3916/4Z/V]$87NUrr*5t7=jU^p16dzBGshS'w36M„U"LPs.6XE\f<9<VTxzsE%b#3K.8=+T;6b4zHI:--C6))zZ4>-yd&J<7#:NLFulJkU„U"uw\vnq7U8Z9%)QJmE_\=B_rfNreN'c6#0oxfNz^,%7b6mZh'cdMZuAN.PcJH$p%„U"N[Q^D+gYkkuSJ0B+cnSTDpFZwN0>.lS.0ufmllmX]M;-?'wX^54J(#keYWSw&q?„U"7RFM-p;_75#*d:['FZJ_Eg:2s8)ZkT.8$sc=%c(g/daxC/d5sU5MLP]:zRokc*i„U".YENpZI:lYuVddwdTP+qWMt8zyDdNz_H8H>GHUY+^<J2Woe_liYkEd*$U^%Tvuv„U"xI=XNGw]aCua\?>jx'%up()%9%%%7-%r$AYExv&XO?'7%%w)%%%1%%%%rt%zxji„U"%jrSg.fx\w<J=SU(9L37*x?:FI2KYOP<V7vInr?U/&\0n>746y_(#l-:5r=1W*^„U"SsYEh\PVn785B/hE,_*g:BO\$mJ5KeJPiQQ52RyS:NQ(4t'R$0gekN=v;Vjl]ju„U"d>fnFgcSNBhK(2kH1b5uqnu$:W*0zjc'<8%O.G_;Ie;.Dju9+4[^0qXxqW=h;Lr„U",jI]k?*i43DDv0AR1d^7'UDQD>gNZn%OYR3m)S.lAq)lG7-%g,n%oLQ/=xiQ:An„U"*.dNNi)v(Yhh?\]L6NqUCE[&cL&4J(1f;Im#a'CfE<*dWOf3?A;/41lJnz;U/t=„U">C#7el$Q>mV\P'/h;j3I1job8WpqV;7[1%7]\Ey?qToU5AP&7Q_yIfFgI-M&f7P„U"^jtK*6(^yTi,X3&P>_9V^:;CW\gBdzB-,59NkP6YrBmD)6WbxfzpY*nOZ3SYmn_„U":y,WOa^C[3\_6n:*iLID4X\1l,uW'Abl?#'EHDf;*gQa,J_v,QJK(]LBOMgBbZ)„U")ANe[(u-gM:SiOI1XdP;q7^A3YB[fv'7&Wnu67#aDhzQQ5p'3cJmh-6[A/q^6f*„U"a3<Q9OymX=Yp_Q6B7zb1#+6&/'64mbg+%8JI40oRYv\]=zh4rNW4FUmpY87HjKb„U"jH=#s4U)Lqs%T#amx*W7p(,HLI+gL7N$NTP$bTh3:?8i+8U1x'%up&'%9%9%%%%„U"-%2CgWE'\zp+'AN%%,A0%%%0%%%%%%%%%&%E%%%%%%%%%qr(w.WU%USgf%xup&%„U"'9%9%%%%-L%XcW1EFQ('Iw-%+%QB%%%/%%%%%%%%%&%E[%%%j%N%%q.rw.W%UUS„U"g%nup&%'9%9%%%%-I%I,hCD$\N-S9(%+%*,%%%0%%%%%%%%%&%E#%%%:%W%%h%t„U"sxy%fsyS%gnup%&'9%%9%%%R-%RgeWEAU&Nu$6.%%PT%%%0%%%%%%%%%&%%E%%%„U"%y[%%.ts.j&'nyS%gfxu%p&'9%%9%%[%-%r($YEx)vXO?['%%w%)%%1%%%%%%%%„U"%&%%E%%+%1l%%%rtz%xjij%rSgf%xup*%+%%%%%*%*%%B&%+%un%%%%%„END SUB„V2„CLOSE:IF S=154AND B&=Z&THEN?" :) Ok!"ELSE?" :( Bad!„SUB U(A$):FOR A=1TO LEN(A$):C=ASC(MID$(A$,A))-37:IF C<0THEN C=91+C*32„IF K<4THEN K=C+243ELSE?#1,CHR$(C+(K MOD 3)*86);:K=K\3:B&=B&+1„S=(S+C)AND 255:NEXT:LOCATE,1:?STRING$(B&*50\Z&,219);:END SUB„The ABC Programmer             PB MOUSE TIC-TAC-TOE DEMO      Advanced Assembly Language     04-08-96 (12:00)       PB                     218  7414     PBMOUSE.BAS '===================================================„' PB Mouse Demo Programmed by William Yu (04-08-96)„' All? Interrupt 33h Mouse Routines implemented.„' Please use and distribute freely.„' Interrupt 33h routines courtesy of the ADVANCED„' ASSEMBLY LANGUAGE book by Peter Norton.„'„' NOTE: Mouse routines are NOT harmful even if the„'       user does not have a mouse driver installed.„'       So you don't need mouse checking routines„'       scattered all over your code.„'       ie.  MouseInstalled = MouseExist%„'            If MouseInstalled Then„'               MouseShow„'               blah blah blah„'            End If„'„' DRAG 'N DROP„'   Use MouseInfo (Drag = Button > 0)„'                 (Drop = Button = 0)„'   Or use MouseQueue and MouseRelease„' HOLD BUTTON ACTIVATED„'   MouseInfo continually reads mouse button info„' HOLD BUTTON DE-ACTIVATED„'   MouseQueue - how many times was the mouse„'        button pressed since last poll?„'„' Although everything can revolve around the one„' routine MouseInfo, there are times when you„' cannot poll the mouse information every second.„' Use MouseQueue as a substitute.„'===================================================„DEFINT A-Z: CLS„„%FLAGS = 0„%AX = 1„%BX = 2„%CX = 3„%DX = 4„%SI = 5„%DI = 6„%BP = 7„%DS = 8„%ES = 9„„%False = 0„%True = NOT %False„„%LeftButton         = 1„%RightButton        = 2„%LeftRightButtons   = 3„%CenterButton       = 4„%LeftCenterButtons  = 5„%RightCenterButtons = 6„%AllThreeButtons    = 7„„SHARED Char, Char2           ' Or you can add extra params to CheckBox ()„„IF NOT MouseExist% THEN Print "Mouse required for this demo.": END„„PlayTICTACTOE             ' ESC or Right mouse button to quit demo.„„FUNCTION MouseExist%      ' Call this first to initialize the mouse„   Reg %AX, 0„   CALL Interrupt &h33„   MouseExist%=Reg(%AX)   ' NON-Zero value means mouse driver loaded„   '----------------------' An alternative route with inline assembly„   '! Mov Ax, 0           '„   '! Int &h33            ' Interrupt 33h Service 0„   '! Cmp Ax, 0           ' Compare Carry Flag Set AX„   '! Jne Init            ' If not equal to 0 then mouse driver exists„   'MouseExist% = %False  ' Else driver not found„   'EXIT FUNCTION         '„   'Init:                 '„   'MouseExist% = %True   '„   '----------------------'„END FUNCTION„„SUB MouseShow            ' Displays Mouse Cursor„   ! Mov Ax, 1           ' Interrupt 33h Service 1„   ! Int &h33„END SUB„„SUB MouseHide            ' Hide Mouse Cursor„   ! Mov Ax, 2           ' Interrupt 33h Service 2„   ! Int &h33„END SUB„„SUB MouseInfo (Button%, Column%, Row%)   ' Gets Mouse Position and Button Status„   Reg %AX, 3„   CALL Interrupt &h33„   Button% = Reg(%BX)         ' 1 = Left, 2 = Right, 3 = Both, 4 = Center„   Column% = Reg(%CX)/8 + 1   ' Remember that it returns in pixels„   Row% = Reg(%DX)/8 + 1„END SUB„„SUB MouseCursor (MColumn%, MRow%)„   Reg %AX, 4„   Reg %CX, MColumn% * 8 - 1„   Reg %DX, MRow% * 8 - 1„   CALL Interrupt &h33„END SUB„„SUB MouseQueue (ButtonInfo%, ButtonPress%, ButtonCol%, ButtonRow%)„   Reg %AX, 5                ' Returns ButtonPress%/Col%/Row% values„   Reg %BX, ButtonInfo%      ' 0 = Left Button, 1 = Right Button, 3 = Center?„   CALL Interrupt &h33„   ButtonPress% = Reg(%BX)   ' # Times button was pressed since last inquiry„   ButtonCol% = Reg(%CX)/8+1 ' Current mouse cursor column„   ButtonRow% = Reg(%DX)/8+1 ' Current mouse cursor row„END SUB„„SUB MouseRelease (ButtonInfo%, ButtonPress%, ButtonCol%, ButtonRow%)„   Reg %AX, 6                ' Returns ButtonPress%/Col%/Row% values„   Reg %BX, ButtonInfo%      ' 0 = Left Button, 1 = Right Button, 3 = Center?„   CALL Interrupt &h33„   ButtonPress% = Reg(%BX)   ' # Times button was released since last inquiry„   ButtonCol% = Reg(%CX)     ' Current mouse cursor column„   ButtonRow% = Reg(%DX)     ' Current mouse cursor row„END SUB„„SUB MouseLimits (LeftCol%, RightCol%, TopRow%, BottomRow%)„   Reg %AX, 7                   ' Horizontal Limits„   Reg %CX, RightCol% * 8 - 1„   Reg %DX, LeftCol% * 8 - 1„   CALL Interrupt &h33„   Reg %AX, 8                   ' Vertical Limits„   Reg %CX, TopRow% * 8 - 1„   Reg %DX, BottomRow% * 8 - 1„   CALL Interrupt &h33„END SUB„„SUB MouseShape (ScrMaskChar%, ScrMaskAttr%, CurMaskChar$, CurMaskAttr%)„   Reg %BX, 0       ' 0 = Set Software Cursor  1 = Set Hardware Cursor„   Reg %CX, (ScrMaskAttr% * 256) + ScrMaskChar%„   Reg %DX, (CurMaskAttr% * 256) + ASC(CurMaskChar$)„   Reg %AX, 10„   CALL Interrupt &h33„END SUB„„SUB CheckBox (Occupied(), Y%, X%, YCor%, XCor%)„   If NOT Occupied(Y%,X%) Then     ' Box is empty„     Locate YCor%, XCor%: Color 15: Print Chr$(Char)„     Occupied(Y%,X%) = %True       ' Make Box occupied„   Else                            ' Box is occupied„     Swap Char, Char2              ' Return to normal cursor state„   End If„END SUB„„SUB PlayTICTACTOE               ' Not exactly, but it's just a DEMO„   DIM Occupied(3,3)            ' Make sure we don't overlap moves„   DIM Grid$(0 to 6)„   „   Grid$(0) = "+---+---+---+"   ' TIC-TAC-TOE Grid„   Grid$(1) = "|   |   |   |"   ' Only for demonstration purposes„   Grid$(2) = "+---+---+---+"   ' Not a functional game„   Grid$(3) = "|   |   |   |"   ' That would require some additional work„   Grid$(4) = "+---+---+---+"„   Grid$(5) = "|   |   |   |"„   Grid$(6) = "+---+---+---+"„   Char  = ASC("X")             ' Put into variables for easy swapping„   Char2 = ASC("O")             ' Change characters if desired„   „   MouseShape 0,0,Chr$(Char),14 ' X goes first„   XCor% = 10                   ' You can modify these values to move the„   YCor% = 6                    ' playing grid around.„   MouseLimits XCor%,XCor%+12,YCor%,YCor%+6   ' Restricts the mouse to playing grid„   MouseCursor XCor%, YCor%„   „   For Y = 0 to 6               ' Draw Playing Grid„     Locate Y+YCor%, XCor%: Print Grid$(Y)„   Next Y„   „   MouseShow„   „   DO„      MouseInfo MouseButton%, MouseCol%, MouseRow% ' Updates mouse information„      MouseQueue 0, Button%, Column%, Row%         ' Does not allow for button hold„      Locate 1,1: Color 7: Print MouseButton%,MouseCol%,MouseRow%„      „    If Button% Then„      InGrid% = %False„      SELECT CASE Row%„         Case YCor% + 1„           InGrid% = %True„           Grid = 1„         Case YCor% + 3„           InGrid = %True„           Grid = 2         „         Case YCor% + 5„           InGrid = %True„           Grid = 3         „         Case Else„           Swap Char, Char2„      END SELECT„   „   If InGrid Then„     SELECT CASE Column%„         Case XCor%+1 to XCor%+3„           CheckBox Occupied(), Grid, 1, Row%, XCor%+2„         Case XCor%+5 to XCor%+7„           CheckBox Occupied(), Grid, 2, Row%, XCor%+6„         Case XCor%+9 to XCor%+11„           CheckBox Occupied(), Grid, 3, Row%, XCor%+10„         Case Else„           Swap Char, Char2„     END SELECT„   End If„   „    Swap Char, Char2               ' X -> O and vice versa„    MouseShape 0,0,Chr$(Char),14   ' Update mouse cursor„    End if„   „  LOOP Until Inkey$<>"" OR MouseButton% = %RightButton„„  MouseLimits 1,80,1,25      ' Restore normal limits„  MouseShape 0,0,Chr$(8),7   ' Restore normal mouse cursor???„END SUB„Mike Wegner                    HAND MOUSE POINTER BITMAP      QBTIPS_?.DOC                   07-04-92 (13:21)       TEXT                   18   897      HANDMOUS.BAS'>Sounds great but how do you use this bitmap for you mouse cursor.„'>I havnt done anything with graphics yet but will be soon.  How„'>would I use a bitmap as my mouse cursor?  Thanks for any info.„'„'Here's the bitmap.  It needs to be read into an array of 32 integers.„'Then you use interrupt &h33, setting the ax register to 9, the bx„'register to 4 and the cx register to 0.  Then set the es register to the„'VARSEG of your array and set the dx register to the VARPTR of your„'array.  Then hit the interrupt and your mouse cursor is loaded.  Presto„'- 1 pointing finger.  Gee, I think mom said something about that once,„'but I can't remember ...  :)„„HandPointing:„DATA &he1ff,&he1ff,&he1ff,&he1ff,&he1ff„DATA &he000,&he000,&he000,0,0,0,0,0,0,0,0„DATA &h0000,&h0c00,&h0c00,&h0c00,&h0c00,&h0c00„DATA &h0db6,&h0db6,&h0db6,&h6ffe,&h6ffe,&h6ffe„DATA &h7ffe,&h7ffe,&h7ffe,&h0000„Egbert Zijlema                 PB MOUSE IMPLEMENTATION        E.Zijlema@uni4nn.iaf.nl        08-14-96 (13:17)       PB                     923  27762    MOUSMENU.BAS' MOUSMENU.BAS    : shows how to implement the mouse in your program„' Author          : Egbert Zijlema (E.Zijlema@uni4nn.iaf.nl)„' (up)Date        : August 14, 1996„' Language        : Power Basic 3.2„' Copyright status: Public Domain„„„' Credit:„' The routines written in assembly (mouse driver calls & SUB Box)„' are from Dave Navarro. They came with Power Basic 3.2„' (MOUSUNIT.BAS & SCRNUNIT.BAS - subdirectory PB32\EXAMPLE).„„' To improve the mouse driver stuff, 3 flags have been added:„' 1. mflg.allow - to be set on start up. Driver present.„' 2. mflg.mouse - driver activated by user (options menu).„' 3. mflg.mseon - (mouse on) to avoid switching on/off the cursor more„'    than once. This is rather crucial, due to the fact that the mouse„'    is counting, not toggling, its on/off status.„„' I also implemented a slight modification in SUB Box, making it„' possible to choose 1 out of 3 rectangles: single frame, double frame,„' no frame (inverse or clean background)„„$COMPILE EXE           ' compile the file if you might want to try„                       ' to exit to DOS (File-menu)„DEFINT A - Z„„%FALSE = 0 : %TRUE = NOT %FALSE„„' equates for arrow keys:„%HOME  = 71 * 256 : %UP  = 72 * 256 : %LEFT = 75 * 256„%RIGHT = 77 * 256 : %END = 79 * 256 : %DOWN = 80 * 256„„' equates for command keys„%TAB   = 9 : %ENTER = 13 : %ESCAPE = 27„„' equates for pulldown menus„%ALTI = 23 * 256                    ' open info menu„%ALTO = 24 * 256                    ' open options menu„%ALTF = 33 * 256                    ' open file menu„%ALTX = 45 * 256                    ' exit program„%F1   = 59 * 256                    ' help screen„„TYPE GENERICFLAGS„  mono AS INTEGER                   ' monochrome card„  menu AS INTEGER                   ' scroll menu„  clok AS INTEGER                   ' time on/off„END TYPE„DIM flag AS SHARED GENERICFLAGS„„TYPE MOUSEFLAGS„  allow AS INTEGER                  ' driver present„  mouse AS INTEGER                  ' driver active„  mseon AS INTEGER                  ' mouse cursor on/off„END TYPE„DIM mflg AS SHARED MOUSEFLAGS„„filemenudata:„  DATA 4, 3„  DATA " *Select      "„  DATA " *Dos         "„  DATA " E*xit  Alt-X "„„infomenudata:„  DATA 11, 3„  DATA " *Help     F1 "„  DATA " *Read Me     "„  DATA " *About       "„„helpdata:„  DATA "HOT KEYS:"„  DATA "F1    : Display this helpscreen"„  DATA "Alt-x : Exit"„  DATA "Alt-f : Open File-menu"„  DATA "Alt-i : Open Info-menu"„  DATA "Alt-o : Open Options-menu"„  DATA ""„  DATA "Esc   : Cancel any operation"„  DATA "Tab   : Toggle yes/no in dialog box"„„aboutdata:„  DATA "MOUSE DEMO"„  DATA "Author: Egbert Zijlema"„  DATA "Status: Public Domain"„„readmedata:„  DATA "MOUSE DIFFICULTIES"„  DATA "Routines concerning the mouse are basically very simple. They are"„  DATA "all done by calling INTERRUPT &H33. Depending of the value passed"„  DATA "through the AX-register, one can test for the presence of the"„  DATA "mouse, show/hide its cursor, define a screen area; and so on."„  DATA ""„  DATA "But unfortunately all those routines don't tell you how to"„  DATA "implement the mouse in your program. How, for instance, do you tell"„  DATA "your software that clicking the word  File  in the menu bar means"„  DATA "the same as pressing Alt-f (to pull down the File menu)?"„  DATA "This demo shows how to manipulate pull down menus and how to select"„  DATA "a file from a list of 30 filenames (out of an array of 60) - either"„  DATA "by the mouse or the arrow keys."„„DIM VideoAddress AS SHARED INTEGER„DIM MainScreen AS SHARED STRING                       ' initial screen„DIM FileName(1 : 60) AS SHARED STRING„„IF (pbvScrnCard AND 1) = 0 THEN„  VideoAddress = &HB800                               ' color card„ELSE„  VideoAddress = &HB000                               ' monochrome„  flag.mono = %TRUE„END IF„„IF MsThere THEN„  mflg.allow = %TRUE                                  ' mouse present„  mflg.mouse = %TRUE                                  ' mouse active„  DIM matrix(1 : 25, 1 : 80) AS SHARED INTEGER        ' screen matrix„END IF„„FUNCTION MsThere AS INTEGER„  ! push DS                 ; save DS for PowerBASIC„  ! xor  AX, AX             ; clear AX„  ! int  &H33               ; call mouse driver„  ! xor  BX, BX             ; clear BX, assume no mouse present„„  ! or   AX, AX             ; does AX = 0?„  ! jz   MsThereDone        ; yes, we're done„  ! dec  BX                 ; no, make it -1„MsThereDone:„  ! mov  FUNCTION, BX       ; put BX in RetVal variable„  ! pop  DS                 ; restore DS„END FUNCTION„„FUNCTION GetMouseOrKey„  STATIC t$                                            ' actual time„  MsStatus oldButn, oldRow, oldCol„  IF oldButn = 1 THEN oldKey = matrix(oldRow, oldCol)  ' avoid repeating„  DO„„    IF t$ <> TIME$ THEN„      t$ = TIME$„      IF flag.mono THEN COLOR 0, 7 ELSE COLOR 15, 7„      LOCATE 1, 72, 0„      IF flag.clok THEN PRINT t$ ELSE PRINT SPACE$(8)„    END IF„„    MsStatus buttons, row, col„„    IF INSTAT THEN„      FUNCTION = CVI( INKEY$ + CHR$(0) )„      EXIT FUNCTION„    ELSEIF (buttons = 1) AND ( matrix(row, col) <> oldKey ) THEN„      FUNCTION = matrix(row, col)„      EXIT FUNCTION„    ELSEIF buttons > 1 THEN                  ' right butn = Escape„      FUNCTION = %ESCAPE„      EXIT FUNCTION„    END IF„„  LOOP UNTIL (oldButn = 1) AND (buttons = 0) ' until releasing left butn„  FUNCTION = %ENTER„END FUNCTION„„SUB WaitForInput„  DO„    MsStatus buttons, dummy, dummy„  LOOP UNTIL LEN(INKEY$) OR buttons„  MsLocate 1, 1„END SUB„„SUB MsCursorOn„  IF mflg.mouse = %FALSE THEN EXIT SUB            ' no mouse, so quit„  IF mflg.mseon = %FALSE THEN                     ' only when mouse is off„    ! push DS                  ; save DS for PowerBASIC„    ! mov  AX, 1               ; mouse driver function 1, turn on cursor„    ! int  &H33                ; call driver„    ! pop  DS                  ; restore DS„    mflg.mseon = %TRUE                            ' mouse cursor on„  END IF„END SUB„„SUB MsCursorOff„  IF mflg.mouse = %FALSE THEN EXIT SUB„  IF mflg.mseon THEN„    ! push DS                  ; save DS for PowerBASIC„    ! mov  AX, 2               ; mouse driver function 2, turn off cursor„    ! int  &H33                ; call driver„    ! pop  DS                  ; restore DS„    mflg.mseon = %FALSE                           ' mouse cursor off„  END IF„END SUB„„SUB MsLocate(BYVAL row AS INTEGER, BYVAL col AS INTEGER)„  IF mflg.mouse = %FALSE THEN EXIT SUB„  IF (pbvScrnMode = 7) OR (pbvScrnMode = 0) THEN„    row = (row - 1) * 8„    col = (col - 1) * 8„  END IF„„  ! push DS                  ; save DS for PowerBASIC„  ! mov  AX, &H04            ; function 04h, set mouse location„  ! mov  CX, col             ; put column in CX„  ! mov  DX, row             ; put row in DX„  ! int  &H33                ; call mouse interrupt„  ! pop  DS                  ; restore DS for PowerBASIC„END SUB„„SUB MsStatus(buttons AS INTEGER, row AS INTEGER, col AS INTEGER)„  IF mflg.mouse = %FALSE THEN EXIT SUB„  ! push DS                  ; save DS for PowerBASIC„  ! mov  AX, &H03            ; function 03h, get mouse status„  ! int  &H33                ; call mouse interrupt„  ! les  DI, buttons         ; point ES:DI to buttons„  ! mov  ES:[DI], BX         ; put active button(s) in variable„  ! les  DI, row             ; point ES:DI to Row„  ! mov  ES:[DI], DX         ; put mouse row in variable„  ! les  DI, col             ; point ES:DI to Column„  ! mov  ES:[DI], CX         ; put mouse column in variable„  ! pop  DS                  ; restore DS for PowerBASIC„„  IF (pbvScrnMode = 7) OR (pbvScrnMode = 0) THEN„    row = (row \ 8) + 1      ' if text mode, then fix coordinates„    col = (col \ 8) + 1„  END IF„END SUB„„SUB MsSetWindow(BYVAL Row  AS INTEGER, BYVAL Col  AS INTEGER, _„                BYVAL Rows AS INTEGER, BYVAL Cols AS INTEGER)„„  IF mflg.mouse = %FALSE THEN EXIT SUB„  Rows = Row + Rows - 1      ' adjust rows to real coordinates„  Cols = Col + Cols - 1      ' adjust cols to real coordinates„„  IF (pbvScrnMode = 7) OR (pbvScrnMode = 0) THEN„    Row  = Row  * 8          ' if text mode, adjust coordinates„    Rows = Rows * 8„    Col  = Col  * 8„    Cols = Cols * 8„  END IF„„  ! push DS                  ; save DS for PowerBASIC„  ! mov  CX, Row             ; put start row in CX„  ! mov  DX, Rows            ; put end row in DX„  ! mov  AX, &H08            ; function 08h, set vertical limit„  ! int  &H33                ; call mouse interrupt„  ! mov  CX, Col             ; put start column in CX„  ! mov  DX, Cols            ; put end column in DX„  ! mov  AX, &H07            ; function 07h, set horizontal limit„  ! int  &H33                ; call mouse interrupt„  ! pop  DS                  ; restore DS for PowerBASIC„END SUB„„SUB Box(BYVAL Row AS INTEGER, BYVAL Col AS INTEGER, BYVAL Rows AS INTEGER, _„        BYVAL Cols AS INTEGER, BYVAL Shape AS INTEGER, BYVAL Attr AS BYTE)„„  ' draw a rectangle„  ' original from Power Basic Inc.„  ' modified by Egbert Zylema (NL)„„  SELECT CASE Shape„„    CASE 1„„      ' draw single rectangle„      TL.Char? = 218            ' ⁄„      TR.Char? = 191            ' ø„      BL.Char? = 192            ' ¿„      BR.Char? = 217            ' Ÿ„      Hor?     = 196            ' ƒ„      Vert?    = 179            ' ≥„„    CASE 2„„      ' draw double rectangle„      TL.Char? = 201            ' …„      TR.Char? = 187            ' ª„      BL.Char? = 200            ' »„      BR.Char? = 188            ' º„      Hor?     = 205            ' Õ„      Vert?    = 186            ' ∫„„    CASE 0„„      ' background without frame„      ' cleans the area when attri is set to zero„      TL.Char? = 32„      TR.Char? = 32„      BL.Char? = 32„      BR.Char? = 32„      Hor?     = 32„      Vert?    = 32„  END SELECT„„  ! push DS                 ; save DS„„  ! mov  AX, VideoAddress   ; put screen segment in AX„  ! mov  ES, AX             ;  and in ES„„  ! mov  AX, Row            ; put row in AX„  ! dec  AX                 ; minus one„  ! mov  CX, 160            ; AX =„  ! mul  CX                 ;   AX * 160„  ! mov  DI, AX             ; put it in DI„  ! mov  AX, Col            ; put column in AX„  ! dec  AX                 ; minus one„  ! shl  AX, 1              ; times 2„  ! add  DI, AX             ; add to DI„„  ! mov  DX, Rows           ; put rows in DX„  ! dec  DX                 ; minus top row„  ! dec  DX                 ; minus bottom row„„  ! mov  CX, Cols           ; put columns in CX„  ! dec  CX                 ; minus left column„  ! dec  CX                 ; minus right column„„  ! mov  AH, Attr           ; put attribute in AH„„  ! push CX                 ; save CX (columns)„  ! push DI                 ;  and DI (screen location)„  ! mov  AL, TL.Char?       ; put top left char in AL„  ! stosw                   ; write it to the screen„  ! mov  AL, Hor?           ; put top char in AL„  ! rep  stosw              ; write it to the screen CX times„  ! mov  AL, TR.Char?       ; put top right char in AL„  ! stosw                   ; write it to the screen„  ! pop  DI                 ; restore DI„  ! pop  CX                 ;  and CX„„HorizLoop:„  ! add  DI, 160            ; move to next row on the screen„  ! push CX                 ; save CX„  ! push DI                 ;  and DI„  ! mov  AL, Vert?          ; put left char in AL„  ! stosw                   ; write it to the screen„  ! mov  AL, 32             ; put a space in AL„  ! rep  stosw              ; write it to the screen CX times„  ! mov  AL, Vert?          ; put right char in AL„  ! stosw                   ; write it to the screen„  ! pop  DI                 ; restore DI„  ! pop  CX                 ;  and CX„  ! dec  DX                 ; one less row„  ! jnz  HorizLoop          ; loop until DX (rows) = 0„„  ! add  DI, 160            ; move to next row on the screen„  ! mov  AL, BL.Char?       ; put bottom left char in AL„  ! stosw                   ; write it to the screen„  ! mov  AL, Hor?           ; put bottom char in AL„  ! rep  stosw              ; write it to the screen CX times„  ! mov  AL, BR.Char?       ; put bottom right char in AL„  ! stosw                   ; write it to the screen„„  ! pop  DS                 ; restore DS for PowerBASIC„END SUB„„SUB repaint(row, col, attri, length)„  start  = (row - 1) * 160 + (col - 1) * 2„  finish = start + (length - 1) * 2„  DEF SEG = VideoAddress„  FOR offset = start TO finish STEP 2„    POKE offset + 1, attri                     ' color offset„  NEXT„  DEF SEG„END SUB„„FUNCTION YesNo(header$)„  MsCursorOff„  IF flag.mono THEN attri = 15 ELSE attri = 63„  question$ = "Are you sure?"„  IF LEN(question$) < LEN(header$) THEN„    length = LEN(header$)„  ELSE„    length = LEN(question$)„  END IF„  col = (80 - length) \ 2„  Box 10, col - 2, 7, length + 4, 2, attri„  Box 13, 33, 3, 13, 1, attri„  COLOR attri MOD 16, attri \ 16„  LOCATE 11, col : PRINT header$„  LOCATE 12, col : PRINT "Are you sure?"„  LOCATE 13, 39  : PRINT CHR$(194)                     ' ¬„  LOCATE 14, 34  : PRINT " Yes ";CHR$(179);" No  "     ' ≥„  LOCATE 15, 39  : PRINT CHR$(193)                     ' ¡„  IF flag.mono THEN„    repaint 14, 36,  7, 3         ' normal white (initials are intense)„    repaint 14, 42,  7, 1„  ELSE„    repaint 14, 35, 62, 1         ' initials yellow on cyane„    repaint 14, 41, 62, 1„  END IF„  DEF SEG = VideoAddress„  YesNoScrn$ = PEEK$(160, 3840)„  DEF SEG„„  init = %TRUE : result = %FALSE„  ERASE matrix„  FOR cell = 34 TO 38„    matrix(14, cell) = ASC("Y")„  NEXT„  FOR cell = 40 TO 44„    matrix(14, cell) = ASC("N")„  NEXT„  MsSetWindow 12, col - 2, 2, length + 2„  DO„    MsCursorOn„    IF init THEN„      init = %FALSE„      KeyIn = %TAB„    ELSE„      KeyIn = GetMouseOrKey„    END IF„    SELECT CASE KeyIn„      CASE ASC("Y"), ASC("y")„        result = %TRUE„        KeyIn = %ENTER„      CASE ASC("N"), ASC("n"), %ESCAPE„        result = %FALSE„        KeyIn = %ENTER„      CASE %TAB„        IF result THEN„          result = %FALSE : offset = 40„        ELSE„          result = %TRUE  : offset = 34„        END IF„    END SELECT„    MsCursorOff„    DEF SEG = VideoAddress„    POKE$ 160, YesNoScrn$„    DEF SEG„    repaint 14, offset, 15, 5„    IF flag.mono THEN„      repaint 14, offset, 112, 5         ' inverse„    ELSE„      repaint 14, offset + 1, 14, 1      ' yellow„    END IF„  LOOP UNTIL KeyIn = %ENTER„  FUNCTION = result„  MainMatrix„END FUNCTION„„' ............... end of library routines ........................„„SUB MainMatrix„  ERASE matrix„  CALL MenuBarMatrix„  row = 3 : col = 4„  FOR count = 1 TO 30                              ' 30 files displayed„    FOR cell = col TO col + 11                     ' length = 12„      matrix(row, cell) = count + 256              ' no ASCII values„    NEXT„    INCR col, 14„    IF col = 74 THEN„      INCR row : col = 4„    END IF„  NEXT„„  FOR cell = 1 TO 80                               ' mouse out of bounds„    matrix(2, cell) = %UP                          ' to simulate up &„    matrix(9, cell) = %DOWN                        ' down arrow„  NEXT„END SUB„„SUB MenuBarMatrix„  FOR cell = 5 TO 8„    matrix(1, cell)     = %ALTF„    matrix(1, cell + 7) = %ALTI„  NEXT„  FOR cell = 19 TO 25„    matrix(1, cell)     = %ALTO„  NEXT„END SUB„„SUB DrawMenuBar„  SHARED bar$„  COLOR 0, 7„  LOCATE 1, 1 : PRINT SPACE$(80);„  LOCATE 1, 5 : PRINT "File   Info   Options"„  IF flag.mono = %FALSE THEN„    repaint 1,  5, 116, 1„    repaint 1, 12, 116, 1„    repaint 1, 19, 116, 1„  END IF„  DEF SEG = VideoAddress„  bar$ = PEEK$(0, 50)„  DEF SEG„END SUB„„SUB DrawMainScreen„  shape = 2                                          ' double frame„  attri = 15                                         ' intense white„  start = 1                                          ' record to start with„  total = 30                                         ' 30 records„  Box 2, 1, 20, 80, shape, attri                     ' draw rectangle„„  CollectFileNames„  DisplayFiles start, total„„  DEF SEG = VideoAddress„  MainScreen = PEEK$(160, 3840)                      ' exclude menubar„  DEF SEG„  COLOR 7,0„  LOCATE 25, 4„  PRINT "Press F1 for help";„END SUB„„SUB CollectFileNames„  FileToFind$ = DIR$("C:\DOS\*.*")„  DO WHILE LEN(FileToFind$)„    INCR count„    FileName(count) = FileToFind$ + SPACE$(12 - LEN(FileToFind$))„    IF count = UBOUND(FileName) THEN EXIT DO         ' don't exceed 60„    FileToFind$ = DIR$„  LOOP„  ARRAY SORT FileName()                              ' alfabetic order„END SUB„„SUB DisplayFiles(start, total)„  COLOR 15, 0„  row = 3 : col = 4„  FOR count = start TO start + total - 1„    LOCATE row, col„    PRINT FileName(count)„    INCR col, 14„    IF col = 74 THEN„      INCR row : col = 4„    END IF„  NEXT„END SUB„„SUB DosEscape„  IF BIT(pbvHost, 5) <> 0 THEN EXIT SUB     ' don't try this in the IDE„  DefaultDir$ = CURDIR$„  DEF SEG = VideoAddress„  OldScreen$ = PEEK$(0, 4000)„  COLOR 7, 0„  CLS„  LOCATE 1, 1„  PRINT "Type EXIT and press ENTER to return..."„  SHELL„„  ' restore drive and directory„  IF LEFT$(CURDIR$, 2) <> LEFT$(DefaultDir$, 2) THEN„    CHDRIVE LEFT$(DefaultDir$, 2)„  END IF„  IF CURDIR$ <> DefaultDir$ THEN CHDIR DefaultDir$„  POKE$ 0, OldScreen$„  DEF SEG„END SUB„„SUB ShowText„  IF flag.mono THEN attri = 112 ELSE attri = 94„  Box 5, 5, 15, 69, 0, attri„  COLOR attri MOD 16, attri \ 16„  RESTORE readmedata„  FOR count = 1 TO 13„    READ me$„    LOCATE count + 5, 6 : PRINT me$„  NEXT„  LOCATE 14, 43 : PRINT CHR$(34)„  LOCATE 14, 48 : PRINT CHR$(34)„  WaitForInput„END SUB„„SUB About„  IF flag.mono THEN attri = 112 ELSE attri = 78„  Box 3, 10, 5, 26, 1, attri„  COLOR attri MOD 16, attri \ 16„  RESTORE aboutdata„  FOR count = 1 TO 3„    READ abt$„    LOCATE count + 3, 12 : PRINT abt$„  NEXT„  WaitForInput„END SUB„„SUB HelpText„  IF flag.mono THEN attri = 112 ELSE attri = 31„  Box 3, 10, 11, 39, 1, attri„  COLOR attri MOD 16, attri \ 16„  RESTORE helpdata„  FOR count = 1 TO 9„    READ help$„    LOCATE count + 3, 12 : PRINT help$„    IF flag.mono = %FALSE AND count > 1 THEN„      repaint count + 3, 12, 30, 5                  ' yellow on blue„    END IF„  NEXT„  WaitForInput„END SUB„„SUB DrawMenu(menu$(), options, column, length, letter$)„  shape = 1„  flag.menu = %TRUE„  IF flag.mono THEN attri = 112 ELSE attri = 127„  rows = UBOUND(menu$) + 2„  cols = LEN(menu$(1)) + 1                          ' + 2 - 1 (asterix)„  MsSetWindow 0, 0, options + 2, 28„  ERASE matrix„  MenuBarMatrix„  MsCursorOff„  repaint 1, column + 1, 12, 1„  repaint 1, column + 2,  7, length - 1„  Box 2, column - 1, rows, cols, shape, attri„  COLOR attri MOD 16, attri \ 16„  FOR count = 1 TO UBOUND(menu$)„    split    = INSTR(menu$(count), "*")„    PartTwo$ = MID$(menu$(count), split + 1)„    letter$  = letter$ + UCASE$(LEFT$( PartTwo$, 1) )„    offset   = column + split - 1„    LOCATE count + 2, column„    PRINT LEFT$(menu$(count), split - 1) + partTwo$„„    IF flag.mono = %FALSE THEN„      repaint count + 2, offset, attri + 4 - attri MOD 16, 1  ' red„    END IF„„    FOR cell = column TO column + cols - 3„      matrix(count + 2, cell) = count + 256„    NEXT„  NEXT„END SUB„„SUB FileMenu(choice)„  RESTORE filemenudata„  READ column, options„  REDIM MenuItem(1 : options) AS LOCAL STRING„  FOR count = 1 TO options„    READ MenuItem(count)„  NEXT„  length = 4„  DrawMenu MenuItem(), options, column, length, letter$„  InRow = 1                                        ' 1 per row„  exclude = %ALTF„  length = LEN( MenuItem(1) ) - 1                  ' minus asterix„  ScrollMenu letter$, options, InRow, column, exclude, length, result„  SELECT CASE result„    CASE 1„      ScreenMenu„    CASE 2„      MsCursorOff„      DosEscape„    CASE 3„      ' return result to main menu to avoid recursion„      choice = %ALTX„    CASE %LEFT, %ALTO„      choice = %ALTO„    CASE %RIGHT, %ALTI„      choice = %ALTI„  END SELECT„END SUB„„SUB InfoMenu(choice)„  RESTORE infomenudata„  READ column, options„  REDIM MenuItem(1 : options) AS LOCAL STRING„  FOR count = 1 TO options„    READ MenuItem(count)„  NEXT„  length = 4„  DrawMenu MenuItem(), options, column, length, letter$„  InRow = 1                                        ' 1 per row„  exclude = %ALTI„  length = LEN( MenuItem(1) ) - 1                  ' minus asterix„  ScrollMenu letter$, options, InRow, column, exclude, length, result„  SELECT CASE result„    CASE 1„      choice = %F1„    CASE 2„      MsCursorOff„      ShowText„    CASE 3„      MsCursorOff„      About„    CASE %RIGHT, %ALTO„      choice = %ALTO„    CASE %LEFT, %ALTF„      choice = %ALTF„  END SELECT„END SUB„„SUB OptionsMenu(choice)„  IF mflg.allow THEN options = 2 ELSE options = 1„  REDIM MenuItem(1 : options) AS LOCAL STRING„„  IF flag.clok THEN extra$ = "ff " ELSE extra$ = "n  "„  MenuItem(1) = " *Time  o" + extra$„  IF options = 2 THEN„    IF mflg.mouse THEN plus$ = "ff " ELSE plus$ = "n  "„    MenuItem(2) = " *Mouse o" + plus$„  END IF„  column = 18„  length = 7„  DrawMenu MenuItem(), options, column, length, letter$„  InRow = 1„  exclude = %ALTO„  length = LEN( MenuItem(1) ) - 1                  ' minus asterix„  ScrollMenu letter$, options, InRow, column, exclude, length, result„  question$ = "Time to be switched off!"„  SELECT CASE result„    CASE 1„      IF flag.clok THEN„        IF YesNo(question$) THEN flag.clok = %FALSE„      ELSE„        flag.clok = %TRUE„      END IF„    CASE 2„      IF mflg.allow = %FALSE THEN EXIT SELECT„      IF mflg.mouse THEN mflg.mouse = %FALSE ELSE mflg.mouse = %TRUE„      MsLocate 1, 1„    CASE %LEFT, %ALTI„      choice = %ALTI„    CASE %RIGHT, %ALTF„      choice = %ALTF„  END SELECT„END SUB„„SUB ScreenMenu„  STATIC FirstChar$„  MainMatrix„  IF FirstChar$ = "" THEN„    FOR count = 1 TO UBOUND(FileName)„      FirstChar$ = FirstChar$ + LEFT$(FileName(count), 1)„    NEXT„  END IF„  options = UBOUND(FileName)„  InRow = 5„  column = 4„  exclude = 0„  length = LEN( FileName(1) )„  MsSetWindow 0, 0, 9, 80„  ScrollMenu FirstChar$, options, InRow, column, exclude, length, result„  MsCursorOff„  COLOR 15, 0„  LOCATE 20, 4 : PRINT "You selected ";„  IF result THEN„    PRINT FileName(result);„    COLOR 7„    LOCATE 25, 4 : PRINT "Press any key or click mouse button";„    WaitForInput„  END IF„END SUB„„SUB ScrollMenu(letter$, options, InRow, column, exclude, length, result)„  SHARED bar$                                   ' see: DrawMenuBar„„  ' LEGEND:„  ' letter$ = marked characters of menu options„  ' options = number of array elements„  ' InRow   = elements per row„  ' column  = first column„  ' exclude = value of the key that opened the menu„  ' length  = length of each element„„  first = 1                                     ' first element main screen„  IF flag.menu THEN                             ' menu scrolling„    total   = options                           ' all options on screen„    between = 0                                 ' no spaces„  ELSE                                          ' screen scrolling„    init = %TRUE„    total   = 30                                ' 30 filenames„    between = 2                                 ' 2 spaces in between„  END IF„„  DEF SEG = VideoAddress„    MenuScrn$ = PEEK$(160, 3840)                ' initial screen„  DEF SEG„  MsCursorOn„„  DO„    IF init THEN„      init = %FALSE„      action = %RIGHT„    ELSE„      action = GetMouseOrKey„    END IF„    SELECT CASE action„      CASE %ESCAPE„        result = 0„        EXIT DO„      CASE 65 TO 90, 97 TO 122„        match = INSTR( letter$, UCASE$(CHR$(action)) )„        IF match THEN„          result = match„          IF flag.menu THEN EXIT DO„        END IF„      CASE %LEFT, %RIGHT„        IF flag.menu THEN„          result = action„          EXIT DO„        ELSE„          CALL LeftRight(action, result, options)„        END IF„      CASE %UP, %DOWN„        MsStatus buttons, row, col„        UpDown action, row, InRow, options, result, cursor„        IF (buttons = 1) AND (cursor > 2) THEN MsLocate cursor, col„      CASE %HOME, %END„        IF action = %HOME THEN result = 1 ELSE result = options„      CASE 257 TO total + 256„        result = action + first - 257„      CASE %ALTF, %ALTI, %ALTO„        IF flag.menu = %FALSE THEN EXIT SELECT„        IF action = exclude THEN result = 0 ELSE result = action„        IF result THEN EXIT DO„    END SELECT„    MsCursorOff„„    ' do we need to refresh the main screen?„    IF flag.menu = %FALSE THEN„      IF refresh(result, first, total, InRow) THEN„        DisplayFiles first, total„        DEF SEG = VideoAddress„        MenuScrn$ = PEEK$(160, 3840)„        DEF SEG„      END IF„    END IF„„    DEF SEG = VideoAddress„    POKE$ 160, MenuScrn$„    DEF SEG„„    IF result THEN„      row = (result - first) \ InRow : INCR row, 3„      col = ( (result - first) MOD InRow ) * (length + between)„      INCR col, column„      IF flag.menu THEN attri = 7 ELSE attri = 112„      repaint row, col, attri, length„    END IF„    MsCursorOn„  LOOP UNTIL action = %ENTER„  MsCursorOff„  IF flag.menu THEN„    DEF SEG = VideoAddress„    POKE$ 0, bar$„    POKE$ 160, MainScreen„    DEF SEG„    flag.menu = %FALSE„  END IF„END SUB„„SUB LeftRight(action, result, options)„  SELECT CASE action„    CASE %LEFT  : IF result > 1 THEN DECR result„    CASE %RIGHT : IF result < options THEN INCR result„  END SELECT„END SUB„„SUB UpDown(action, row, InRow, options, result, cursor)„  old = result„  SELECT CASE action„    CASE %UP„      DECR result, InRow„      cursor = row + 1„    CASE %DOWN„      INCR result, InRow„      cursor = row - 1„  END SELECT„  SELECT CASE result„    CASE < 1„      IF flag.menu THEN result = options ELSE result = old„    CASE > options„      IF flag.menu THEN result = 1 ELSE result = old„  END SELECT„END SUB„„FUNCTION refresh(result, first, total, InRow)„  SELECT CASE result„    CASE 0„      FUNCTION = %FALSE„      EXIT FUNCTION„    CASE => first + total„      DO WHILE result => first + total„        INCR first, InRow„      LOOP„      FUNCTION = %TRUE„    CASE < first„      DO WHILE result < first„        DECR first, InRow„      LOOP„      FUNCTION = %TRUE„    CASE ELSE„      FUNCTION = %FALSE„  END SELECT„END FUNCTION„„SUB MainMenu„  DO„    IF choice THEN„      KeyIn = choice„      choice = 0„    ELSE„      KeyIn = GetMouseOrKey„    END IF„    SELECT CASE KeyIn„      CASE %ALTX„        IF YesNo("Quitting demo") THEN„          MsCursorOff„          COLOR 7, 0„          CLS„          SYSTEM„        END IF„      CASE %F1   : Helptext„      CASE %ALTI : InfoMenu choice„      CASE %ALTF : FileMenu choice„      CASE %ALTO : OptionsMenu choice„    END SELECT„    MsCursorOff„    DEF SEG = VideoAddress„    POKE$ 160, MainScreen„    DEF SEG„    MsSetWindow 0, 0, 25, 80„    MsCursorOn„  LOOP„END SUB„„' sample main„CLS„  flag.clok = %TRUE         ' time on„  DrawMenuBar„  DrawMainScreen„  MainMatrix„  MsLocate 1, 1„  MsCursorOn„  MainMenu„END„Egbert Zijlema                 MOUSE ROUTINES W/DOUBLE CLICK  zylema@bnc.nl                  09-03-96 (23:10)       PB                     400  11082    MOUS.BAS    ' MOUS.BAS        - mouse routines, new version with double click„'                   (revision of MOUSDEMO.BAS)„' Author          : Egbert Zijlema (E.Zijlema@uni4nn.iaf.nl)„' (up)Date        : September 3, 1996„' Language        : Power Basic 3.2„' Copyright status: Public Domain„„' Again?„' Yes, again a mouse routine from this author for a couple of reasons.„' A few minor bug fixes, to begin with.„„' The most important reason for this revision, however, is a new„' key/mouse trap: ScrollMouse. It now contains 2 different mouse„' performances: the classical one to support pull down menus and„' another one to doubleclick an item.„„' In this revision I left a lot of things out, just to keep it as„' simple as possible. For instance: the menu does not support„' highlighted characters and contains only 2 working options.„' Furthermore: I left the Power Basic mouse library out and replaced„' it by plain BASIC INTERRUPT calls; only their names are identical.„' Registered PB-users may re-replace them by the faster assembly„' code that came with version 3.2 (subdirectory EXAMPLE\MOUSUNIT.BAS).„' In that case: DO NOT FORGET to implement the mouseflag tests in those„' procedures. They are not in the original set. I suggested Dave Navarro„' already to include them, in one way or another, within the following„' PB-release.„„' ScrollMouse - method 1:„' When clicking in the menu bar the selected menu pops down. The normal„' way here is to hold the left button until you confirm your selection by„' releasing it.„„' ScrollMouse - method 2:„' After you've selected "Select files" in the File menu you can„' select 1 of the filenames by doubleclicking it. The doubleclick must„' be performed within half a second, otherwise the result will be„' zero, in order to wait for a following doubleclick.„' You can always escape by pressing the Esc-key or the right mouse button.„„DEFINT A - Z„„%NO      =        0 : %YES    = NOT %NO              ' true or false„%ALTF    = 33 * 256 : %ALTX   = 45 * 256„%HOME    = 71 * 256 : %UP     = 72 * 256„%DOWN    = 80 * 256 : %ENDKEY = 79 * 256„%ENTER   = 13       : %ESCAPE = 27„%MOUSEDRIVER = &H33 : %AX = 1 : %BX = 2 : %CX = 3 : %DX = 4„„TYPE MOUSEFLAGS„  mseon AS INTEGER                             ' cursor on„  mouse AS INTEGER                             ' mouse is there„  menu AS BYTE                                 ' matrix rowcounter„END TYPE„DIM mflg AS SHARED MOUSEFLAGS„„DIM MainScreen AS SHARED STRING                ' original screen„DIM FileName(1 : 60) AS SHARED STRING          ' array of 60 elements„DIM matrix(1 : 50, 1 : 80) AS SHARED INTEGER   ' 2 * 25 rows - 80 cols„„' NOTE: a text screen has 25 rows, indeed!„' BUT : the matrices of the menu(s) and the mainscreen„'       overlap. Therefore we reserve 'rows' 26 through 50„'       for the menu, which is a much better way than„'       swapping them after every menu/main screen switch.„„SUB MousInit„  temp = MsThere(buts)„  COLOR 15, 0„  LOCATE 25, 2„  IF temp THEN„    PRINT "Your mouse has ";LTRIM$(RTRIM$(STR$(buts))); " buttons";„    mflg.mouse = %YES„  ELSE„    PRINT "Mouse driver not available";„  END IF„END SUB„„FUNCTION MsThere(buts AS INTEGER) AS INTEGER„  REG %AX, 0„  CALL INTERRUPT %MOUSEDRIVER„  buts = REG(%BX)„  FUNCTION = REG(%AX)„END FUNCTION„„SUB MsCursorOn„  IF mflg.mouse = 0 THEN EXIT SUB            ' no mouse, so quit„  IF mflg.mseon = 0 THEN                     ' only when mouse is off„    REG %AX, 1„    CALL INTERRUPT %MOUSEDRIVER„    mflg.mseon = %YES                        ' mouse cursor on„  END IF„END SUB„„SUB MsCursorOff„  IF mflg.mouse = 0 THEN EXIT SUB„  IF mflg.mseon THEN„    REG %AX, 2„    CALL INTERRUPT %MOUSEDRIVER„    mflg.mseon = 0                           ' mouse cursor off„  END IF„END SUB„„SUB MsLocate(BYVAL row AS INTEGER, BYVAL col AS INTEGER)„  IF mflg.mouse = 0 THEN EXIT SUB„  IF (pbvScrnMode = 7) OR (pbvScrnMode = 0) THEN„    row = (row - 1) * 8„    col = (col - 1) * 8„  END IF„  REG %AX, 4„  REG %CX, col„  REG %DX, row„  CALL INTERRUPT %MOUSEDRIVER„END SUB„„SUB MsStatus(buttons AS INTEGER, row AS INTEGER, col AS INTEGER)„  IF mflg.mouse = 0 THEN EXIT SUB„  REG %AX, 3„  CALL INTERRUPT %MOUSEDRIVER„  buttons = REG(%BX)„  row = REG(%DX)„  col = REG(%CX)„  IF (pbvScrnMode = 7) OR (pbvScrnMode = 0) THEN„    row = (row \ 8) + 1„    col = (col \ 8) + 1„  END IF„END SUB„„SUB MsSetWindow(BYVAL row  AS INTEGER, BYVAL col  AS INTEGER, _„                BYVAL rows AS INTEGER, BYVAL cols AS INTEGER)„„  IF mflg.mouse = 0 THEN EXIT SUB„  rows = row + rows - 1      ' adjust rows to real coordinates„  cols = col + cols - 1      ' adjust cols to real coordinates„„  IF (pbvScrnMode = 7) OR (pbvScrnMode = 0) THEN„    row  = row * 8 - 1 : rows = rows * 8 - 1   ' adjust for PB„    col  = col * 8 - 1 : cols = cols * 8 - 1   ' adjust for PB„  END IF„  REG %AX, 7„  REG %CX, col„  REG %DX, cols„  CALL INTERRUPT %MOUSEDRIVER„  REG %AX, 8„  REG %CX, row„  REG %DX, rows„  CALL INTERRUPT %MOUSEDRIVER„END SUB„„SUB box(row, col, rows, cols, fore, back)„  ' draw single rectangle„  toprow$ = CHR$(218) + STRING$(cols - 2, 196) + CHR$(191)  ' ⁄ƒƒø„  botrow$ = CHR$(192) + STRING$(cols - 2, 196) + CHR$(217)  ' ¿ƒƒŸ„  vert$ = CHR$(179)                                         ' ≥„„  COLOR fore, back„  LOCATE row, col: PRINT toprow$;„  FOR count = row + 1 TO row + rows - 2„    LOCATE count, col„    PRINT vert$; SPACE$(cols - 2); vert$;„  NEXT„  LOCATE count, col: PRINT botrow$„END SUB„„SUB MenuMatrices„  ' reserve rows 3 throug 12 (28-37 in the matrix) for pop down menus„  ' this is enough if your menus contain no more than 10 options„  mflg.menu = 25„  FOR row = 3 TO 12„    FOR cell = 1 TO 80„      matrix(row + mflg.menu, cell) = row - 2  + 256     ' no ascii!„    NEXT„  NEXT„  mflg.menu = 0„END SUB„„SUB DrawMenuBar„  mflg.menu = 25„  COLOR 0, 7„  LOCATE 1, 1 : PRINT SPACE$(80);„  LOCATE 1, 5 : PRINT "ile"„  COLOR 15, 7„  LOCATE 1, 4 : PRINT "F"„  FOR cell = 4 TO 7„    matrix(1, cell) = %ALTF„    matrix(1 + mflg.menu, cell) = %ALTF„  NEXT„  mflg.menu = 0„END SUB„„SUB FileMenu(choice)„  STATIC last„  REDIM MenuItem (1: 4) AS LOCAL STRING„  mflg.menu = 25„  exclude = %ALTF„  options = 4„  column = 3„  MenuItem(1) = " Select files  "„  MenuItem(2) = " Not supported "„  MenuItem(3) = " Bla bla       "„  MenuItem(4) = " Exit          "„  MsCursorOff„  box 2, column - 1, options + 2, LEN(MenuItem(1)) + 2, 15, 7„  FOR row = 3 TO 6„    LOCATE row, 3 : PRINT MenuItem(row - 2)„  NEXT„  ScrollMenu last, MenuItem(), column, options, exclude, result„  last = result„  SELECT CASE result„    CASE 1„      mflg.menu = 0„      SelectFiles„    CASE 4 : choice = %ALTX„  END SELECT„END SUB„„FUNCTION ScrollMouse AS INTEGER„  MsStatus oldButn, oldRow, oldCol„  IF oldButn = 1 THEN                            ' test status to avoid„                                                 ' repeat (causes flicker)„    oldKey = matrix(oldRow + mflg.menu, oldCol)„  END IF„  DO„    MsStatus buttons, row, col„    IF INSTAT THEN„      FUNCTION = CVI( INKEY$ + CHR$(0) )„      EXIT FUNCTION„    ELSEIF buttons = 1 AND matrix(row + mflg.menu, col) <> oldKey THEN„      FUNCTION = matrix(row + mflg.menu, col)„      EXIT FUNCTION„    ELSEIF buttons = 2 THEN                      ' right button = escape„      ReleaseButtons„      FUNCTION = %ESCAPE„      EXIT FUNCTION„    END IF„  LOOP UNTIL (oldButn = 1) AND (buttons = 0)     ' until release„  IF mflg.menu = 0 THEN                          ' perform doubleclick„    start# = TIMER„    DO„      MsStatus buttons, dummy, dummy„      now# = TIMER„      IF now# - start# > .5 THEN„        FUNCTION = 0„        EXIT FUNCTION„      END IF„    LOOP UNTIL buttons = 1„    ReleaseButtons„  END IF„  FUNCTION = %ENTER„END FUNCTION„„SUB ReleaseButtons„  DO„    MsStatus buttons, dummy, dummy„  LOOP UNTIL buttons = 0„END SUB„„SUB ReadAndDisplayFiles„  temp$ = DIR$("\DOS\*.*")„  DO WHILE LEN(temp$)„    INCR count„    hwmany = count„    FileName(count) = LEFT$(temp$ + SPACE$(12), 12)„    IF count = UBOUND(FileName) THEN          ' if there are more than 60„      EXIT DO„    ELSE„      temp$ = DIR$„    END IF„  LOOP„  ARRAY SORT FileName()„  COLOR 15, 0„  FOR count = 1 TO 20„    IF count > hwmany THEN EXIT SUB„    LOCATE count + 2, 2 : PRINT FileName(count);„    FOR cell = 2 TO 13                        ' len(filename) = 12„      matrix (count + 2, cell) = count + 256  ' no ascii„    NEXT„  NEXT„END SUB„„SUB SelectFiles„  column = 2„  options = 20„  ScrollMenu 0, FileName(), column, options, %ALTF, result„  MsCursorOff„  IF result = 0 THEN EXIT SUB„  COLOR 7, 0„  LOCATE 25, 1„  PRINT "You selected: ";FileName(result);„  DO„  LOOP UNTIL LEN(INKEY$)„  RestoreMain„END SUB„„SUB RestoreMain„  DEF SEG = &HB800„  POKE$ 160, MainScreen„  DEF SEG„END SUB„„SUB ScrollMenu(last, item$(), column, options, exclude, result)„  IF mflg.menu THEN„    result = last - 1„    IF result <= 0 THEN„      result = 0„      MsLocate 3, 5„    ELSE„      MsLocate result + 2, 5„    END IF„    MsRow = 1 : plus = 2„  ELSE„    MsLocate 3, 5„    MsRow = 3 : plus = 0„  END IF„„  DEF SEG = &HB800                         ' assume color card„  MenuScreen$ = PEEK$(160, 3840)„  DEF SEG„  MsSetWindow MsRow, column - 1, options + plus, LEN(item$(1))„  init = %YES„  DO„    MsCursorOn„    IF init AND mflg.menu THEN„      init = %NO„      KeyIn = %DOWN„    ELSE„      KeyIn = ScrollMouse„    END IF„„    SELECT CASE KeyIn„      CASE %UP„        DECR result„        IF result < 1 THEN result = options„      CASE %DOWN„        INCR result„        IF result > options THEN result = 1„      CASE %HOME„        result = 1„      CASE %ENDKEY„        result = options„      CASE %ESCAPE„        result = 0„        EXIT DO„      CASE exclude„        result = 0„      CASE 257 TO 276„        ' mouse only!„        result = KeyIn - 256„    END SELECT„    IF result THEN„      MsCursorOff„      DEF SEG = &HB800„      POKE$ 160, MenuScreen$„      DEF SEG„      IF mflg.menu THEN COLOR 7,0 ELSE COLOR 0, 7„      LOCATE result + 2, column„      PRINT item$(result)„    END IF„  LOOP UNTIL KeyIn = %ENTER AND result          ' safety first„  MsCursorOff„  RestoreMain„END SUB„„SUB MainMenu„  DO„„    IF choice THEN„      KeyIn = choice„      choice = 0„    ELSE„      KeyIn = ScrollMouse„    END IF„„    ' modified = %NO„    SELECT CASE KeyIn„      CASE %ALTX„        MsCursorOff„        COLOR 7, 0„        CLS„        SYSTEM„      CASE %ALTF„        FileMenu choice„    END SELECT„    MsCursorOn„    MsSetWindow 1, 1, 25, 80„  LOOP„END SUB„„CLS„  MenuMatrices„  DrawMenuBar„  ReadAndDisplayFiles„  DEF SEG = &HB800„  MainScreen = PEEK$(160, 3840)„  DEF SEG„  MousInit„  MsLocate 1, 1„  MsCursorOn„  MainMenu„END„