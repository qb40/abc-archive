Rick Clark                     Commands For ATOM VM           rickclark58@yahoo.com          06-14-03 (  :  )       ATOM                   91   2315     AtomCmds.txtATOM COMMANDS - Rick Clark „rickclark58@yahoo.com „„„Atom is a register based virtual machine consisting of 32 registers of each data type, (Long) Integers, (double) Floats and Strings. I came up with my own programming language called Atom Assembler that can be used to write programs for Atom. It is still in development, but I am pretty close to releasing a beginning version of the VM. It is still missing a lot of stuff, but is useable in its present state. „ „Here is a list of current commands that have been implemented. I am working on adding transcendental functions (sin, cos). You'll notice things like saving the current frame, file I/O and such haven't been added yet. I am still working out issues on these and won't be in the first beta version. „ „„Atom Commands „------------- „T = any register „N = numeric register „S = string register „I = Integer register „F = Float register „[] = optional „| = will accept either type of parameter „ „Comments start with # to end of line „ „Screen  „------- „cls: „print: Tx | "string"[;] „screen: Iz, Iy | number, Ix | number „locate: Ix | number, Iy | number, [0] „color: Ifg | number, Ibg | number „panel: Ix1 | number, Iy1 | number, Ix2 | number, Iy2 | number, Ifg | number, Ibg | number, Icd | number, 1|0 „input: Tx, [Sx | string] „ „Data  „----- „set: Tx, Ty „add: Nx, Ny, Nz „sub: Nx, Ny, Nz „mul: Nx, Ny, Nz „div: Nx, Ny, Nz „mod: Nx, Ny, Nz „pow: Nx, Ny, Nz „inc: Nx, number | Ny „dec: Nx, number | Ny „tonumber: Nx, Sy | string „sqrt: Fx, Ny | number „ „String „------ „concat: Sx, Sy „tostring: Sx, Ny „substr: Sx, Sy, start, length „len: Ix, Sy „rev: Sx, Sy „instr: Ix, Sx, Sy „right: Sx, Sy, length „left: Sx, Sy, length „ „Logical „------- „eq: Tx, Ty, LABEL_True, LABEL_False „ne: Tx, Ty, LABEL_True, LABEL_False „lt: Tx, Ty, LABEL_True, LABEL_False „gt: Tx, Ty, LABEL_True, LABEL_False „le: Tx, Ty, LABEL_True, LABEL_False „ge: Tx, Yy, LABEL_True, LABEL_False „ „Flow Control „------------ „label@ Jump label „goto: LABEL „branch: Nx | (number|-number) „gosub: LABEL - Return: „end: „ „Date-Time „--------- „date: Sx „time: Sx „hour: Sx „min: Sx „sec: Sx „ampm: Sx „year: Sx „month: Sx „day: Sx „dayname: Sx „weekday: Sx „yearday: Sx „week: Sx „ „ „„Rick Clark                     Fibonacci Numbers in ATOM      rickclark58@yahoo.com          06-14-03 (  :  )       ATOM                   19   507      Fibonaci.txt# Some simple code to print some Fibonacci numbers „# Leon Brocard <acme@astray.com> (Parrot) „# Modified for Atom by Richard Clark „ „      cls: „      print:   "The first 20 fibonacci numbers are:" „      set:     I1, 0 „      set:     I2, 20 „      set:     I3, 1 „      set:     I4, 1  „REDO@ eq: I1, I2, DONE, NEXT „NEXT@ set:     I5, I4  „      add:     I4, I3, I4 „      set:     I3, I5  „      print:   I3 „      inc:     I1 „      goto:  REDO  „DONE@ print: "Done!" „      end: „Rick Clark                     Calculating Pi                 rickclark58@yahoo.com          06-14-03 (  :  )       ATOM                   35   1037     Pi.txt      „# This code uses Gregory's series „# (pi/4 = 1-1/3+1/5-1/7+...) „# to calculate the value of Pi. „ „        cls: „        print:  "3.14159265358979323846" „        set:    I1, 1       # denominator „        set:    I2, 1000    # update counter „        set:    I3, 1       # sign „        set:    I4, 1       # const, numerator „        set:    I5, -1      # const, used to flip sign „        set:    I6, 4       # const, pi multiplier „        set:    I7, 0       # const „        set:    F1, 0       # sum „        set:    F2, 0       # temp „        # sum = sum + sign * 1 / denominator „AGAIN@  div:    F2, I4, I1 „        mul:    F2, I3, F2 „        add:    F1, F2, F1 „        # flip sign „        mul:    I3, I5, I3 „        # must skip even values „        inc:    I1, 2 „        dec:    I2 „        eq:     I2, I7, UPDATE, AGAIN „UPDATE@ set:    I2, 1000 „        # calc and print current sum „        mul:    F2, I6, F1 „        locate: 2, 1 „        print:  F2 „        goto:   AGAIN „ „ „„Michael Webster                Calculating Pi                 mfwebster@pdq.net              06-14-03 (  :  )       ATOM                   35   1037     Pi.txt      „# This code uses Gregory's series „# (pi/4 = 1-1/3+1/5-1/7+...) „# to calculate the value of Pi. „ „        cls: „        print:  "3.14159265358979323846" „        set:    I1, 1       # denominator „        set:    I2, 1000    # update counter „        set:    I3, 1       # sign „        set:    I4, 1       # const, numerator „        set:    I5, -1      # const, used to flip sign „        set:    I6, 4       # const, pi multiplier „        set:    I7, 0       # const „        set:    F1, 0       # sum „        set:    F2, 0       # temp „        # sum = sum + sign * 1 / denominator „AGAIN@  div:    F2, I4, I1 „        mul:    F2, I3, F2 „        add:    F1, F2, F1 „        # flip sign „        mul:    I3, I5, I3 „        # must skip even values „        inc:    I1, 2 „        dec:    I2 „        eq:     I2, I7, UPDATE, AGAIN „UPDATE@ set:    I2, 1000 „        # calc and print current sum „        mul:    F2, I6, F1 „        locate: 2, 1 „        print:  F2 „        goto:   AGAIN „ „ „„