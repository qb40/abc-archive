David Williams                 How Random Are You?            david.williams@ablelink.org    06-16-02 (  :  )       Qbasic,QB,PDS          147  3200     keypred.bas ' KEYPRED.BAS „' Keypress predictor, David Williams, 2002 Jun 05 „' david.williams@ablelink.org „  „' Program invites user to press keys at random, and spots „' patterns in his guesses so as to make predictions. „' Useless, but fun! „  „DECLARE FUNCTION Key$ (U$) „DECLARE SUB PutOut (U$) „  „DEFLNG A-Z „  „WIDTH 80, 50 „  „CLS „  „DIM SHARED P% ' printer flag „  „PRINT "Look back how many strokes (1 - 5) (Try 3 first!)?"; „  „K% = VAL(Key$("12345")) „  „PRINT K% „PRINT „  „PRINT "Output to printer (y/n)? "; „  „P% = (Key$("YN") = "Y") „  „IF P% THEN „  PRINT "Y" „  PRINT „  PRINT "Ensure printer is ready, then press <Enter>" „  X$ = Key$(CHR$(13)) „END IF „  „S% = 2 ^ (K% - 1) „T% = S% + S% - 1 „DIM A!(0 TO T%)' array holds results from like sequences „  „FOR X% = 0 TO T% „  A!(X%) = 0 „NEXT „  „Q% = 0   ' summary of previous K% keypresses „F! = .7  ' old-keys decline factor „G! = 1 - F! „CP = 0   ' prediction counter „CC = 0   ' correct prediction counter „CK = 0   ' keypress counter „  „CLS „PRINT "Press 'Z' and '/' keys repeatedly, in what feels like a" „PRINT "random sequence. The program will spot your patterns, and" „PRINT "make predictions. If you wish, look away from the screen so" „PRINT "your keypresses will not be influenced by the predictions." „PRINT „PRINT "When you wish to finish, press 'Q'. A summary will be printed." „PRINT "The random expectation of correct predictions is 50%." „PRINT "The program will do a lot better than that!" „PRINT „PRINT "In the screen/printer display, each pair of characters shows a" „PRINT "prediction and the key that is actually pressed. (A dash in" „PRINT "the first position shows that no prediction has been made.)" „PRINT „PRINT "The final 'Q' keypress, and any prediction that may have been" „PRINT "made immediately before it, are not included in totals." „PRINT „PRINT "Start now." „PRINT „  „DO „  „  IF ABS(A!(Q%)) > .8 THEN „    IF A!(Q%) > 0 THEN „      PutOut "Z" „    ELSE „      PutOut "/" „    END IF „    FF% = 1 „  ELSE „    PutOut "-" „    FF% = 0 „  END IF „  „  K$ = Key$("Z/Q") „  „  PutOut K$ + " " „  IF POS(0) > 75 THEN PutOut "" „  „  SELECT CASE K$ „    CASE "Z" „      N! = G! „      Z% = S% „    CASE "/" „      N! = -G! „      Z% = 0 „    CASE ELSE „      EXIT DO „  END SELECT „  „  CK = CK + 1 „  „  IF FF% THEN „    CP = CP + 1 „    IF SGN(N!) = SGN(A!(Q%)) THEN CC = CC + 1 „  END IF „  „  IF CK > K% THEN A!(Q%) = F! * A!(Q%) + N! „  „  Q% = Z% OR Q% \ 2 „  „LOOP „  „IF POS(0) > 1 THEN PutOut "" „  „PutOut "" „  „PutOut "Keypresses:" + STR$(CK) „PutOut ". Predictions:" + STR$(CP) „PutOut ". Correct:" + STR$(CC) „IF CP THEN PutOut ". Percent correct:" + STR$(CINT(CC / CP * 100)) „PutOut "" „  „IF P% THEN LPRINT CHR$(12); ' form feed to eject paper „  „END „  „FUNCTION Key$ (U$) „  DO WHILE INKEY$ <> "" „  LOOP „  DO „    K$ = UCASE$(INPUT$(1)) „  LOOP UNTIL INSTR(U$, K$) „  Key$ = K$ „END FUNCTION „  „SUB PutOut (S$) „  IF LEN(S$) THEN „    PRINT S$; „    IF P% THEN LPRINT S$; „  ELSE „    PRINT „    IF P% THEN LPRINT „  END IF „END SUB „David Williams                 Print a Sundial                david.williams@ablelink.org    06-16-02 (  :  )       Qbasic,QB, PDS         321  8992     sundial.bas ' SUNDIAL.BAS.  David Williams. 2002 „' david.williams@ablelink.org „  „DECLARE SUB Lcopy11 () „DECLARE SUB KeyPause () „DECLARE SUB Choice (N%, C%, L$) „  „CLS „DEFDBL A-Z „PRINT "This program designs a horizontal sundial, for use at any" „PRINT "location. Three diagrams are produced. The first is the" „PRINT "horizontal plate, showing the hour lines. This should be" „PRINT "mounted so the north-south line shown on the design is aligned" „PRINT "true north-south, pointing away from the nearer pole (so the" „PRINT "line should point southward in the northern hemisphere)." „PRINT „PRINT "The second diagram is a template for the sundial's gnomon." „PRINT "This should be mounted in a north-south vertical plane, in a" „PRINT "line with the north-south line on the horizontal plate. The" „PRINT "left end of the base of the gnomon should be at the point" „PRINT "where all the hour-lines intersect. The sloping edge of the" „PRINT "gnomon will be pointing at the nearer celestial pole, i.e. at" „PRINT "the Pole Star in the northern hemisphere." „PRINT „PRINT "The third diagram is produced only if you have selected that" „PRINT "the dial show clock time. It is a graph that shows the number" „PRINT "of minutes that must be added to the dial reading to make it" „PRINT "agree with a clock." „PRINT „PRINT "When the program pauses at any point (such as right now)," „PRINT "press any key to continue." „CALL KeyPause „CLS „PRINT "You can select whether to have the diagrams appear only on the" „PRINT "screen, or if they should also be printed by an Epson-type" „PRINT "printer, and/or saved to disk for later printing by some other" „PRINT "utility. If you select to save them to disk, you will be asked" „PRINT "for a filename. Suppose you select FNAME. The three files on" „PRINT "disk will be named FNAME.DG1, FNAME.DG2 and FNAME.DG3. The" „PRINT "files are BSAVEd from screen memory. The first seven bytes of" „PRINT "each file contain addresses, etc.. The rest is a string of" „PRINT "bytes that are the bytes in memory representing the SCREEN 11" „PRINT "image." „CALL KeyPause „CLS „PRINT "Should the dial show <c>lock or local <s>olar time? "; „DO „  K$ = LCASE$(INKEY$) „LOOP UNTIL K$ = "c" OR K$ = "s" „PRINT K$ „PRINT „PI = 4 * ATN(1) „PI2 = PI / 2 „DR = PI / 180 „RH = PI / 12 „PRINT "Use negative numbers for directions opposite from those shown." „INPUT "Latitude (deg. N)"; LT „IF K$ = "c" THEN „  INPUT "Longitude (deg. E)"; LG „  INPUT "Time Zone Offset (hours ahead of GMT)"; TZ „  A0 = TZ * RH - DR * LG „ELSE „  A0 = 0 „END IF „ST = SIN(DR * LT) „C% = 0 „PRINT „PRINT "Should the dial be printed on Epson-type printer? (y/n) "; „DO „  P$ = LCASE$(INKEY$) „LOOP UNTIL P$ = "y" OR P$ = "n" „PRINT P$ „IF P$ = "y" THEN „  C% = 1 „  BEEP „  PRINT "Ensure printer is ready, then press any key." „  CALL KeyPause „END IF „PRINT „PRINT "Should screens be saved to disk, for later printing? (y/n) "; „DO „  D$ = LCASE$(INKEY$) „LOOP UNTIL D$ = "y" OR D$ = "n" „PRINT D$ „IF D$ = "y" THEN „  DO „    PRINT „    INPUT "Filename (8 chars max, no suffix)"; F$ „    IF LEN(F$) > 0 AND LEN(F$) < 9 AND INSTR(F$, ".") = 0 THEN „      EXIT DO „    ELSE „      BEEP „      PRINT „      PRINT "Illegal entry!" „    END IF „  LOOP „  C% = C% OR 2 „END IF „' draw horizontal sundial plate „SCREEN 11 „CLS „IF K$ = "c" THEN „  NH% = 12 + TZ - LG / 15 „ELSE „  NH% = 12 „END IF „FOR X% = NH% - 7 TO NH% + 7 „  A = RH * (X% - 12) - A0 „  Q% = SGN(A * LT) „  D = ABS(A) - PI2 „  IF ABS(D) < .0000000001# THEN „     AZ = PI2 * Q% „  ELSE „     AZ = ATN(ST * TAN(A)) „     IF D > 0 THEN AZ = AZ + PI * Q% „  END IF „  ' AZ is direction of hour-line in radians clockwise from pole „  SZ = SIN(AZ) / 2 „  CA = AZ + ATN(SZ / SQR(1 - SZ * SZ)) „  ' CA is direction from centre of dial to end of hour line „  CS = SIN(CA) „  CC = COS(CA) „  LOCATE 15.2 - 13.5 * CC, 40.5 + 27.5 * CS „  PRINT MID$(STR$(X% + 12 * (X% > 12)), 2); „  LINE (320, 340)-(320 + 200 * CS, 240 - 200 * CC) „NEXT „CIRCLE (320, 240), 200 „CIRCLE (320, 240), 239 „LINE (320, 340)-(320, 479) „LOCATE 26, 39 „PRINT "N - S"; „LOCATE 27, 38 „PRINT "L I N E"; „CALL Choice(1, C%, F$) „'draw gnomon template „'gnomon size makes shadow of tip just reach „'circumference of dial at noon on summer solstice. „CLS „AT = 23.5 * DR' axial tilt „R = 150 / COS(AT)' radius of circumscribed circle (locus of tip) „A = 2 * ABS(LT) * DR - AT' tip angle above horizontal wrt centre „PX% = R * COS(A) „PY% = 300 - R * (SIN(AT) + SIN(A)) „SELECT CASE PX% „  CASE IS > 150 „    ZX% = 150 „  CASE IS < -75 „    ZX% = -75 „  CASE ELSE „    ZX% = PX% „END SELECT „XS% = 357 - ZX% \ 2 „OX% = XS% - 150 „PX% = PX% + XS% „ZX% = ZX% + XS% „PRINT TAB(27); "GNOMON TEMPLATE"; „LINE (OX%, 300)-(PX%, PY%) „LINE (OX%, 300)-(ZX%, 300) „LINE (ZX%, 300)-(PX%, PY%) „L$ = "South" „R$ = "North" „IF LT < 0 THEN SWAP L$, R$ „LOCATE 20, 21 „PRINT L$; " <-      Base      -> "; R$ „PRINT „PRINT TAB(15); "Gnomon should be in North-South vertical plane, with " „PRINT TAB(15); L$; " end of base at intersection of hour lines."; „CALL Choice(2, C%, F$) „IF K$ = "c" THEN ' do equation of time if clock time selected „  ' draw equation of time graph „  CLS „  PRINT TAB(30); "EQUATION OF TIME" „  PRINT „  PRINT „  PRINT TAB(15); "Graph shows difference in minutes between clock" „  PRINT TAB(15); "and sundial time. Positive difference means" „  PRINT TAB(15); "clock is ahead of sundial, and vice versa." „  DC = 8 * ATN(1) / 365 „  LOCATE 16, 67 „  PRINT "-="; „  FOR T = -20 TO 15 STEP 5 „    LINE (137, 247 - 6.4 * T)-(530, 247 - 6.4 * T) „    LOCATE 16 - T / 2.5, 14 „    PRINT RIGHT$(" " + STR$(T), 3); „    IF T = 0 THEN PRINT " ="; „  NEXT „  LOCATE 9, 20 „  PRINT "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"; „  T = 0 „  D = 0 „  FOR M = 0 TO 384 „    IF M = T THEN „      LINE (147 + M, 128)-(147 + M, 375) „      READ L „      T = T + L „    ELSE „      Q = D + 2 * SIN((D - 2) * DC) „      Z = 9.7 * SIN(2 * (Q + 11) * DC) + 7.9 * SIN((Q - 2) * DC) „      PSET (147 + M, 247 - 6.4 * Z) „      D = D + 1 „    END IF „    IF L = 33 AND M = T - 18 THEN M = M + 1 „  NEXT „  DATA 33,29,33,31,33,31,33,33,31,33,31,33,0 „  CALL Choice(3, C%, F$) „END IF „SCREEN 0 „END „  „  „SUB Choice (N%, C%, F$) „  IF C% AND 2 THEN „    F1$ = F$ + ".DG" + RIGHT$(STR$(N%), 1) „    DEF SEG = &HA000 „    BSAVE F1$, 0, 80& * 480 „    DEF SEG „  END IF „  IF C% AND 1 THEN „    CALL Lcopy11 „  ELSE „    CALL KeyPause „  END IF „END SUB „  „SUB KeyPause „   DO WHILE INKEY$ <> "" „   LOOP „   DO WHILE INKEY$ = "" „   LOOP „END SUB „  „SUB Lcopy11 „  „' Copies monochrome SCREEN 11 image to printer, with printed image „' aligned with long axis across the page. Note: To fit on 8-inch „' wide paper, 32-pixel margins on both sides are not printed. „  „  DEFINT A-Y „  DEFLNG Z „  „  DIM V(0 TO 7), A(0 TO 7, 4 TO 75)' col's 0-3 and 76-79 not printed „  „  V(7) = 1  ' reVerse-order bits „  FOR X = 7 TO 1 STEP -1 „    V(X - 1) = V(X) + V(X) „  NEXT „  „  F = FREEFILE „  OPEN "PRN" FOR BINARY AS F „  „  DEF SEG = &HA000 „  OUT &H3CE, 4 „  OUT &H3CF, 0 „  „  N$ = STRING$(8, 0)                    ' 8 nulls for empty square „  „  E$ = CHR$(27)                         ' ESC character „  „  L$ = E$ + "C" + CHR$(0) + CHR$(11)    ' page length = 11 inches „  PUT F, , L$ „  „  L$ = E$ + "A" + CHR$(8)               ' set printer to 8/72 lpi „  PUT F, , L$ „  „  Z = 4 „  „  FOR S = 0 TO 59  ' 60 stripes, each 8 rows deep „  „    N = -1             ' null-stripe flag „  „    FOR R = 0 TO 7             ' read 8 rows into array „      FOR C = 4 TO 75 „        A(R, C) = PEEK(Z) „        IF N THEN IF A(R, C) THEN N = 0 „        Z = Z + 1 „      NEXT „      Z = Z + 8 „    NEXT „  „    IF NOT N THEN    ' not null stripe „  „      L$ = E$ + "*" + CHR$(5) + MKI$(576)  ' set plotter mode „      PUT F, , L$ „  „      FOR C = 4 TO 75 „        Q = 0 „        FOR R = 0 TO 7 „          IF A(R, C) THEN Q = 1: EXIT FOR „        NEXT „        IF Q THEN       ' not null square „          FOR Y = 0 TO 7    ' analyse 8 bits per byte „            B = 0 „            FOR R = 0 TO 7  ' 8 bytes to be analysed „              IF A(R, C) AND V(Y) THEN B = B OR V(R) „            NEXT R „            L$ = CHR$(B)  ' send byte to printer „            PUT F, , L$ „          NEXT Y „        ELSE    ' null square „          PUT F, , N$ „        END IF „      NEXT C „  „    END IF „  „    L$ = CHR$(13) + CHR$(10)            ' terminate line (stripe) „    PUT F, , L$ „  „  NEXT S „  „  L$ = CHR$(12)                         ' form feed „  PUT F, , L$ „  „  L$ = E$ + "@"                         ' reset printer „  PUT F, , L$ „  „  CLOSE F „  „  DEF SEG „  „END SUB „Ryan Balara                    Matrix Linear Equation Solver   ryan@balaraco.com             06-16-02 (  :  )       VBwin                  73   4715     Gusidel.bas '>>> Page 1 of GUSIDEL.ZIP begins here. TYPE:BINAA TLEN:2753„'-------------------------------------------------------------„'                  INSTRUCTIONS FOR DECODING„'If there are multiple parts to this file, merge them into one„'file using  COPY PART1.EXT+PART2.EXT FILENAME.EXT  Remove all„'message header and footer information (everything outside the„'">>> Page x of..." lines),  load the result into your version„'of Basic (QBASIC, QuickBASIC, etc.) then RUN it. The original„'file will be decoded into the current directory on your disk.„'-------------------------------------------------------------„DEFINT A-Z:DIM SHARED K,S,B&:V1 'Created by PostIt! 7.4„SUB V1:OPEN "O",1,"GUSIDEL.ZIP",4^6:?STRING$(50,177);„U"%up()%9%'%#-%qj.^OmL>dY4&.%%s'%%%0%I%%6DMB834J;S%1D?Dw,,>SU9hL^„U"cx&?:CK#r5^p59Rsa1I_Cq&sy)2=r[>pFS=z1PJ/03$LMuxe4B7PQ&KmK>LGv]B„U"pH8yb\o,F:O;uqu.',;7BO]Jskh00$8aY4%s..kZj]_9(9_EC(raICR67#Se[.h„U"?cBhfaAb&>cjD0jr<V;2NZ/>P1tl_T^4G6.RE#pd*IQ+Tp35qy'YZ;3bVw,$-_X„U"V2\j*tXJ8S1(cS+4<j0jUg)E(+RMpipdEXp:,-Q&p(wUo?HDcOEYq3kNvFdlxZC„U"a7b.hq7Z\iYTmjSs;h:AKd828d'0K;%ks*\SGWl(B]60(YhC]qr;W1G.<yi.Rc:„U"&shUL:GUNJ(kdc-4R9A/F>Q8Qsn<W$n60HyKUG1GpTURAl[L:w]w2YRcgDh[Zwu„U"x&M4lcA*Pdq(d+)0tRR%]my$6T8U\$vQ6)>2U7Za'\[0#k5$ofIwrQ<b;l3'-BW„U"-(*)YlO)V8RNOPdO9X4$/a?eBiuvTu7fpl,(;EU3yFqo&EtcxJmb&E'p$-h/R=N„U"/(rf]bUo;k/NvI3.<wYq('E4VNpYSfRV->]K+t%up()%9%'%[-%H6S=Opp*(SQ-„U"%%%RP%%%0%I%%6DMB834A;SkAP<f)#+tT]9fxDXhb/ns%(BcJR;tO'L6J';^g&j„U"7#>\Lbu/7rXmg8cs%s$f<Xr,nfQ)8i;/QTV=l\%wdtZr6XJowbTftHp%$'5$J$r„U"Te.7*OuHTsE$ffArU?b6X;7=L+3L\O5KU6j?naHmcJeN,Qx[F:T]5N1Bam<;[KC„U"$tEU4=nRvk>^_euLhZgkIB]KAer)vhJ^EHp60Jrqy'Srp8=CLdI^zb6o0<$<364„U"7v0kNpUBn\7gMB&+<u*,8H#%r9_(iF=8s/77Jh3c>.lQLKP4A(]n92g=mR2S-?0„U"E?H(,74hMkr#^<:A<L1a4Mm2N](WUt'J)fa;#vfnJaMB'^4ZU18,d?S<6Pdx'FB„U"(E%SqFUdVm#L>;0cM0M+tH)F9MylbJvL\sBsBib3[bmV,SSJ-hYl//mv>$>e9_<„U":(XzQ[7J441#GP%N=X8g[zs=j^g938BBWlu,4:iY(u/Zuu/&6k1#:xP,#:zj)U-„U":Wh5fj3s,.NHYO\?f58]#&=U9Q,C]*h[Lv-]bAu+ds)WXLUMuCuZPmSlrqXJNH]„U"3^WXoD_P3/&:95P/.)6CG-F1MJ\*$R?==hn7sYk74[HTvUKCt;5.%s3x0je+)(T„U"3(vAMINuVZY0G<8oh^R[GzZyJhEkiH0BS.2OL4gNMj\d#cSvSk>xwe]gZmn-U4V„U"<mBp\R5TfO7MdR:qNhGK%fU<&nlRGAe1UAEfvc<Z05VlbKa=:b:^CxWfLDT)z>[„U"cB+8)W3uMnC(pCcPK$$X=k1[V(4\.itf3E\zd.rCgm%ztIlj.r&G\1m'wllEcU3„U"=7^>pc'#.BTKQ91vb4RJ0eK\ZlT:OkAErLCNd$qaA*4iI9Fa6aDT#9sX*DZwkNS„U"Xwj*)_h<^61hW5lWTVi]Ra7?o?]QBui32(-Bgl+YSGuo6K\9G7c^N,C.+AW$k1o„U";I)'UU.-/;t$R/nQ.p$F$hQ&6oB:D[_2Itv&AjMVQ_r7K'3Uc&uEh<Q])gY.KQn„U"w+9_kwj&9:wJME4*Tq4b^U.693,,ICs5I=GUOW5q?0D7]hF*Ad_:t;9$f8BTo56„U"V-c/;$i'JdQZteP_Ma$l$c#X)o5uDABLntfSai#oY(uPUL%QW:,];Ntg*7?AV.M„U"GBll&pjzR5BQ77E$[[e'<(]K+5ONg<)$)v^[K(9)j)29i&:r0cdT;q.U+*h'6Gm„U"tMF<'0un7]I;UPZm>7.eW%B:55N*Q,QaIgeSZPC%jT'5gK[%#Qi==Z-^tR=EZbw„U"-cCpU=SSE:?Z;_C%Pr^.o;aM$NRcn[TjGoe0g=RGG<$VIS/=K[A)S7uO:R/s[wb„U"Cb^A5m-P;OraL[vj77;=U_9H1>JRzOBWpF7CK4^ZiH%Z5<*m&BE3#+r2EoZ/UEd„U"=Rt0\rnUYZ>_.F]h2NI89>IXWRdl1d$1Lcd+mOY/unB\ZmUnDEsK<_&=9&;/>gW„U"Q+aoH<][R_/XI^[+S+&u4_[%:5E#u5H-:5kE1Xrot)T4KO)LhL;ON+/o&b$7H_s„U"OvUNOlIX#'3cqJB,5&(vzE^If3nF)H%/\f[6ztLJ'T&LYYp;.KYQ/\F=viR\I#=„U"(Y1<d/,up93QE]+87F6$=_i'b1=^-5a,<Uj3VWctI&dw\6EMYu;8yq50U+/V4kd„U"v7ZRYl<b_Grm>BR/OBQ5kgaaGZwjrVnFVs_h;F;_6ELxwQr)BagSfb:,$2f79wL„U"6n1n>'jhvuxIpDqlS$0cq/&+7(?/f9OpUmRynJACqR6.ZLi9Ufjj.Bh(J+tf]OX„U"UjfkwvOjCnQL?y9&(UVsdL)MEfpEi-CLc*?z7p:UDOZ.gpnNyGh<+ACJC1+:f1J„U"64PG5/gA;EB+rC^v?2Q2HxyRQ<s'&EW*8#GQ)Qh\HOrq7U[4%e9(zVfz/%^lD;?„U"_MBP,;-ln7\*SOGBe-um%>znZF_>OlJH_lHIoVDSTd,[r=C9>jXcLtNY&$>PVg,„U"d+)EK4/^bm5-%_4Ev\n37KM#2Y&^V70xh;>$sAP_x:g':ZM43EYM9OBP+3MWFED„U"a-q]Uw1-YSVii)#rhygTGkBZ#K:i,P-D$FD6I>)N-b>m17$&'S+v.I%Y^/,I8]&„U"l+v?8GV#hZG2R0+yI]j1\PrE70nd6:CWV1Yuam$Q:jK)x:MZdeMUD0Fza^;a2Ec„U"/E*l))'D*Sdgj1vb[LqCgIE.[tCfC$S6udyLWEV[ESz,zV>;>]*-VRGkR6hTTGQ„U"Jc8Ppkqb&ER^s,7L$JV]%,il7&XL,',Lj#JiWs)bYR,>E8K-*Q/D3=(h.1Mat_\„U"%KSr'nAnbQ0kFs>-YE*Vk.p^,kU5jJp32ez7V,Yeh95pH^p?$UqA('Kop1RbbXN„U"tdk3?\ZB#bqhgh?(Gauh3o$:;Z<+XXj7h\Hb<Q+u;3/hUW]N&qWkdYcBPng<BXv„U"13ea,oRWoD\i(3NBH&Kxdii*8g-$V,T9a\#S>/3D\XF+sk9K-$nCaHU8?>YfqGl„U"NP)gCDR<5M5gm$igF8V&7BnGgA2R.]AFKIviR3*ogw[]GNzwTd>w+pSljK7K:>J„U"WQN6aG.--L^<xc/Qx(ai-qbD&h&RSEcaI0fXaLL.<#3bQJ6Zb-XghE,J#6+h0,1„U"MVD<;7Yn]TkmO]4CBPCc.=^TFGK5&Tas4#d>v'FRa6lHscLD,L04_i9Ir%dup&%„U"'9%9%%'%-.%qj^COmLd-Y4&%(%s'%%%0%%%%%%%%%&%E4%/P%#%%%6MDB83D4;S„U"%)1?up%&'9%%9%'%[-%H6S=Opp*(SQ-%%%RP%%%0%%%%%%%%%&%RE%/P']&%%M6„U"DB8234;S1kA<u%p*+%%%%%'#%'%A%%%%^%/%%%%%„END SUB„CLOSE:IF S=243AND B&=2753THEN?" :) Ok!"ELSE?" :( Bad!„SUB U(A$):FOR A=1TO LEN(A$):C=ASC(MID$(A$,A))-37:IF C<0THEN C=91+C*32„IF K<4THEN K=C+243ELSE?#1,CHR$(C+(K MOD 3)*86);:K=K\3:B&=B&+1„S=(S+C)AND 255:NEXT:LOCATE,1:?STRING$(B&*50\2753,219);:END SUB„'>>> Page 1 of GUSIDEL.ZIP ends here. Last page. TCHK:243„Roger Oxford                   Design House Rafters           r.oxfordjr@worldnet.att.net    09-15-02 (  :  )       QB, Qbasic, PDS, PB    376  17172    Roof.bas    ''' qb45 program WITH DOS 5.0 FOR THE SAKE OF GRAPHICS.COM IN C:\DOS„'''    (PLEASE READ DOCUMENTATION A THE TOP OF MOUSE PROGRAM, LINE 17000)„REM ** THE 8.20A MOUSE ROUTINE AT THE END OF THIS PROGRAM IS SPLINDID AND„REM ** RETURNS A WEALTH OF INFORMATION. IT CAN EASILY BE COPIED TO„REM ** ANOTHER QB45 PROGRAM IN NEED OF A MOUSE ROUTINE (GOSUB 17000).„REM ** YOU NEED GRAPHICS.COM IN DOS DIR. ; RUN IN DOS MODE OR < = W95;„REM ** YOU CAN USE HP PRINTER IF YOU HAVE 600 TO 800 SERIES, MAYBE AND„REM ** IF THE DOS PRINTER DRIVER DISK 3 VER 9.03 (FOR W95 AND 3.1).„REM ** ONLY THE VARIABLES IN UPPER LEFT FOLLOWED BY ! SHOULD BE MOUSED!!!„REM ** ATN(0F A TANGENT)=RADIANS BUT RADS*57.2958 DEGREES/RAD=DEGREES....!!„REM ** START PGM WITH BAT FILE...QB/RUN ROOF/AH/L QBMOUSE..to invoke mouse„„SCREEN 12: COLUMNS = 80: ROWS = 60„WIDTH COLUMNS, ROWS„VIEW (5, 5)-(635, 475)„COL = 15: COLOR 15„PALETTE 0, 65536 * 60„PRINT TAB(10); "LET'S COMPUTE THE RAFTERS FOR A ROOF - COMMON AND HIP AND JACKS."„PRINT : PRINT„PRINT "  THESE CHOICES ARE TO PREPARE FOR SHIFT+PRINT SCREEN AT THE END OF THE PGM. "„PRINT„M1% = 0: GOSUB 15000: IF M1% = 0 THEN BEEP: PRINT "MOUSE NOT LOADED": PRINT„INPUT "S=PRINT ON 8 1/2 X 11 PAPER  B=PRINT ON LEDGER PAPER  HP=HEWLETT PACKARD"; C$„REM ** IF GRAPHICS.COM GIVES PROBLEMS THEN SKIP IT, BUT DO IT IN AUTOEXEC.BAT„REM ** THIS DOS 5 COMMAND WILL NOT LOAD IN W98, BUT WILL LOAD IN W95 OR LOWER.„REM ** TO ENJOY SHIFT+PRTSCRN, RUN IN DOS OR W95 OR LOWER.„IF UCASE$(C$) = "B" THEN SHELL "C:\DOS\GRAPHICS GRAPHICSWIDE"„IF UCASE$(C$) = "S" THEN SHELL "C:\DOS\GRAPHICS GRAPHICS"„IF UCASE$(C$) = "HP" THEN SHELL "C:\DOS\GRAPHICS DESKJET"„FOR K = 1 TO 6„LOCATE K, 1: PRINT SPACE$(80)„NEXT K„LOCATE 1, 15: INPUT "PROJECT NAME "; PN$: LOCATE 1, 45: BEEP: PRINT ; "MAKE ALL ENTRIES IN INCHES "„LOCATE 2, 2: INPUT "ROOF PITCH          "; P!„LOCATE 3, 2: INPUT "BUILDING WIDTH      "; BS!„LOCATE 4, 2: INPUT "BUILDING LENGTH     "; BL!„LOCATE 5, 2: INPUT "WIDTH RAFTER STOCK  "; RW!„LOCATE 6, 2: INPUT "WIDTH OF R.B.       "; RBW!„LOCATE 7, 2: INPUT "RIDGEBEAM THICKNESS "; RBT!„LOCATE 8, 2: INPUT "EVE OVERHANG        "; EOH!„LOCATE 9, 2: INPUT "GABEL EVE           "; GOH!„LOCATE 10, 2: INPUT "SEAT ON BIRDSMOUTH "; SEAT!„LOCATE 11, 2: INPUT "SUBFACIA+FACIA     "; SFF!„LOCATE 12, 2: INPUT "CENTER SPACING     "; CS!„LOCATE 13, 2: INPUT "HIP RAFTER THICK   "; HRT!„LOCATE 14, 2: INPUT "WIDTH OF HIP RAFTER  "; WHIP!„COL = 15„„25 CLS„„RISE! = (BS! / 2) * (P! / 12)„X = BS! + (2 * EOH!) + .2 * (BS!)„Y = 3 * RISE!„CX = X / 2„CY = Y / 2„WINDOW (0, 0)-(X, Y)„„REM ** WINDOW WASH„FOR K = 1 TO 60: LOCATE K, 2: PRINT SPACE$(80): NEXT K„„50„REM** TOP PLATE„LINE (CX - (BS! / 2), CY)-(CX + (BS! / 2), CY - 4), COL, B„LINE (CX - (BS! / 2), CY - 2)-(CX + (BS! / 2), CY - 2), COL„LINE (CX - (BS! / 2), CY)-(CX - (BS! / 2), CY - 10), COL„LINE (CX + (BS! / 2), CY)-(CX + (BS! / 2), CY - 10), COL„LINE (CX - (BS! / 2) + 4, CY)-(CX - (BS! / 2) + 4, CY - 10): REM LEFT STUD WALL„LINE (CX + (BS! / 2) - 4, CY)-(CX + (BS! / 2) - 4, CY - 10): REM RIGHT STUD WALL„REM ** RB SUPPORT POST + length side cut„LSC! = ((BS! / 2) / RISE!): REM TAN OF HIGH ANGLE B„UNK! = RW! / LSC!„LSC! = SQR(RW! ^ 2 + UNK! ^ 2)„HEAL! = (RISE! / (BS! / 2)): REM TAN OF LOW ANGLE A„HEAL! = SEAT! * HEAL!„VABM! = LSC! - HEAL!„POST! = ((((BS! / 2) - (RBT! / 2)) / 12) * P!) + VABM! - RBW!„TRB! = POST! + RBW!„„LINE (CX - 1, CY)-(CX + 1, CY + POST!), COL, B: REM **POST„LINE (CX + 1, CY + POST!)-(CX - 1, CY + POST! + RBW!), COL, B: REM **R.B.„„REM ** RAFTERS„OHR! = (EOH! / 12) * P!„REM **LEFT RAFTER„LINE (CX - 1, CY + POST! + RBW!)-(CX - (BS! / 2) - EOH!, CY - OHR! + VABM!), COL„LINE (CX - (BS! / 2) - EOH!, CY - OHR! + VABM!)-(CX - (BS! / 2) - EOH!, CY - OHR! + VABM! - LSC!), COL„LINE (CX - (BS! / 2) - EOH!, CY - OHR! + VABM! - LSC!)-(CX - 1, CY + POST! + RBW! - LSC!), COL„REM ** RIGHT RAFTER„LINE (CX + 1, CY + POST! + RBW!)-(CX + (BS! / 2) + EOH!, CY - OHR! + VABM!), COL„LINE (CX + (BS! / 2) + EOH!, CY - OHR! + VABM!)-(CX + (BS! / 2) + EOH!, CY - OHR! + VABM! - LSC!), COL„LINE (CX + (BS! / 2) + EOH!, CY - OHR! + VABM! - LSC!)-(CX + 1, CY + POST! + RBW! - LSC!), COL„HRB! = (BL! - BS!) + RBT!„ARB! = BL! + (2 * GOH!) - (2 * SFF!)„TCR! = SQR(((BS! / 2 + EOH!) ^ 2) + (RISE! + OHR!) ^ 2)„HRUN! = (BS! / 2 + EOH!) * (16.97 / 12)„THR! = SQR(HRUN! ^ 2 + (RISE! + OHR!) ^ 2)„HMUL! = THR! / TCR!„„REM ** COMMON RAFTER„UNK! = (P! * (RBT! / 2)) / 12„CRLC! = SQR(UNK! ^ 2 + (RBT! / 2) ^ 2)„CRL! = (SQR((BS! / 2) ^ 2 + RISE! ^ 2)): REM - CRLC!„„REM ** COMMON RAFTER OVERHANG„UNK! = (P! * SFF!) / 12„CROLC! = SQR(UNK! ^ 2 + SFF! ^ 2)„CROL! = (SQR(EOH! ^ 2 + OHR! ^ 2)): REM - CROLC!„„REM ** ROOF DRIP AREA„RDA! = ((ARB! + (2 * SFF!)) * (BS! + (2 * EOH!))) / 144„„REM ** ROOF SURFACE AREA„RA! = (SQR(1 + (P! / 12) ^ 2)) * RDA!„„REM ** HIP RAFTER LENGTH„RHIP! = ((BS! / 2) * 16.97) / 12: LET HIPRUN! = RHIP!„HALF! = (SQR(RBT! ^ 2 + RBT! ^ 2)) / 2„UNK! = (P! * HALF!) / 16.97„HRLC! = SQR(UNK! ^ 2 + HALF! ^ 2)„HRL! = (SQR(RHIP! ^ 2 + RISE! ^ 2)): REM ** - HRLC!„„REM ** HIP RAFTER OVERHANG LENGTH„RHIP! = (EOH! * 16.97) / 12„SFFT! = SQR(SFF! ^ 2 + SFF! ^ 2)„UNK! = (P! * SFFT!) / 16.97„HROLC! = SQR(UNK! ^ 2 + SFFT! ^ 2)„HROL! = (SQR(RHIP! ^ 2 + OHR! ^ 2)): REM **- HROLC!„„REM ** FIRST SIDE MARK AND OTHER SIDE MARKS DOWN THE TOP OF HIP„OSM! = HRL! / ((BS! / 2) / CS!)„FSM! = OSM! - HRLC„„REM ** PLUMB CUT DEGREE OF HIP RAFTER„LET PCDEGHIP! = ATN(HIPRUN! / RISE!)„LET PCDEGHIP! = PCDEGHIP! * 57.2958„„REM ** PLUMB CUT DEGREE OF COMMON RAFTER„LET PCDEGCR! = ATN((BS! / 2) / RISE!)„LET PCDEGCR! = PCDEGCR! * 57.2958„„REM ** SIDE CUT ANGLE FOR JACKS„LET LONGSIDE! = ((HRL! / ((BS! / 2) / 1.5))) ^ 2„LET JACKS! = LONGSIDE! - (1.5) ^ 2„LET JACKS! = (JACKS!) ^ .5„LET SCDEGJACKS! = ATN(1.5 / JACKS!): REM SAW SET= 90-SCDEGJACKS„LET SCDEGJACKS! = 57.2958 * SCDEGJACKS!„„REM** COMMON DIFERENCE OF JACKS„CD! = SQR(OSM! ^ 2 - CS! ^ 2)„„REM ** DROP ON SEAT OF HIP RAFTER„DROP! = (P! * (HRT! / 2)) / 16.97„„REM ** HALF 45 DEG HIP RAFTER THICKNESS„HHALF! = SQR(2 * HRT! ^ 2) / 2„„REM ** SLAB AREA +1 INCH„SLAB! = (BS! + 2) * (BL! + 2) / 144„„LOCATE 1, 22: PRINT "PROJECT NAME "; PN$„LOCATE 2, 4: PRINT "GIVEN :"„LOCATE 3, 2: PRINT "ROOF PITCH          = "; USING "###.##"; P!; : PRINT " P!"„LOCATE 4, 4: PRINT "BUILDING WIDTH    = "; USING "###.##"; BS!; : PRINT " BS!"„LOCATE 5, 4: PRINT "BUILDING LENGTH   = "; USING "###.##"; BL!; : PRINT " BL!"„LOCATE 6, 4: PRINT "WIDTH RAFTER STOCK= "; USING "###.##"; RW!; : PRINT " RW!"„LOCATE 7, 4: PRINT "O.C. SPACING      = "; USING "###.##"; CS!; : PRINT " CS!"„LOCATE 8, 4: PRINT "B.M. SEAT         = "; USING "###.##"; SEAT!; : PRINT " SEAT!"„LOCATE 9, 4: PRINT "R.B. WIDTH        = "; USING "###.##"; RBW!; : PRINT " RBW!"„LOCATE 10, 4: PRINT "R.B. THICKNESS   = "; USING "###.##"; RBT!; : PRINT " RBT!"„LOCATE 11, 4: PRINT "HIP RAFTER THICK = "; USING "###.##"; HRT!; : PRINT " HRT!"„LOCATE 12, 4: PRINT "EVE OVERHANG     = "; USING "###.##"; EOH!; : PRINT " EOH!"„LOCATE 13, 4: PRINT "GABEL EVE        = "; USING "###.##"; GOH!; : PRINT " GOH!"„LOCATE 14, 4: PRINT "SUBFACIA + FACIA = "; USING "###.##"; SFF!; : PRINT " SFF!"„LOCATE 15, 4: PRINT "WIDTH HIP RAFTER = "; USING "###.##"; WHIP!; : PRINT " WHIP!"„„LOCATE 5, 45: PRINT "45D H. T.(SUBF+F) = "; USING "###.##"; SFFT!„LOCATE 6, 45: PRINT "R.B. POST         = "; USING "###.##"; POST!„LOCATE 7, 45: PRINT "TOP OF R.B.       = "; USING "###.##"; TRB!„LOCATE 8, 45: PRINT "SCHOOL HOUSE RISE = "; USING "###.##"; RISE!„LOCATE 9, 45: PRINT "A-FRAME R.B.-SF-F = "; USING "###.##"; ARB!„LOCATE 10, 45: PRINT "B.M. HEAL         = "; USING "###.##"; HEAL!„„LOCATE 43, 2: PRINT "DEGREES :";„LOCATE 44, 2: PRINT "PLUM DEG COMM RAFT 90 -"; INT(PCDEGCR! * 100) / 100; "="; USING "##.##"; (90 - PCDEGCR!); : PRINT CHR$(248)„„LOCATE 47, 2: PRINT "THEORETICAL COM RAFTER     = "; USING "###.##"; TCR!„LOCATE 48, 4: PRINT "UP + 1/2 H. R.B.T.      = "; USING "###.##"; CRL!„LOCATE 49, 4: PRINT "TAIL + H. T.(SF + F)    = "; USING "###.##"; CROL!„LOCATE 50, 4: PRINT "FINISHED LENGTH         = "; USING "###.##"; CRL! + CROL! - CRLC! - CROLC!„LOCATE 51, 4: PRINT "ROOF DRIP AREA SQ FT    = "; USING "####.##"; RDA!„LOCATE 52, 4: PRINT "ROOF AREA      SQ FT    = "; USING "####.##"; RA!„LOCATE 53, 4: PRINT "SLAB AREA+INCH SQ FT    = "; USING "####.##"; SLAB!„LOCATE 54, 4: PRINT "V.A.B.M                 = "; USING "###.##"; VABM!„LOCATE 55, 4: PRINT "LENGTH PLUMB CUT C. RAF = "; USING "##.##"; LSC!„„LOCATE 44, 42: PRINT "SAW SET JACKS 90 -"; INT(SCDEGJACKS! * 100) / 100; " ="; USING "##.##"; (90 - SCDEGJACKS!); : PRINT CHR$(248)„LOCATE 45, 42: PRINT "PLUM CUT OF HIP 90 -"; INT(PCDEGHIP! * 100) / 100; " ="; USING "##.##"; (90 - PCDEGHIP!); : PRINT CHR$(248)„„LOCATE 47, 42: PRINT "THEORETICAL HIP RAFTER = "; USING "###.##"; THR!„LOCATE 48, 45: PRINT "UP + 1/2 H. 45D RBT = "; USING "###.##"; HRL!„LOCATE 49, 45: PRINT "TAIL + H.45D(SF+F)T.= "; USING "###.##"; HROL!„LOCATE 50, 45: PRINT "FINISHED LENGTH HIP = "; USING "###.##"; HRL! + HROL! - HRLC! - HROLC!„LOCATE 51, 45: PRINT "V.A.B.M. - DROP     = "; USING "###.##"; VABM! - DROP!„LOCATE 52, 45: PRINT "1/2 45D R.B.T.      = "; USING "###.##"; HALF!„LOCATE 53, 45: PRINT "1/2 45D HIP R.THICK = "; USING "###.##"; HHALF!„LOCATE 54, 45: PRINT "HIP ROOF R.B. LENTH = "; USING "###.##"; HRB!„LOCATE 55, 45: PRINT "1ST,NEXT H.R. LAYOFF= "; USING "##.## "; FSM!; OSM!„LOCATE 56, 45: PRINT "COMMON DIFF OF JACKS= "; USING "###.##"; CD!„LOCATE 57, 45: PRINT "LEN HIP PLUMB CUT = "; : LET PLACES = 2: LET RUNN = 17: LET WIDE = WHIP!: LET PITCH = P!: GOSUB 500„„LOCATE 37, 2: PRINT "FOR WHAT ITS WORTH:";„LOCATE 38, 2: PRINT "PITCH = "; P!; "             ON 11.25 RAFTER"; "   ON 9.25 RAFTER"; "   ON 7.25 RAFTER";„LOCATE 39, 2: PRINT "LENGTH OF COMMON PLUMB  = "; : LET PLACES = 10: LET PITCH = P!: LET RUNN = 12: LET WIDE = 11.25: GOSUB 500: LET WIDE = 9.25: GOSUB 500: LET WIDE = 7.25: GOSUB 500„LOCATE 40, 2: PRINT "LENGTH OF HIP    PLUMB  = "; : LET PITCH = P!: LET RUNN = 17: LET WIDE = 11.25: GOSUB 500: LET WIDE = 9.25: GOSUB 500: LET WIDE = 7.25: GOSUB 500„„400 GOSUB 17000: REM **** CALL THE MOUSE„IF LEN(WORD$) = 0 THEN GOTO 400„LOCATE 20, 2: PRINT WORD$;„LOCATE 21, 2: INPUT "NEW  VALUE"; NEWVALUE„„IF WORD$ = "P!" THEN LET P! = NEWVALUE„IF WORD$ = "BS!" THEN LET BS! = NEWVALUE„IF WORD$ = "BL!" THEN LET BL! = NEWVALUE„IF WORD$ = "RW!" THEN LET RW = NEWVALUE„IF WORD$ = "CS!" THEN LET CS! = NEWVALUE„IF WORD$ = "SEAT!" THEN LET SEAT! = NEWVALUE„IF WORD$ = "RBW!" THEN LET RBW! = NEWVALUE„IF WORD$ = "RBT!" THEN LET RBT! = NEWVALUE„IF WORD$ = "HRT!" THEN LET HRT! = NEWVALUE„IF WORD$ = "EOH!" THEN LET EOH! = NEWVALUE„IF WORD$ = "GOH!" THEN LET GOH! = NEWVALUE„IF WORD$ = "SFF!" THEN LET SFF! = NEWVALUE„IF WORD$ = "WHIP!" THEN LET WHIP! = NEWVALUE„GOTO 25„„END„500 LET A = (PITCH * WIDE) / RUNN„    LET A = A ^ 2 + WIDE ^ 2„    LET A = A ^ .5„    PRINT SPACE$(PLACES); USING "##.##"; A;„    RETURN„'mouse routine (DEVELOPED ON MICROSOFT MOUSE 8.20a, SHOULD RUN ON 6.26 OR LATER„'this part from here down will run by itself if copied to a seperate screen„REM ** ON SCREEN 0, LINE & WINDOW & VIEW STATEMENTS NOT ALLOWED!!„16995 CLS„SCREEN 11: REM ** MAKE CHANGES ON THESE FOUR LINES TO DETERMINE USABLE SCREENS„WIDTH 80, 60„LINE (0, 0)-(200, 200)„WINDOW (50, 50)-(689, 529)„LOCATE 4, 20: PRINT "HeL10 Ladies aND NERDS ?!@#$%^&*"„GOSUB 17000„„LOCATE 6, 2: PRINT "RSS                 "; RSS„LOCATE 7, 2: PRINT "COLS                "; COLS„LOCATE 8, 2: PRINT "WORD$               "; WORD$„LOCATE 9, 2: PRINT "FIRSTLETTER (ASCII) "; FIRSTLETTER; ""„LOCATE 10, 2: PRINT "CHR$(FIRSTLETTER)  "; CHR$(FIRSTLETTER)„LOCATE 11, 2: PRINT "LEN(WORD$)          "; LEN(WORD$)„LOCATE 12, 2: PRINT "MAXX                    "; MAXX„LOCATE 13, 2: PRINT "MAXY                    "; MAXY„LOCATE 14, 2: PRINT "TROW OR YLINE%     "; TROW„LOCATE 15, 2: PRINT "TCOL OR XLINE%     "; TCOL„LOCATE 16, 2: PRINT "PHY COORD...LASTX             "; LASTX„LOCATE 17, 2: PRINT "PHY  COORD...LASTY            "; LASTY„LOCATE 18, 2: PRINT "# XPIXILS/CHAR..XPIX  "; XPIX„LOCATE 19, 2: PRINT "# YPIXILS/CHAR..YPIX  "; YPIX„ON ERROR GOTO 16996„LOCATE 20, 2: PRINT "X VIEW COORD...PMAP(LASTX,2)  "; : PRINT USING "###.##"; PMAP(LASTX, 2)„LOCATE 21, 2: PRINT "Y VIEW COORD...PMAP(LASTY,2)  "; : PRINT USING "###.##"; PMAP(LASTY, 2)„GOTO 16998„„16996   BEEP: PRINT "ERROR": RESUME NEXT: PRINT„„16998   M1% = 0: GOSUB 15000„LET JFG$ = "": REM BLOCK STUCK KEY!!„INPUT "HIT ENTER TO MOVE ON", JFG$„M1% = 4: M3% = LASTX: M4% = LASTY: GOSUB 15000: REM SET LAST POSITION„M1% = 1: GOSUB 15000„GOTO 16995„„REM ** MOUSE 6.26 OR BETTER IS REQUIRED TO RUN AS SUPPLIED because of funct 38"„REM ** LINE DRAWN LAST AND OVER A WORD ERASES THE WORD TO CHR$(32)=EMPTY!!„REM ** SETTING A PIXEL TO "ON" ERASES THE LETTER POINTED TO!!„REM ** PGM NAME IS ALITERAT.BAS (A LITERATE MOUSE)„REM ** WIDTH COLUMNS, ROWS ::: LOCATE ROWS,COLUMNS„REM ** A RIGHT CLICK IS IMBEDDED IN THE DO LOOP TO QUIT..JUST REMOVE REM STATEMENT.„REM ** START PGM WITH BAT FILE...QB/RUN ????/AH/L QBMOUSE..to invoke mouse.„REM ** RUNS ON SCREEN 0-2 & 7-13 WITH PROPER WIDTH STATEMENTS OR NO WIDTH STATEMENT.„„'when sub 17000 is complete these variables are returned to user:::„'physical coordinates of the last left mouse click.....lastx , lasty„'screen resolution (scale of physical coordinates)...0 to maxx„'     ex.. screen 12 = 639 X 479                  ...0 to maxy„'view coordinates for graphics    x = PMAP(lastx,2)„' (do it yourself!                y = PMAP(lasty,3)„'firstletter is the ascII value of the letter pointed to..„'                print chr$(firstletter)=the character..„'word$ is the string containing no spaces that was pointed to..„'len(word$)= # characters in the string..„'if len(word$)=0 then you missed what you clicked at!„'text   row    pointed to = TROW = YLINE%„'text   column pointed to = TCOL = XLINE%„„15000 CALL MOUSE(M1%, M2%, M3%, M4%)„„      RETURN„„17000 REM ** figure # OF TEXT RSS,COLS„      COLS = 80„      ON ERROR GOTO 17020„      LOCATE 1, COLS: GOTO 17030„17020 LET COLS = 40: RESUME„17030 LET RSS = 60„17031 ON ERROR GOTO 17080„17036 LOCATE RSS, COLS„      GOTO 17200: REM ** IF MOUSE 6.26 OR LATER NOT AVAILABLE THEN GOTO 17250„                  REM ** VS LABLE 17200„17080 IF RSS = 60 THEN LET RSS = 50: RESUME„      IF RSS = 50 THEN LET RSS = 43: RESUME„      IF RSS = 43 THEN LET RSS = 30: RESUME„      IF RSS = 30 THEN LET RSS = 25: RESUME„„17200  M1% = 38        'this function is available in mouse 6.26 and„      GOSUB 15000      'later. It works correctly on screen 0 and 1,2,7-13.„      LET MAXX = M3%   '17250 is a way to find screen resolution manually.„      LET MAXY = M4%   'Screen 0 is not correctly determined by 17250.„      GOTO 17400       'Screen 1,2,7-13 do work correctly in 17250.„  „17250 REM ** FIND SCREEN RESOLUTION the hard way if mouse 8.20a is not available„      LET MAXX = 719: LET MAXY = 347„      ON ERROR GOTO 17300„      VIEW (0, 0)-(MAXX, MAXY)„      GOTO 17400„17300 IF MAXX = 719 AND MAXY = 347 THEN LET MAXX = 639: MAXY = 479: RESUME„      IF MAXX = 639 AND MAXY = 479 THEN LET MAXY = 399: RESUME„      IF MAXX = 639 AND MAXY = 399 THEN LET MAXY = 349: RESUME„      IF MAXX = 639 AND MAXY = 349 THEN LET MAXY = 199: RESUME„      IF MAXX = 639 AND MAXY = 199 THEN LET MAXX = 319: MAXY = 199: RESUME„„17400 LET XPIX = (MAXX + 1) / COLS: REM ** # X PIXLES / CHARACTER„      LET YPIX = (MAXY + 1) / RSS: REM ** # Y PIXLES / CHARACTER„„„17500 M1% = 1: GOSUB 15000: REM - MAKING MOUSE CURSOR VISIBLE„„17600 DO„   LET JFG$ = INKEY$: REM BLOCK STUCK KEY„   M1% = 5: M2% = 0: GOSUB 15000„   IF M1% = 1 THEN LET LASTX = M3%: LET LASTY = M4%: M1% = 0: GOSUB 15000: GOTO 17800„   REM M1% = 5: M2% = 1: GOSUB 15000:REM ** CHECK ON RT BUTTON„   REM IF M2% = 1 THEN END: REM  **  RT. BUTTON QUIT„17700 LOOP„„   REM THE M3&M4% USED BELOW ARE FROM THE MOST RECENT CALL OF M1%=5!!„„17800 REM ** ACCURATE COLUMN AND ROW AIMING ***„    LET XLINE% = INT((LASTX + 1) / XPIX)„    IF (LASTX + 1) / XPIX > XLINE% THEN LET XLINE% = XLINE% + 1„    LET YLINE% = INT((LASTY + 1) / YPIX)„    IF (LASTY + 1) / YPIX > YLINE% THEN LET YLINE% = YLINE% + 1„„17850 LET TROW = YLINE%: LET TCOL = XLINE%: LET HIT = 0„17860 LET MOA = SCREEN(YLINE%, XLINE%): LET FIRSTLETTER = MOA„    IF CHR$(MOA) <> CHR$(32) AND HIT = 0 THEN LET HIT = 1„17870 LET MOA = SCREEN(YLINE%, XLINE%)„    IF CHR$(MOA) = CHR$(32) THEN GOTO 17880„    LET XLINE% = XLINE% - 1: IF XLINE% >= 1 THEN GOTO 17870„17880 LET WORD$ = ""„17890 LET XLINE% = XLINE% + 1: IF XLINE% >= COLS + 1 THEN GOTO 17900„    LET MOA = SCREEN(YLINE%, XLINE%)„    IF CHR$(MOA) <> CHR$(32) AND HIT = 1 THEN LET WORD$ = WORD$ + CHR$(MOA): GOTO 17890„17900„   M1% = 4: M3% = LASTX: M4% = LASTY: GOSUB 15000: REM SET LAST POSITION„   M1% = 1: GOSUB 15000: REM TURN ON THE MOUSE„   RETURN„„David Williams                 Rounding off Decimals          david.williams@ablelink.org    09-15-02 (  :  )       Qbasic,QB,PDS          58   2055     roffdem.bas ' ROFFDEM.BAS „' David Williams. 2002 „  „' david.williams@ablelink.org „  „' This program contains and demonstrates a FUNCTION that produces „' a string that shows a rounded-off representation of a decimal „' number. The function takes two arguments, a real number that „' is to be rounded, and an integer which shows the required number „' of decimal places. The integer is allowed to be positive or „' negative. Its sign is a flag as to whether or not trailing zeroes „' to the right of the decimal point should be truncated. The absolute „' value of the integer is the number of decimal places. „  „' If there is no other digit to the left of the decimal point, a zero „' is placed there. If truncation leaves no digits to the right of the „' decimal point, the point itself is omitted. No spaces are added to „' the left or right of the number. „  „DECLARE FUNCTION ROff$ (N!, P%) „DO „  INPUT "Number to be rounded (or ENTER to quit)"; N$ „  IF N$ = "" THEN EXIT DO „  N = VAL(N$) „  INPUT "How many places of decimals"; P% „  P% = ABS(P%)  ' ensure number is positive „  INPUT "Trim trailing zeroes (Y/n)"; T$ „  IF UCASE$(LEFT$(T$, 1)) = "N" THEN P% = -P% „  ' negative P% flags non-trimming of zeroes „  Q$ = CHR$(34)  ' quotation mark „  PRINT "String showing rounded number is: "; Q$; ROff$(N, P%); Q$ „  PRINT "(Quotation marks are not included in string.)" „  PRINT „LOOP „END „  „FUNCTION ROff$ (N, P%) „' Produces string that shows N rounded off to ABS(P%) places of „' decimals. Sign of P% shows whether trailing zeroes are truncated. „  F% = ABS(P%) „  H& = INT(10 ^ F% * N + .5) „  IF H& < 0 THEN M$ = "-" ELSE M$ = "" „  S$ = LTRIM$(STR$(ABS(H&))) „  L% = LEN(S$) „  IF L% < F% + 1 THEN „    S$ = STRING$(F% + 1 - L%, "0") + S$ „    L% = F% + 1 „  END IF „  T$ = "." + RIGHT$(S$, F%) „  IF P% >= 0 THEN „    DO WHILE RIGHT$(T$, 1) = "0" „      T$ = LEFT$(T$, LEN(T$) - 1) „    LOOP „    IF T$ = "." THEN T$ = "" „  END IF „  ROff$ = M$ + LEFT$(S$, L% - F%) + T$ „END FUNCTION „  „David Williams                 Find angle between Lat and Longdavid.williams@ablelink.org    09-15-02 (  :  )       Qbasic,QB,PDS          137  3552     navig.bas   ' NAVIG.BAS „' David Williams  2001, 2002 „  „' david.williams@ablelink.org „  „' Calculates distances and compass bearings between points, „' given their latitudes and longitudes. Can also be used to „' find true north, if two points are visible from each other „' and have both been accurately located in latitude and „' longitude, e.g. by using GPS. The compass bearing of one „' point from the other can be calculated, so the line of sight „' between them has a known compass bearing, allowing north to „' be found. „  „DECLARE FUNCTION InRad# () „DECLARE FUNCTION Norm# (A#) „DECLARE FUNCTION ATan# (Y#, X#) „  „DEFDBL A-Z „  „DIM SHARED PI „PI = 4 * ATN(1) „  „DIM LAT(1 TO 2), LON(1 TO 2) „  „PRad = 6371 ' Earth radius in km. Change to change units or planets „  „CLS „PRINT "This program calculates the compass bearings and distance" „PRINT "between any two points 'A' and 'B' on the earth's surface." „PRINT "Input longitudes in degrees [and minutes] west of Greenwich" „PRINT "and latitudes in degrees [and minutes] north of the equator." „PRINT "Minutes can be omitted or substituted by fractional degrees." „PRINT "Use negative numbers (of degrees) for opposite directions." „PRINT "Decimal fractions of degrees or minutes are permitted." „PRINT „PRINT "Note that the bearings are TRUE, not magnetic. If you want" „PRINT "to calculate a magnetic bearing, you must add the local" „PRINT "magnetic variation." „PRINT „PRINT "Bearings are rounded to the nearest minute (1/60 degree)." „PRINT „  „StA: „PRINT "Latitude of Point A"; „LAT(1) = InRad „PRINT "Longitude of Point A"; „LON(1) = InRad „StB: „PRINT "Latitude of Point B"; „LAT(2) = InRad „PRINT "Longitude of Point B"; „LON(2) = InRad „  „PRINT „  „FOR P% = 1 TO 2 „  Q% = 3 - P% „  LG = LON(P%) - LON(Q%) „  Y = SIN(LAT(Q%)) „  T = COS(LAT(Q%)) „  X = T * SIN(LG) „  Z = T * COS(LG) „  R = SQR(Y * Y + Z * Z) „  A = ATan(Y, Z) - LAT(P%) „  Z = R * SIN(A) „  B% = Norm(ATan(X, Z)) * 10800 / PI „  IF B% = 21600 THEN B% = 0 „  „  DG% = B% \ 60 „  MN% = B% MOD 60 „  H$ = RIGHT$(STR$(INT(MN% * 5 / 3 + 100.5)), 2) „  PRINT "Bearing from "; CHR$(64 + P%); " toward "; CHR$(64 + Q%); „  PRINT ": "; DG%; "degrees,"; MN%; "minutes. ("; „  PRINT LTRIM$(STR$(DG%)); "."; H$; " degrees.)" „  „NEXT „  „Y = -R * COS(A) „E = ATan(Y, SQR(1 - Y * Y)) „D! = PRad * (PI / 2 + E) „  „PRINT „PRINT "Distance between points: "; D!; "kilometres," „PRINT TAB(26); D! * .62137; "statute miles,"; „PRINT TAB(26); D! * .54; "nautical miles." „  „PRINT „PRINT "1. Keep A. Change B" „PRINT "2. Change A and B" „PRINT "3. Quit" „PRINT „PRINT "Which (by number) ? "; „DO „  K$ = INKEY$ „LOOP UNTIL K$ >= "1" AND K$ <= "3" „PRINT K$ „PRINT „ON VAL(K$) GOTO StB, StA „  „END „  „FUNCTION ATan (Y, X) „  IF X = 0 THEN „     T = SGN(Y) * PI / 2 „  ELSE „     T = ATN(Y / X) „     IF X < 0 THEN T = T + PI „  END IF „  ATan = T „END FUNCTION „  „FUNCTION InRad „  DO „    LINE INPUT " (Degrees[, Minutes])? "; X$ „    X$ = RTRIM$(LTRIM$(X$)) „    C% = INSTR(X$, ",") „    IF C% <> 1 AND C% < LEN(X$) THEN EXIT DO „    BEEP „    PRINT "Illegal entry. Try again:"; „  LOOP „  IF C% THEN „    D$ = LEFT$(X$, C% - 1) „    M = VAL(MID$(X$, C% + 1)) „  ELSE „    D$ = X$ „    M = 0 „  END IF „  IF LEFT$(D$, 1) = "-" THEN M = -ABS(M) „  D = (VAL(D$) + M / 60) * PI / 180 „  InRad = Norm(D) „END FUNCTION „  „FUNCTION Norm (A) „  P = 2 * PI „  Norm = A - P * INT(A / P) „END FUNCTION „David Williams                 Find TV sattalite position     david.williams@ablelink.org    09-15-02 (  :  )       Qbasic,QB,PDS          303  6630     Tv_sat.bas  ' TV_SATS.BAS „' TV Satellites, Commodore PET version, David Williams, 1982 „  „' david.williams@ablelink.org „  „' Updated for other computers 1995, 2000, 2002 „' This version dated 2002 August 29 „  „DECLARE SUB InNum (Pt$, V, MX%, CFlag%) „DECLARE FUNCTION YesNo$ () „DECLARE FUNCTION ROff$ (J, P%) „DECLARE SUB Instructions () „DECLARE SUB Spacebar () „  „CONST R = 6.61614 „' Radius of geosynchronous orbit in units of earth radius „CONST PI = 3.141593 „CONST CF = PI / 180  ' Degree/radian factor „  „ON ERROR GOTO Etrap „F% = FREEFILE „N$ = "TVSATDAT.DAT" „E% = 0 „OPEN N$ FOR INPUT AS F% „  „IF E% THEN „  CFlag% = 1 „  „  LA = 45   ') „  LO = 80   ') initial default latitude and longitudes „  LS = 90   ') „  „ELSE „  INPUT #F%, LA, LO, LS „  CFlag% = 0 „  „END IF „  „CLOSE F% „  „ON ERROR GOTO 0 „  „CLS „PRINT "Do you want instructions"; „IF YesNo$ = "y" THEN CALL Instructions „  „Newcalc: „  „' Input section „  „CLS „PRINT "For your current position on the ground:" „PRINT "Latitude is"; ROff$(LA, -2); "degrees north." „PRINT "Longitude is"; ROff$(LO, -2); "degrees west." „PRINT „PRINT "Keep these values"; „  „IF YesNo$ = "n" THEN „  „    PRINT "Input latitude and longitude in degrees." „    PRINT "Use negative numbers for angles in" „    PRINT "opposite directions to those shown." „    PRINT „  „    InNum "Your latitude (deg. north)", LA, 90, CFlag% „  „    InNum "Your longitude (deg. west)", LO, 180, CFlag% „  „END IF „  „LT = LA „LG = LO „  „PRINT "For current satellite:" „PRINT "Longitude is"; ROff$(LS, -2); "degrees west." „PRINT „PRINT "Keep this value"; „  „IF YesNo$ = "n" THEN „  „  PRINT "Input longitude of satellite in" „  PRINT "degrees west. (Use negative number" „  PRINT "if you want to input degrees east.)" „  PRINT „  „  InNum "Satellite's longitude", LS, 180, CFlag% „  „END IF „  „LD = LG - LS ' longitude difference „LT = 90 + LT ' latitude from s. pole „LT = CF * LT ' latitude in radians „LD = CF * LD ' longitude diff. in radians „  „' satellite's x,y,z coordinates „Y = 0 ' equatorial orbit „X = R * SIN(LD) „Z = R * COS(LD) „  „' rotate system to put observer at s. pole „D = ABS(Z) ' distance from x-axis „AN = SGN(Z) * PI / 2 „' azimuth angle onto y-z plane (y-axis as zero) „AN = AN + LT ' rotate system „Y = D * COS(AN) ' new y „Z = D * SIN(AN) ' new z „  „' calculate altitude „  „IF X = 0 AND Z = 0 THEN „  AL = SGN(-1 - Y) * PI / 2 „ELSE „  AL = ATN((-1 - Y) / SQR(X * X + Z * Z)) „END IF „  „IF AL < 0 THEN „  „  PRINT "Satellite invisible (below horizon)" „  „ELSE „  „  ' calculate new bearings „  „  IF Z = 0 THEN „    BE = SGN(X) * PI / 2 „  ELSE „    BE = ATN(X / Z) - PI * (Z < 0) ' bearing „  END IF „  „  BE = BE / CF ' bearing in degrees „  AL = AL / CF ' alt. in degrees „  „  ' roundoff and printout „  „  BE = VAL(ROff$(BE, 1)) „  BE = BE - 360 * INT(BE / 360) „  „  PRINT "Satellite's position:" „  PRINT „  „  B$ = ROff$(BE, 1) „  BE = VAL(B$) „  „  PRINT "Bearing is"; B$; "degrees." „  „  X = BE / 90 „  IF X = INT(X) THEN „    Y1$ = RTRIM$(MID$("NorthEast SouthWest", 5 * X + 1, 5)) „    PRINT "(Due "; Y1$; ")" „  ELSE „    Z = ABS(180 - BE) „    IF Z < 90 THEN „      Y1$ = "South" „    ELSE „      Y1$ = "North" „      Z = 180 - Z „    END IF „    IF X < 2 THEN „      Y2$ = "East" „    ELSE „      Y2$ = "West" „    END IF „    PRINT "("; Y1$; ROff$(Z, 1); "degrees "; Y2$; ")" „  END IF „  „  PRINT „  PRINT "Altitude is"; ROff$(AL, 1); "degrees." „  IF AL < 5 THEN „    PRINT „    PRINT "Very low altitude -" „    PRINT "Communication unreliable" „  END IF „  „END IF „  „PRINT „  „PRINT "Another calculation"; „  „IF YesNo$ = "y" GOTO Newcalc „  „IF CFlag% THEN „  PRINT "Keep current latitude & longitudes for next run"; „  IF YesNo$ = "y" THEN „    ON ERROR GOTO Etrap „    E% = 0 „    OPEN N$ FOR OUTPUT AS F% „    IF E% = 0 THEN PRINT #F%, LA; ","; LO; ","; LS „    CLOSE F% „    ON ERROR GOTO 0 „  END IF „END IF „  „END „  „Etrap: „  E% = 1 „  RESUME NEXT „  „  „SUB InNum (Pt$, V, MX%, CFlag%) „  „ DO „  „   PRINT Pt$; " (or ENTER for no change)? "; „   LINE INPUT In$ „   PRINT „   IF In$ = "" THEN „     PRINT "Value unchanged" „     PRINT „     EXIT DO „   END IF „   W = VAL(In$) „   IF ABS(W) <= MX% AND INSTR(In$, ",") = 0 THEN „     IF W <> V THEN „       V = W „       CFlag% = 1 „     END IF „     EXIT DO „   END IF „   BEEP „   M$ = LTRIM$(STR$(MX%)) „   PRINT "Input illegal or out of range! (-"; M$; " to "; M$; ")" „   PRINT "Try again..." „   PRINT „  „ LOOP „  „END SUB „  „SUB Instructions „  „   CLS „   PRINT "This program calculates the position" „   PRINT "(expressed as true compass bearing and" „   PRINT "altitude) of any satellite which is in" „   PRINT "geostationary orbit. (Almost all T.V." „   PRINT "broadcasting and relay satellites are" „   PRINT "geostationary.) You will be asked for" „   PRINT "your latitude and longitude, and for" „   PRINT "the longitude of the satellite." „   PRINT „   PRINT "Note that the bearings are true. If" „   PRINT "you want a magnetic bearing, you must" „   PRINT "find the local magnetic deviation from" „   PRINT "a current map. The magnetic bearing is" „   PRINT "found by adding the deviation to the true" „   PRINT "bearing if magnetic north is west of true" „   PRINT "north, or subtracting the deviation if" „   PRINT "magnetic north is east of true north." „   PRINT „   PRINT "Your entries of latitude and longitudes" „   PRINT "are kept on disk and used subsequently." „   PRINT "Initially, arbitary defaults are used." „  „   CALL Spacebar „  „END SUB „  „FUNCTION ROff$ (J, P%) „  F% = ABS(P%) „  H& = INT(10 ^ F% * J + .5) „  IF H& < 0 THEN M$ = " -" ELSE M$ = " " „  S$ = LTRIM$(STR$(ABS(H&))) „  L% = LEN(S$) „  IF L% < F% + 1 THEN „    S$ = STRING$(F% + 1 - L%, "0") + S$ „    L% = F% + 1 „  END IF „  T$ = "." + RIGHT$(S$, F%) „  IF P% <= 0 THEN „    DO WHILE RIGHT$(T$, 1) = "0" „      T$ = LEFT$(T$, LEN(T$) - 1) „    LOOP „    IF T$ = "." THEN T$ = "" „  END IF „  ROff$ = M$ + LEFT$(S$, L% - F%) + T$ + " " „END FUNCTION „  „SUB Spacebar „  „  PRINT „  PRINT "Press Space Bar to continue"; „  „  DO WHILE INKEY$ <> " " „  LOOP „  „END SUB „  „FUNCTION YesNo$ „  „   PRINT "? (y/n) "; „   DO WHILE INKEY$ <> "" „   LOOP „   DO „     G$ = LCASE$(INKEY$) „   LOOP UNTIL G$ = "y" OR G$ = "n" „   PRINT G$ „   PRINT „   YesNo$ = G$ „  „END FUNCTION „  „Roger Oxford                   Roof Rafter Calculation        r.oxfordjr@worldnet.att.net    12-15-02 (  :  )       QB, PDS                198  13096    ALITERAT.BAS'>>> Page 1 of ALITERAT.ZIP begins here. TYPE:BINAA TLEN:9056„'-------------------------------------------------------------„'                  INSTRUCTIONS FOR DECODING„'If there are multiple parts to this file, merge them into one„'file using  COPY PART1.EXT+PART2.EXT FILENAME.EXT  Remove all„'message header and footer information (everything outside the„'">>> Page x of..." lines),  load the result into your version„'of Basic (QBASIC, QuickBASIC, etc.) then RUN it. The original„'file will be decoded into the current directory on your disk.„'-------------------------------------------------------------„DEFINT A-Z:DIM SHARED K,S,B&:V1 'Created by PostIt! 7.4„SUB V1:OPEN "O",1,"ALITERAT.ZIP",4^6:?STRING$(50,177);„U"%up()%9%'%#-%B-&\RNN+>F]/.%%a?%%%1%%%%fq%nyjw%fySgIfxl'q:BSAO7v„U";&K^dC;dL&VAFE9aKcB'1+N&\_WUI1qA&z-;V%:1Snu=o88Dv6I_X)We,&y7pXA„U"Bsdubv4lmePC%diIv/.G]_pnR/bvjb=S(6Fl/jLtrdQ'bL^vXFC3_l1P9<wVKBq„U"P5qtHmD^bEqP()IonJdibY=n-s5vr1f$:InXD.7CT$w1klI>r&^PBx]q[:rMm4D„U"v/7'r9s(*X.OqE$EB,E0+OfdOJdWFx\xtso0/lT^RHI.\_,>t%H)'t,+(it=1]Q„U"XhH)C0KAlAZ\s?2nTZcbnunX'pZ7UL>x;DPnd[,=pgWCm=LNCH'.3fr9j\xPhk&„U"*mLqd%zsmEI.SV3Efssa[RbEoVODya6Nq.0%Ohy/SonmckwMUx-e=qqt?5bI\1L„U"PPed[1vj'&5[?vh;zKS.ZWRyoxZ+jW($FN2\;0NA1jEn58H-o-]a:IQt4hdu2V6„U"FMu4$d7/HN)\(RLAElA3(S:U+AWW9Nx5:3>3W:/6rX3I[hHR=ujFA6tvtvMP74E„U";=Y3d)F^nojaT;u8XGHqjYC9AiMHhO;S3ev$L5B6^a_i8g3ah9fu7.^yo>FXikB„U",I0]SL-c*rc$VebL7CMB$A[y9Xp2qxRuzjoGeDj-Y4ne*+OMVwZ$2l5%0tO#aZI„U"qVNlC1Y5I6IsMvo9>l6GyiR&;[BG]\BROy4zPLe48<d?]U^QJJ\>n1tEBHVU48t„U"1nAKDlmpNu5vlql]VNXenC,5s^5/V'ZJz?f^WCXNikR6=hL.r%\D,l#<mhZTi'g„U"Dds/d[++RmH^BF,A9AEU(2;uPU</F+0+9<<#[mP227WAP8M=Cwo<2,<M[WIZ5:*„U"%C>it'bMi3q_.LXiQ&$K?x0R/g*1XkPf?L/wuPDL<YqIbdOHicQ]an70&_Yo\Pp„U"T\A-eDUI3qiIE7E,PsSf$j7oH/I+P%G/=MZE97/$qXg:F^=8C?LPY199'\CP[N+„U"xaIkClPk^po#CNCKC)]8YUUkUbmHZ]$Y$;>'>%4NuP.0?6eB\)Ye[EA$VP#YR:O„U"#2QBuIroE24Q8iTX1vEkrwo(m2/;S8aO\O/(^C^%.BBDmDP##7=t&I_DJQMOq%\„U".S0Dx2ToV,.)s]_3e2nk^%)?DqJ$#12Pj5-'^rXK;IBgorZ4<7]TUWk1)Y3Z<2q„U"MTx.YQW8(r,I?mANsd-cs)x#llW./.gnT$]Ihu]xjD8;LjKvsjiPT5wHRF8vZ<H„U"6V[B3?nso\CB(6i4UXjhXN(OuDMdDS+hjwp>-?m6Uo3M$ik,w=g07/4VU6Q%o;z„U"BbH7jolLZ[zS-AsblH4.IX_U;0F#AYvk#)5bi*DT+:4m5Rg6q2y;g$INY1.J2St„U"7[jgq8SYL1r-J)F0LA#nm#Qi6/G;N?qY3t)eUBf26sh+NO8mAYx2AYs98?VM&#R„U"$#J1LI?Q0U7QS:*fcSf[>?w$pw%apNvG)UQE7r(4+8HkxwQhno$gFz<HC+Tb/+8„U"7327tvw?];^elT'.(J6Yh2\Yd&rmW_G;YA*(o,e9Ca1nxHU8)-m^htZw9h+q4^X„U"lbdt)7hvI0WHf8%UdLRP>>B)cS,Y\E;'dM(=,628s#8J=i^+6RNr0TFut<L6i8s„U"?v),%qg0Xc,bIaSKCZYJ6^?WxPI8gt7TQ1YqZ44u7B:Q4,396'q9:I^pTEZK_(a„U"%4/go_pmhjF&5E(eZn=6J;njij,13/gtNOQu\h6(OX:T)/$Bd1iSz*0g#zJd:g_„U"s-E-tgI6A4%r]0ku^Q)UuEu6jX9h3UqSCmoFQa.EZmp/HkYNFvv8[*,zdedQB6\„U"vK?lks6I,X5HYgTxqhOPU0zgGI(&s(7H50F0Hn)R-oz=+F_fX=:#$sD)#RLrb?9„U"U=?o1*f>aLm<a'_KDmG+%v7Pxc8#%L+Y64sR/NS1eV>up_b/W>\zec:E+bi-7=&„U"p(f_SrBkKB^DL:T^bYxHlbDWmK0Y-m;.[;)n*jh#*kg5pi[I9p#zap&Sl3maLi+„U"4lU)f\8ZY&F63=JgiKh>Zu$-.[*zL,0SkaSKMCKsL'kTntmmd2V4=NHPps+oWjg„U"_.il,2efd#7./mSJWczu.kdxz6^PY[RQJ6p2(.W]3ijpjFbN%6ul#[IBSFXmP/k„U"c+&E[)(#lF+GDFzOk(Gd\nh,e.n1IJPy4#FtRb&#j#['G\;LN?3w%^s9x%+Eg;a„U"V\Q##.Sny:6SJo>^tlx7:iuNuGb;&R<jUDJW$*UiLrs'ZY00SgF8XZ3c?b,cpEX„U"C[hA?_626KBv4^quFGwb7dA]XM*\/GLj?FU+v-q73ZbbLPhCsf0Q4G-</S>I/<\„U"lFlc^N.e]M54L6Y4&3NdJSA25dN&]Jz$k9Fb48;,.U=ytjB:ujE7QElODxAh4Gm„U"uGiE<k=pr9aBZD?YOI6ZLTQ9^gH:9V+%*d^LC,Pd\#;T)ujI4dMC7N.$_/%sm9X„U"BJMX%eC4CGvT&:vY\3KRbGgnB?xw+Gp_hLW5a)JiIetC7aB:/cGR>5QZQSBPv_m„U"_9X>mUF+ENoU0Bl$R[KD:$kPUqkN#A'</,0pSg&r$D_D'R<6$l(l)dOW*BdjPBA„U"nH\Eht]#CIH3bdBpWC>\oz7rN4OeJ48.IQ4x7:kb4S^Xc)'Pg/z)+<#.5X3I&gV„U"<_=2SwarOuSGe%Q'O.*q\hVN)d%[)8pzSqZM4vU=[c8\7YJsZK,SDLP_T;p(jrC„U"$CJ%GRQ_*9:qnhjEZgcSzVz:4z4P&kxI])H-)+h_Ij1^E2:m6j2[F3QU-*1\ZiJ„U"\mj[,;ldOGb<1Y85>^%8aWf7/cW0J6B?k;8.XRW:nqjs3p?b<(V18B2+Wv%I],f„U"EHUSc*33=;B'9LJ7T?5w./ieg,\<h^HPjDW^rao>J-9f)n$$SjT.g]O?oWtsI$.„U"vuD32RApGB??t]cWa#u7fX\U=*:^8Dh9A(FZtV_=nsSD1<A^J-TSD=EpR9p;&]#„U"$nw?kDb&X5B_QT)JWv8RR(PhOP#]vY<J&FGD7;A6:*TD:_D7(IAU<B>*n.SW/Rd„U"m05MWP#5\Fi-J$B$7bb^%+6jJdXIi/G:*H$r*;Sht\kO=1.$hn80eKe\>+j<l,h„U"+i=<gWRi'\]TK[X(V\_kg2P[]J+_$#8ILG<B)i<by]5D.+6,^'GC$UD*<_-EJ*.„U"OT>gqU)t8:hDGL%c/1c[o.mxr-52p/kv#1/HCD&xY?\pAeF)C/EuQXXt5R;f*TT„U"tAQIYW.:d>[Y/P[s<\iw#r<2^8*kWJ%rZ.&F$SYsh2b]4zWPwnN(Q2X\d'&#8RQ„U"^X^*laoK0)S(w(QsfvWbNo:[<Y>kFZ0XBf_<$7^oZs3k'x&up%()9%%'%-%1M-\„U"RA*e*5%w=%%&5n%%%-%%%%wttk%SgfxN-+:>uT1KwRCExPPD4vEo[M7_GYYA(_e„U"<Z+<]d]K#+3;?(8vV[T.(T8NSNNm%>w7J<D8X*rW/0JY4_Z?#]XA]$AK9um8bG=„U"59o<VV,;O1orE7'kuH^ll4.#0BuKCfK(ljtkg'5[$tKbxBkY8.n5tDP_y?C=QH^„U"Z'rE5pt\JDJMr_#oF^5u%$ElCV.XS=l9j.5>q36HlTWgf?frb)EjuX[gb3^ME4b„U"ebkUgT6:*)'=7EFgF-1qWj#RMQ*Kk/>i8yF7YhJh7ZoOZMQs=[Z(6Yqn&l>25E>„U"IPO^$:)jpR'lTeY'h>\V/g<h$\&J5\?9QGklQ;hXp7d+NM6itP^o%/Pj\;vd&iN„U"9dvH69CYJR(ueD3Pd]kW9[q5pfD.#G?]0/[E?>qq8(dVCTbDU8_9]E?P<qTj#TC„U"&r&V_G-H4UCQcFk1m'uL=E-\sFi#;e:dAeS']qUqTHl,PZq,L9ev2I;$,<;=iEX„U"(gZtZ1r*32IUC8NQ('9d?]2%7'c<\Cvu)Cl%r(/Q.,#sT7V>7BjGL6)P<AJ'7v5„U"K3Y'4#(;+:D]<m^)2T?OAs,*DO^e>?ie5rGF'BUoMy]4DE/kEX'_s5ZPjs(Wjok„U"]]hlkR-3qTU9x#8q8wmlIGkL>Y7MU&-9PbmWaB#ROK'B-N$+roEI_=Xb2)\3_o<„U"Tg/LBslST]YcPd4z^sW<yh0YoaB6:X?E3]shI\lJAuG^fDbX,Dv#M]3X6hJS>s,„U"D[QVGep<v$QApX$Ptfh$Y&'JwUkuPV<n%''4M?S6tD?I(]R24Snvk\5hLUmm7V_„U"ZVLC-x:m(dhWLJ/03I+6X\U6OnDkoHm\oSEs,/Bq2j'V_[,9#SEp(/1E3TE<Xft„U"NH=0l^DI/?808\c%xF'+ifgMrL9<-(SS(d/aTwD=C%PC8,M4NgnjSbuk9SVDaI8„U"RiNB/kP8,hHc58,t<lg5F?WurmpG_nS.vi%)$.JDJABX1d#\Np5T901h#$Cgv8&„U"=m057ZUSgt9S-c^q+E>h9%&M\W;7tNh?bCgr/v%OF/J6dQeN$J/f]APF4J#]WRY„U"^l?]xqUmeh;LEe#1v=&j*4AycP8[qD-S'9eM)u:\\,3F]/]5QylM_=:tqdfv<6$„U"bg4:/wzo>n4V[a6,amCClaLi5v+'(zSj%.iDh])2l\NAeU=ro/xK[ZqNm%661N8„U"UGm2nk6xwV3)PpCvYFboZz\HD#k'F#aZE+XT8H%mz&tsO_TWx,[W'&bL35oWlI2„U"wGAILu5vR5X_*Xvbs79K'#A4GYg7mKccnBMB0=z2gb\7Zi#B03XTJLF]C'JifBM„U":3:MVhoe,^$[^&YFo?PCU]94a5a%Ou>hwmD\=&PwP03Q]tqbW7Cf=UD^MZQ:a9/„U"lXI?Y2XD<+q,C;sJ_kg-X[anl'H[tR7-S<u3s%G2B.$vdSRePv\H(v#RAl7L):*„U"+A;*ZC-e;9OTCa;Y%:\]dK07m[\E$67YEXst4nWkmK#'E98;JnunPq;WKMwyVIR„U"U:iq_.20,rjV+n&p'(R/DoyXR(#&ePE>CG;e,S&a6wC=sSo:a)<MZ\hOl;_ki5Y„U"stN+8$0s;5Ph#,tA5tEWaTqhr[na+H75\=Dg>%(+$=O,:u>M+&m>G_I;j=t$pKZ„U"gsc-&ojKGE;RV9_Zk2(mW.Eb?]9\JG;[k9Ex*[hyq$-+F$LLK++8k;ouWJf]rl5„U"LXE+mD=4=Z0B$0o0XOsl5aL&1jihumh<l-;NC'Q(ZA0'hac1nbst/bJ>T9a=,xq„U"fln2]FmNPPZD_;sg)YFdSrE-Q>qGcZq6')dH#*r;,9]=Z*R0wE4]TP>s5H#?%Op„U"RrJ7oGu(bgAp<+NtFko(#1/f,^9etLZ]IUY2Ubh_e2CkE8#80E(vV3>UR+b]OMq„U"HOvvo//q2*baXG9&TNM)maIvEI(J9:3,S?nQO\1Nf%sZ9=##-U=9AFK.NfFG-PU„U"vW2iJw//pN^a+iWOBU9[:6^a9^+Wb_CP1OVaU'deWpBOD0[SV5W^e_o?rhFKk?H„U"S3<,4U>9(0Y]5&YdnJ]Jm-zcn\\>3k(C+paWgi4j,FZ06Z4iw-64?WAftk1]VAi„U"C:&SW)$4o4(:fO)1Y<Z0oFhW)CZo4-,4qH#XQl>X_u389G#I68Jm?lipisSYMYH„U":IO;(\MF6/_r0U#]83rFV_CS**1vmpnT[=pTC99Bb4WW0j/zH7gIXc5t2Mmg0fv„U"R?[d_vZ%$p'jZ7/**bU;#26YNQ'fqfH$Je+XmDE,b]4[2R-Q4KK%)Qu8^gQ8wp>„U"cbjh.qPO/g3fUK<&eGNU_CVc\-hRAUUlyPEEcXAr)AOEh$/i\lFb_U[^[vTMhRd„U"?+'%WRjbR_SC^Y[cQ>IE2$YrvKIF=XDAwC5X+4'^=,XIoG_a8:)e,^]Movh#EFa„U"D8bOjhN]_;9>5KFZzs+38$74'gRR*1&2RVFTg=IWgiH7FRrFb[]s3E[*w<cIL,V„U"EBvMO(1t0rv6f=<E>a\JVD:dCB7p,hV>wdsU\\8tz'X\Hsv+Etxdx=tK-4(O^uP„U"C&aWw#W5pRX<b7;YK^PIr,u+ctS4lkUMu<SP9A/[U2$Gx7Q);$Q2g4W]D3(P#]u„U"ek&*Hq.8Y5BsX_#M?HGvJE8=fkAu%y1_AMBK0mS2f;8W'uODK*zwomlxp:8%y:q„U"+A1n)b[\C0.#8y[af#U%2Q3[Ir*cj(IYM1#Xn)4SUoA/k>C%ei+S8uU\qnikCxh„U"]mRm7/dJkYM%sAG%4.&RJ([#6$a\iW+,I^A928.vrqjKJ$SY:.kW9Z]avI*ePiM„U"XCD1)^bLN##Jk7pzRI+gXh$\g247RbHge)'VmbFF&+H1^y5;Ah[=/336s<C[nZu„U"cka^>]--Hq1jpq33\T(E*,2ds,peY3<+EI$qeG^jI$sjIjS*B$#QFmHN[4(8>Ya„U">o_UZ\5(jjR]faY&Mfqh.U.*5#BAju#A_ENB'smRFO5_17+P2+*$*-X]>R$$>a6„U")M\kU1bUkGi)1^,<b\>n&Dt7UelyxO-gAB4O$;qA^'f3,7^d[Qh[43ZblKSNUJ2„U"\XNlv<yHmsewaW^TS3ETo)#ukv9eD$>T#GpSZ))4bwSrWbq\D&<(UIYdJhLq_'p„U"xsE3]JKTw5Z5O]hghb,&S:X%Rv:Ic9^:6W6Sk,m];K)M4hiqB.jN<JLY>wgSHJG„U":%lNh6(e+2ciInzgtvJ-dume9osQO2;Z+3*4i,X_J:C$bM]4s9Q=2AcaXFP0(gX„U"pFS\kfPD5CG_c\c_V;VP7.8KijM0do0G1.wA\mIM/p[EpfAVeUcu'?RZIN43d+>„U";Pv\vCWLCyLjwkz(#)1sKdS\3C>'ypcJDQ&MS_9Bbm1M^SyOc<Rv6_Yci?F&oOp„U"hXo8\W8Z$+EtOm1?&EKzS8G:TziIgYC'5V<<nc(C9YIJzk1da\Z$)9GL_NWEdv.„U"54zJ7B40Ji6wb[NrU43n9#>kY(Rw);INHWKvZUU--S\l5RP-_[GdMbD4p9bd0y)„U"NA;,K4DehsF$m-xVIM,he**EGk.^i,kJyPtW2*4ng(iASBG$gphf;xY1%zcPi/s„U">'lGstwu:Yt2wQ77%WcQHFoE,W>FhXz8iYGr4GT-Vn67+#p?q1JT9(Z<;GDA<qV„U"'],JRQS-4dk&6>.341O6a\CIj>0(+x'IMxSTNEQ3Z1YjE2kpDs-?Pw-/do7*'Pg„U"-O:?35PRj-&P6h41ELde05rW01+)uv^x^/0Cn:'Y2I9>vQ$Bc:hg935ea6f%bx5„U"P]<z&w7o?J7X$*ALcj3B8qN)7_*^SUaBJSQC_Ox&(A&>6(D)'Xw(NG<3xNSFjbo„U"f%i/wKK/I2x2sE228Q4^k6d%qpVHyDOa1I4eZA*I(]sw9P26F]BQ(o1wCq7A^e7„U"^KU[EhI^4l?*&s\IcuB&q][4q#tqM.iB^>+(k+5](NUTA):mo\^Z96gc.='W9-r„U"KBzl)gf9:0*1PqqZE'\_20W-yfIe;-Q5WYPC?*e[9:d8'*K#W&4UB03:NPr:(3v„U"\NRwKiL[[q1ZG?dh#>pg1Sea'4[PlKLiDv2cU5$^OIJ]QY5N5tdiPyC.4MyxJYY„U"m5_k=jem;V\xQ081FS>OFQ6xd#O8FO$%)w*uu5.WD>q;PzQ8NCZbudsKd)f1g^t„U">s)lx'n8bh&3f<F*F'U:B:t3e%rRANoLs.t=Kf9Ti(xM_u\M_MiWLEWim25kCE\„U"<p%.y^6rfJm2%*'.*^M-I3,/D#T,EIGPv?C:-WsUEg#9,S-,H^fu+OL$ri^Q0y^„U"&^z(H^%W^j,J6R,htJ)x>.kkd5TCu6Zb[)f0%0Z(q=&<A9_6a*&zJ2?8[EDr4HP„U"s2C>&gdqnQ*$9J\2xeHpnsY#Dra>1YN8t%mh[ele<Sp,c'0[W8G&$^>+A*hlM9(„U"\M52Tm.5H;eh9:N+)Md(W$7o5wP\k2*H6nu7#LlhqVvsZ<-2B96^^?_8Thc\vu^„U"nWSE$D\<ZWS\1fZfh3-m8cjgYt^S\6.51:8y]jxEq[3^txtn]UX5:N9gcTP=P<L„U"w7f0TIab5*tJs5^uy1Y2akma4.^&'hlc_ViE3phFixL2$;3cWKJo\je%##.[9O#„U"f7IpII9Xa9Y_hDUA'dyV.mND_M)kvS,li2om\hbgDus*Dmo>UeFI-W\)*>YSb&9„U"N&9ua2x/Os%'Wsy+js[CK7bPD0K2ceZfN47Hx5hKAR/G<<dOpTNZMefVipGI6VW„U"-AVfO7XwyS7oF5?QYf8F[f8UeHXtBIJYEz((E(StE;&oHpA*2#7xzeoRv1Q)gNp„U"jLkE)L)NR1Ytd&5?W5c=A8jW'dKCbn1r.KRE[<Xvgq1LgsjHS8e2XpR)O$m$t6C„U"v$L^krZ&uI_dFXHf?mT'[[0XjTB6Vzh1.o7S=dcubn%n-;[DmtVX%A6t41TwEge„U"<HBS9]79x*SmbH%HLFq<ud_6U2AR-Mk9NI.+FwJsb^crKHkn$I4pG]1JS/(0]+8„U"$RnsBQcmxLhrcgK[($HLxgFk'8Hr6M:t->NSe:)WxEFUUGqfxpkjchutrDsHSM>„U"Wsr^\e[AIB#f=>j7.?fd,jW&nui=hUBWF%18W_c5qbK\Fw4K$6S.lm.Q#<8+x%Z„U"Hd(yfMJSK=Trcz5Sig3U,*j^^toxV$R+d_a,1N;T^hNWQ*;ck0$R]nX6oR[LJ[p„U"+RDG((86jH_;OP1Gb)5],Dokknbl5B.BOlVVkXtn%CU]54ugR$3BoQRmHN4^r#4„U"5EA6<eGlLP[k_W=tlmbm1l0\hlS&mqa;IK=ddURgX25?Wf0YnJkeZ)uqp,f-k9k„U"CB9$H[bG'-K76L4bX7Icf+ln&?P0jj%93k2=c\vd?1ZEW?)Si[H+^1\$6YnHO1*„U"cD6u_R=MwcvgdhsdujP'83M.-L+(R8,aJXj#DF0*o7H/fWRnODfAJ&6(]E#T?pw„U"?)JB\]b&d'?FqKNvSUR?+*7$nAErREz.V54Xf-Av;rBKsq=W8xUBgDnqoJz]_u9„U"uLD<u5=Y<jZLKt,OmjD4Mx1u5PX5o6RSs135Ij_8BN8IdV4lie5l]\'X*2(MO:G„U"Nxn_pfw6BJ-LDqZk&\oVtZY1FkAYx?k$*gJM/Q7^fG#UZMi0CjC<aD9iUvHgO1t„U"sOMJq#6sq$61RB^0]%#CH%C)UfF'Ej<?NLHe8ha0i=7q8B)Q0,RO+sluGUgpas[„U"]HSV./c]5AZd?inrWp/3S_E:Ux=NkRxow[5gFx:$s3,s?]0JLhSMx2p_k*Ci7kx„U"F0MPfOrdqGkq60g.Imc;_s_1:9F3#hjNpP-s6Txh2B<J4w:YA$xiq*>(6HR.n5U„U"f]pW4l<7q[N(f9B$6mrOOj0Z.F2$5_tHF6WIvT^QmaX'iFcKcL35<:K,)gP#LY>„U"\7#x6\l$j<V.]brd[-wqHhI6$B[H\iY%SSVpz]sV?95jI^->lq5;L(57/')C=X-„U"^.+;7,)Zd2Rw>+R<v+YJtDi>V#)Y/5.,JqRpVL_UYBCHns,:6i?sW#eqR[Q7IL&„U"DG_T;5CE5Ivvw*_dSz-XB9TvAASSaQ68C.Y\Hw7CrhO6$-+Oeeob6Ql*4,4m#Dx„U"c<sOil$MTd#Cs3=nlq-jFPr?)^/Otv2G\XdKrn>u5,LqO*F(6c8>y%1F/plPtdL„U"r3$R8nq+>U$$DWl%D^E(Cc6cvkjGDgC_V^sBcF2_W>CD6''Ktn'_L[TtYZu'a]a„U"W_4._R^$])Cfv%HYMu2mfXrn9r4+VHm<m\r\;NDZbh'\[>8o)vUpY4vZrVXC4aF„U"o\.didNAM'jlr$+FO'DLQ$Ae0v-((Ckm#jRyO[vHf7UrNuWV^MGM.=kKW:9927a„U"WFhCT.b27uuMwpcreZL;RV^O^^dom:dwMf_#VJ(7[]vP3X2w[/CyDjiDiFr:kMc„U"qCdzr1qIg(O:#D/.%?LZr3PF](n4d6EF7FnQB$JD=DTokIT9Zv$;vvgC8&DC?5;„U"^Y4BDcs&9L$UWf$PIogF=>64&X&_js4hGU<C2'tYnlmP=/eVhC.vdbKLt,(jhfO„U"5&[L/4s#JZmqK>[psr'Jh:Hkp<TK6+'[PZfEp;3GXUVIin=Xt*gfn%Dk&g)KLa<„U"+sb8woF'kNN'?vD0j/]ymsK1zsWTV9a3VTWvz/[e':o<+vLMsN)N4y[;^J-(RZm„U"bgrV?<ud0-exbTLY8dU(y_GmX=lJ[c<#-\a,2NoH-Om-DtJtW^PM?LUZ:UESrk$„U"eX7Q-iSoC.9KjytS,<C7']_dc<pMnN0]^]x(dsiM?9EnKmL0;CV#zLj/1Qv,)D,„U"^]>fE.T;E7lAuARi-ztA3Ro7]*o^E=sgZ15=R45oj$hlm?\]B*b_t,5x^[S,cXU„U"VPrl*5CA$$geiXt&hOkcM8:I$o&K=fOR[%B#LV;KX^[_=-]_;WndSnZVp]?v5*H„U"a8Dk+UHVG(U#u5<nm<tCwiijekca:xHbMWvOGV?a2*nP]iO6^c>/rVzNe>=lmxt„U"s#\dfNkdc#K.dX<Ahs:8v9Y4[JJlxi>Ar:EU2C'_Ljx9cxkxS.eCVsB^u[a*[w;„U"#g'$$]?KiID++29Bg_$$*</%UD<j#vYuxsAf]HDC=_C#4x5-LnHfq.,9L0p]V[<„U"OMF'OTt#nYxH[H^RuY&=LspiNp<<i]'TY\TMYvh(odLlsrTWH4sS^G=O7^eelEN„U"LGh?yrE,Bnl*R5XI(HniFsSp\mlb<%gz/:bKDRU5]t2+5NU5wn\629+Zb6?[Z2,„U"XvufXf0XK<'-WK$#<1x/Xs'T/e.Sc&YrG1$$I3&-=XQ-W17n<XMHMB99x[oRT<K„U"')Fi^w?OM0CzVW=c%TM*Xtd18?q.#$sz)-mxW.0#n/VX%F5aY&SnF'\Xf*\T[8m„U"AutsI5huc*(:r1)g.,v&'cIX_afsQ]/)G#aQ%zc9S)/gy[kXIUB,Bdt&mUjkPF%„U"cofW5+_')Bp;Q%AUS/\&w<*L.kt?-caSncq8o'&<\fEbWw/Z0:y7#&\vE6j7Ta-„U"d4:2a=(xxHrGhT;GQJcXpQBRR)0ES$]i.NdfVJXIiW_-'1bvqw/MC[l[qk'+WgQ„U"he$_T8#Ib[o-.\Q<<\%mFM,m8iGqOr$X(:Oh%6A+Os^u'%B7O3'iWf%)[tNqm9X„U"lDf-Tag8Ej_U#a_O%sj#r_;,B6lea^%>>u,^LLROG/+XA)]CRplCsrK>_6(C;9%„U"iWPwrOVRSYuP-I)Lg^8elE*sV7AN6Aj5-]55M(T6s2+bV^GxB=$#?Gw]/<=$GLV„U"w4iN1O1qOL'mDp[okEC+saw+ndu;;$\YjE9.:5RRe\3V*\$lh#]9b'?_^[=C[c<„U"F5su&g1cT^9[V^*17Do5hydSFl5Ctn2GRQ8s;vT10S??F0+MTHITwtKZ0SU*B]-„U"NJhlHS4$S[=ti$+f>]2BzFncxrF((7U7m:tF1DGgOHRSp[gAeQPQX(D9:)tH7Y'„U"U%up%&'9%%9%'%#-%B-&\RNN+>F]/.%%a?%%%1%%%%%%%%%&%%E%%%%%%%%%fqn„U"y%jwfy%Sgfx%up&'%9%9%%'%-%1M-\RA*e*5%w=%%&5n%%%-%%%%%%%%%&%E%.%„U"%1/%%%wt%tkSg%fxup%*+%%%%%'%.'%?%7%%SG%%%%%„END SUB„CLOSE:IF S=223AND B&=9056THEN?" :) Ok!"ELSE?" :( Bad!„SUB U(A$):FOR A=1TO LEN(A$):C=ASC(MID$(A$,A))-37:IF C<0THEN C=91+C*32„IF K<4THEN K=C+243ELSE?#1,CHR$(C+(K MOD 3)*86);:K=K\3:B&=B&+1„S=(S+C)AND 255:NEXT:LOCATE,1:?STRING$(B&*50\9056,219);:END SUB„'>>> Page 1 of ALITERAT.ZIP ends here. Last page. TCHK:223„David Williams                 TV Satellite Location          david.williams@ablelink.org    12-15-02 (  :  )       Qbasic,QB,PDS          314  7149     TVsat.bas   ' TV_SATS.BAS „' TV Satellites, Commodore PET version, David Williams, 1982 „  „' david.williams@ablelink.org „  „' Updated for other computers 1995, 2000, 2002 „' This version dated 2002 Nov. 01 „  „DECLARE SUB InNum (Pt$, V, MX%, CFlag%) „DECLARE FUNCTION YesNo$ () „DECLARE FUNCTION ROff$ (J, P%) „DECLARE SUB Instructions () „DECLARE SUB Spacebar () „  „CONST R = 6.615 „' Radius of geosynchronous orbit in units of earth radius „CONST PI = 3.141593 „CONST CF = PI / 180  ' Degree/radian factor „  „ON ERROR GOTO Etrap „F% = FREEFILE „N$ = "TVSATDAT.DAT" „E% = 0 „OPEN N$ FOR INPUT AS F% „  „IF E% THEN „  CFlag% = 1 „  „  LA = 45   ') „  LO = 80   ') initial default latitude and longitudes „  LS = 90   ') „  „ELSE „  INPUT #F%, LA, LO, LS „  CFlag% = 0 „  „END IF „  „CLOSE F% „  „ON ERROR GOTO 0 „  „CLS „PRINT "Do you want instructions"; „IF YesNo$ = "y" THEN CALL Instructions „  „Newcalc: „  „' Input section „  „CLS „PRINT "For your current position on the ground:" „PRINT "Latitude is"; ROff$(LA, -2); "degrees north." „PRINT "Longitude is"; ROff$(LO, -2); "degrees west." „PRINT „PRINT "Keep these values"; „  „IF YesNo$ = "n" THEN „  „    PRINT "Input latitude and longitude in degrees." „    PRINT "Use negative numbers for angles in" „    PRINT "opposite directions to those shown." „    PRINT „  „    InNum "Your latitude (deg. north)", LA, 90, CFlag% „  „    InNum "Your longitude (deg. west)", LO, 180, CFlag% „  „END IF „  „LT = LA „LG = LO „  „PRINT "For current satellite:" „PRINT "Longitude is"; ROff$(LS, -2); "degrees west." „PRINT „PRINT "Keep this value"; „  „IF YesNo$ = "n" THEN „  „  PRINT "Input longitude of satellite in" „  PRINT "degrees west. (Use negative number" „  PRINT "if you want to input degrees east.)" „  PRINT „  „  InNum "Satellite's longitude", LS, 180, CFlag% „  „END IF „  „LD = LG - LS ' longitude difference „LT = 90 + LT ' latitude from s. pole „LT = CF * LT ' latitude in radians „LD = CF * LD ' longitude diff. in radians „  „' satellite's x,y,z coordinates „Y = 0 ' equatorial orbit „X = R * SIN(LD) „Z = R * COS(LD) „  „' rotate system to put observer at s. pole „D = ABS(Z) ' distance from x-axis „AN = SGN(Z) * PI / 2 „' azimuth angle onto y-z plane (y-axis as zero) „AN = AN + LT ' rotate system „Y = D * COS(AN) ' new y „Z = D * SIN(AN) ' new z „  „IF Y > -1 THEN „  „  PRINT "Satellite is invisible (below horizon)." „  „ELSE „  „  ' calculate altitude „  „  IF X = 0 AND Z = 0 THEN „    AL = PI / 2 „  ELSE „    AL = ATN((-1 - Y) / SQR(X * X + Z * Z)) „  END IF „  „  AL = AL / CF ' alt. in degrees „  A$ = ROff$(AL, 1) „  „  IF VAL(A$) = 90 THEN „  „     PRINT "Satellite is vertically overhead." „     PRINT "(Altitude is 90.0 degrees.)" „  „  ELSE „  „    ' calculate new bearing „  „    IF Z = 0 THEN „      BE = SGN(X) * PI / 2 „    ELSE „      BE = ATN(X / Z) „      IF Z < 0 THEN BE = BE + PI „    END IF „  „    BE = BE / CF ' bearing in degrees „  „    ' roundoff and printout „  „    BE = VAL(ROff$(BE, 1)) „    BE = BE - 360 * INT(BE / 360) „  „    PRINT "Satellite's position:" „    PRINT „  „    B$ = ROff$(BE, 1) „    BE = VAL(B$) „  „    PRINT "Bearing is"; B$; "degrees." „  „    X = BE / 90 „    IF X = INT(X) THEN „      Y1$ = RTRIM$(MID$("NorthEast SouthWest", 5 * X + 1, 5)) „      PRINT "(Due "; Y1$; ")" „    ELSE „      Z = ABS(180 - BE) „      IF Z < 90 THEN „        Y1$ = "(South," „      ELSE „        Y1$ = "(North," „        Z = 180 - Z „      END IF „      IF X < 2 THEN „        Y2$ = "East)" „      ELSE „        Y2$ = "West)" „      END IF „      PRINT Y1$; ROff$(Z, 1); "degrees "; Y2$ „    END IF „  „    PRINT „    PRINT "Altitude is"; A$; "degrees." „    IF AL < 5 THEN „      PRINT „      PRINT "Very low altitude - Communication unreliable" „    END IF „  „  END IF „  „END IF „  „PRINT „  „PRINT "Another calculation"; „  „IF YesNo$ = "y" GOTO Newcalc „  „IF CFlag% THEN „  PRINT "Keep current latitude & longitudes for next run"; „  IF YesNo$ = "y" THEN „    ON ERROR GOTO Etrap „    E% = 0 „    OPEN N$ FOR OUTPUT AS F% „    IF E% = 0 THEN PRINT #F%, LA; ","; LO; ","; LS „    CLOSE F% „    ON ERROR GOTO 0 „  END IF „END IF „  „END „  „Etrap: „  E% = 1 „  RESUME NEXT „  „  „SUB InNum (Pt$, V, MX%, CFlag%) „  „ DO „  „   PRINT Pt$; " (or ENTER for no change)? "; „   LINE INPUT IN$ „   PRINT „   IF IN$ = "" THEN „     PRINT "Value unchanged" „     PRINT „     EXIT DO „   END IF „   W = VAL(IN$) „   IF ABS(W) <= MX% AND INSTR(IN$, ",") = 0 THEN „     IF W <> V THEN „       V = W „       CFlag% = 1 „     END IF „     EXIT DO „   END IF „   BEEP „   M$ = LTRIM$(STR$(MX%)) „   PRINT "Input illegal or out of range! (-"; M$; " to "; M$; ")" „   PRINT "Try again..." „   PRINT „  „ LOOP „  „END SUB „  „SUB Instructions „  „   CLS „   PRINT "This program calculates the position in the sky, as true" „   PRINT "compass bearing and altitude (or angle of elevation), of" „   PRINT "any satellite that is in geostationary orbit. (Almost all" „   PRINT "T.V. broadcasting and relay satellites are geostationary.)" „   PRINT „   PRINT "You will be asked for your latitude and longitude, and for" „   PRINT "the longitude of the satellite. Enter these quantities, in" „   PRINT "degrees, accurate to at least one place of decimals (0.1" „   PRINT "degree) if possible. Errors greater than 0.1 degree will" „   PRINT "cause significantly inaccurate calculated results. It is" „   PRINT "a good idea to use a G.P.S. receiver to find your own" „   PRINT "latitude and longitude." „   PRINT „   PRINT "Note that the bearings are true. If you want a magnetic" „   PRINT "bearing, look up the local magnetic deviation. To find" „   PRINT "the magnetic bearing, add the deviation to the true" „   PRINT "bearing if magnetic north is west of true north. Subtract" „   PRINT "the deviation if magnetic north is east of true north." „   PRINT „   PRINT "Your entries of latitude and longitudes can be kept on disk" „   PRINT "and used in subsequent runs. Initially, arbitary defaults" „   PRINT "are used." „  „   CALL Spacebar „  „END SUB „  „FUNCTION ROff$ (J, P%) „  F% = ABS(P%) „  H& = INT(10 ^ F% * J + .5) „  IF H& < 0 THEN M$ = " -" ELSE M$ = " " „  S$ = LTRIM$(STR$(ABS(H&))) „  L% = LEN(S$) „  IF L% < F% + 1 THEN „    S$ = STRING$(F% + 1 - L%, "0") + S$ „    L% = F% + 1 „  END IF „  T$ = "." + RIGHT$(S$, F%) „  IF P% <= 0 THEN „    DO WHILE RIGHT$(T$, 1) = "0" „      T$ = LEFT$(T$, LEN(T$) - 1) „    LOOP „    IF T$ = "." THEN T$ = "" „  END IF „  ROff$ = M$ + LEFT$(S$, L% - F%) + T$ + " " „END FUNCTION „  „SUB Spacebar „  „  PRINT „  PRINT "Press Space Bar to continue"; „  „  DO WHILE INKEY$ <> " " „  LOOP „  „END SUB „  „FUNCTION YesNo$ „  „   PRINT "? (y/n) "; „   DO WHILE INKEY$ <> "" „   LOOP „   DO „     G$ = LCASE$(INKEY$) „   LOOP UNTIL G$ = "y" OR G$ = "n" „   PRINT G$ „   PRINT „   YesNo$ = G$ „  „END FUNCTION „Paul O. Bartlett               CipherSaber                    bartlett@smart.net             12-15-02 (  :  )       Qbasic,QB,PDS          112  4081     Ivtest.bas  '                                                                             „*„' IVTEST.BAS: Test CipherSaber Initialization Vectors                         „*„'                                                                             „*„' Author: Paul O. Bartlett bartlett@smart.net„*„' Codes: QBasic, QuickBasic 4.5 (tested), PDS                                 „*„' Version: 1.1                                                                „*„' Last update: 2002-08-26                                                     „*„'                                                                             „*„'-----------------------------------------------------------------------------*„'                                                                             „*„' CipherSaber and CipherSaber-2 encryption/decryption by Arnold „Reinhold      *„' are based on the RC-4 cipher by Ron Rivest.  In the CipherSaber „implemen-   *„' tation, every encrypted file has a uniquely generated Initialization        „*„' Vector (IV) in the first ten bytes.  For any set of files encrypted „with    *„' the same passphrase, it is absolutely critical that every IV be „unique.     *„' If two files encrypted with the same passphrase have the same IV, „then the  *„' way is wide open to cryptanalytic attack.                                   „*„'                                                                             „*„' This little quick and dirty program determines whether or not the IVs „of a  *„' set of encrypted files are unique.  To use it, just create a text „file with *„' any editor.  Each line of the file specifies one file whose IV is to „be     *„' tested.  Create every line of the test file thus:                           „*„'                                                                             „*„' drive:\<path>\filename.ext                                                  „*„'                                                                             „*„' Save the text file under any convenient name and run IVTEST.BAS.  At „the    *„' prompt, give it the full pathname to the text file, and the program „will    *„' determine whether the IVs are unique, and if not will tell you which „files  *„' have duplicate IVs.                                                         „*„'                                                                             „*„' The statements commented out can be used for manual checking: they „just     *„' generate a humanly-readable file with filenames and Initialization „Vectors  *„' in displayable hexadecimal.                                                 „*„'                                                                             „*„'******************************************************************************„'„DEFINT A-Z„DIM IV(1 TO 99) AS STRING * 10  ' <== Increase for testing >99 files„INPUT "File list: ", filelist$„filelist$ = UCASE$(filelist$)„testfile = FREEFILE„OPEN filelist$ FOR INPUT AS #testfile„' outfile = FREEFILE„' OPEN "C:\PERSONAL\LIST.IVS" FOR OUTPUT AS #outfile  ' <== Change as „needed„filenum = 0„WHILE NOT EOF(testfile)„    filenum = filenum + 1„    LINE INPUT #testfile, filename$„    filename$ = UCASE$(filename$)„    nextfile = FREEFILE„    OPEN filename$ FOR BINARY AS #nextfile„        IV(filenum) = INPUT$(10, #nextfile)„    CLOSE #nextfile„    ' PRINT #outfile, RIGHT$("0" + STR$(filenum), 2) + " : ";„    ' FOR i = 1 TO 10„    '     PRINT #outfile, RIGHT$("0" + HEX$(ASC(MID$(IV(filenum), i, „1))), 2);„    ' NEXT i„    ' PRINT #outfile, " " + filename$„WEND„CLOSE #testfile„' CLOSE #outfile„found$ = "false"„x = filenum - 1„FOR i = 1 TO x„    start = i + 1„    FOR j = start TO filenum„        IF IV(i) = IV(j) THEN„            PRINT "File" + STR$(i) + " has same IV as file" + STR$(j) + „"."„            found$ = "true"„        END IF„    NEXT j„NEXT i„IF found$ = "false" THEN„    PRINT "All Initialization Vectors are unique."„END IF„SYSTEM„