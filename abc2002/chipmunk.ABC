Ben Sharvy                     Syllogism                      luvnpeas99@yahoo.com           12-11-02 (  :  )       chipmonk,metal         833  29718    syllogism1.b1 rem Syllogism 1.0. November 8, 2002ã2 rem I edited this program in 2002, for compatibility with freeware BASICã4 rem interpreters for the Mac: Chipmunk BASIC 3.5.7 and Metal BASIC 1.7.3. ã6 rem I hope compatibility with two indpendently developed BASICs shouldã8 rem assure some universality regardless of platform. The followingã10 rem notes should help anybody with a similar project.ã12 rem Summary of changes.....ã14 rem * Metal doesn't support PRINT TAB(N). It supports the command HTAB, but aã16 rem bug makes it useless for formatting more than one column of text. The onlyã18 rem standard BASIC solution is the " " character, implemented with tb$ and Left$()ã20 rem * Metal doesn't support MID$() as a command. Both support LCASE$().ã22 rem * Metal crashes when it reads an empty ("") DATA item. Had to hack it.ã24 rem * Metal requires ; between PRINT items. Also, it doesn't add a spaceã26 rem when the ; separates a number and a string.ã28 rem Chipmunk buggy with IF...ELSE on one line--use colons (and GOTOs)ã30 rem Chipmunk requires quotes around DATA itemsã32 rem Chipmunk buggy when using integer variables (J%), use floating point (J)ã34 rem Neither support PRINT CHR$(27) as a way to clear the screen; used clsã36 rem Peace. Ben Sharvy. luvnpeas99@yahoo.comã100 rem Metal doesn't support PRINT TAB(N)...ã102 tb$ = "                                                  "ã110 cls : print "Syllogism Program Copyright (c) 1988 Richard Sharvy"ã112 print "Syllogism 1.0 (c) 2002 Richard Sharvy's estate"ã113 print "Ben Sharvy: luvnpeas99@yahoo.com or bsharvy@efn.org" : printã480 dim a(63),c(63),d(63),g(63),l(63),n(63),o(63),p(63),q(63)ã490 dim r(63),b(63),k(63),j(4),t(7),e(2),h(2)ã500 dim a$(3),l$(63),t$(65)ã510 dim g$(2),s$(6),w$(2),x$(7),y$(7),z$(7)ã520 read a$(1),a$(2),a$(3),g$(0),g$(1),g$(2)ã530 data "a ","an ","sm ","undetermined type","general term","designator"ã550 for i = 0 to 7ã551 read x$(i),y$(i),z$(i)ã552 rem Metal crashes when "" is in DATA statement...ã554 if x$(i) = "<null>" then x$(i) = ""ã555 if y$(i) = "<null>" then y$(i) = ""ã556 if z$(i) = "<null>" then z$(i) = ""ã560 next iã570 data "some","  is","<null>","some","  is not","*"ã580 data "all","*  is","<null>","no","*  is","*"ã590 data "<null>","+  is","<null>","<null>","+  is not","*"ã600 data "<null>","+  = ","+","<null>","+   = / = ","*"ã602 rem /error check/ for err = 0 to 7 : print x$(err),y$(err),z$(err) : next errã740 dim u$(75),v$(75)ã760 i = 0ã770 i = i+1ã771  read u$(i),v$(i)ã780  if u$(i) <> "ZZZZZ" then 770ã790 u1 = i-1ã820 data "socrates","socrates","parmenides","parmenides","epimenides","epimenides"ã840 data "mice","mouse","lice","louse","geese","goose"ã850 data "children","child","oxen","ox","people","person","teeth","tooth"ã860 data "wolves","wolf","wives","wife","selves","self","lives","life","leaves","leaf"ã870 data "shelves","shelf","elves","elf","dwarves","dwarf","knives","knife","thieves","thief"ã880 data "neckties","necktie","hippies","hippie","yippies","yippie","yuppies","yuppie"ã890 data "moonies","moonie","druggies","druggie","cookies","cookie","commies","commie"ã891 data "groupies","groupie","tomatoes","tomato"ã910 data "alcibiades","alcibiades","thales","thales","aries","aries","athens","athens"ã920 data "species","species","feces","feces","geniuses","genius","sorites","sorites"ã930 data "crises","crisis","emphases","emphasis","memoranda","memorandum","theses","thesis"ã940 data "automata","automaton","formulae","formula","stigmata","stigma","lemmata","lemma"ã950 data "vertices","vertex","vortices","vortex","indices","index","codices","codex"ã960 data "matrices","matrix"ã970 data "gasses","gas","gases","gas","buses","bus","aches","ache","headaches","headache"ã980 data "grits","grits","molasses","molasses","gas","gas","christmas","christmas"ã990 data "mathematics","mathematics","semantics","semantics","physics","physics"ã1000 data "metaphysics","metaphysics","ethics","ethics","linguistics","linguistics"ã1010 data "kiwis","kiwi","israelis","israeli"ã1020 data "goyim","goy","seraphim","seraph","cherubim","cherub"ã1025 data "semen","semen","amen","amen"ã1030 data "ZZZZZ","ZZZZZ"ã1050 msg = -1 : a(0) = 1 : for i = 1 to 63 : a(i) = i : next iã1070 if msg then print "Enter HELP for list of commands"ã1080 rem---Input line---ã1085 print ">";ã1090 line input l1$ã1100 l = len(l1$)ã1110 if l = 0 then 1070ã1120 l2$ = right$(l1$,1)ã1121  if l2$ = " " then 1160ã1130   if l2$ <> "." and l2$ <> "?" and l2$ <> "!" then 1181ã1140   print left$(tb$,l);" ^   Punctuation mark ignored"ã1160  if l = 1 then 1080ã1165  l = l-1 : l1$ = left$(l1$,l) : goto 1120ã1181 if left$(l1$,1) <> " " then 1190ã1182  if l = 1 then 1080ã1184  l = l-1 : l1$ = right$(l1$,l) : goto 1181ã1190 rem / FOR I = 1 TO Lã1191  rem / V = ASC(MID$(L1$,I,1))ã1192  rem / IF V >= 65 AND V <= 90  THEN  MID$(L1$,I,1) = CHR$(V+32)ã1193  rem / NEXTã1194 rem Metal doesn't support mid$ as command, but lcase$() is well supported...ã1195 l1$ = lcase$(l1$)ã1220 if l1$ <> "stop" then 1230ã1223  if msg then print "(Some versions support typing CONT to continue)"ã1224 stopã1227  goto 1080ã1230 if l1$ <> "new" then 1270ã1240  print "Begin new syllogism"ã1250  gosub 1840ã1260  goto 1080ã1270 if l1$ <> "sample" then 1310ã1280  gosub 1840ã1290  gosub 8980ã1300  goto 1080ã1310 if l1$ <> "help" then 1340ã1320  gosub 7660ã1330  goto 1080ã1340 if l1$ <> "syntax" then 1370ã1350  gosub 7960ã1360  goto 1080ã1370 if l1$ <> "info" then 1430ã1380  gosub 8290ã1390  goto 1080ã1430 if l1$ <> "dump" then 1460ã1440  gosub 8890ã1450  goto 1080ã1460 if l1$ <> "msg" then 1500ã1465  msg = not (msg)ã1470  print "Messages turned ";ã1475  if msg then print "on" : else print "off"ã1480  goto 1080ã1500 if l1$ <> "substitute" then 1540ã1510  if l(0) = 0 then 1612ã1520  gosub 9060ã1530  goto 1080ã1540 if l1$ <> "link" and l1$ <> "link*" then 1561ã1545  if l(0) = 0 then 1612ã1550  gosub 5070ã1560  goto 1080ã1561 if l1$ <> "list" and l1$ <> "list*" then 1570ã1562  if l(0) = 0 then 1612ã1563  gosub 7460ã1564  goto 1080ã1570 rem--scan line L1$ into array S$()ã1575 gosub 2020ã1580 if t(1) <> 1 then 1745ã1600  if t(2) then 1640ã1610   if l(0) then 1620ã1612    print "No premises" : goto 1080ã1620   gosub 4760 : rem delete lineã1630   goto 1080ã1640  gosub 2890 : rem parse the line in S$()ã1650  if d1 < 0 then 1080ã1660  gosub 4530 : rem enter line into listã1670  gosub 3400 : rem add terms to symbol tableã1680  goto 1080ã1745 if t(1) = 0 then 1070ã1750 rem draw/test conclusionã1755 gosub 5070 : rem is it a syl?ã1760 if j1 > 1 then 1080ã1770 if j1 = 0 then gosub 5880 : rem poss. conclusion?ã1810  if j1 > 1 then 1080ã1820  if t(2) then gosub 6630 : else gosub 6200 : rem test/draw conclusionã1830 goto 1080ã1840 rem---New---ã1850 if l(0) = 0 then 2010ã1860 for i = 1 to l1ã1870  d(i) = 0 : t$(i) = "" : b(i) = 0 : o(i) = 0 : g(i) = 0ã1920  next iã1930 l1 = 0 : n1 = 0ã1950 j = l(0)ã1960 a(0) = a(0)-1ã1970  a(a(0)) = jã1980  j = l(j)ã1990  if j > 0 then 1960ã2000 l(0) = 0ã2010 returnã2020 rem---L1$ into array S$()---ã2030 rem T(): 1:line num., 2:"/", 3:quantifier, 4:no/not, 5:is/are, 6:termã2040 rem                     10 SOME  FRIED COCONUTS   ARE  NOT  TASTYã2050 rem                      1   3        6            5    4     6ã2080 for j = 1 to 6 : s$(j) = "" : t(j) = 0 : next jã2120 p1 = 0 : e(2) = 0 : j = 1 : i = 1ã2160 l = len(l1$)ã2180 if i > l then 2885ã2190  s$ = mid$(l1$,i,1)ã2200  if s$ = " " then i = i+1 : goto 2180ã2230 k = 1ã2240 if i+k > l then 2290ã2250  s$ = mid$(l1$,i+k,1)ã2260  if s$ <> " " then k = k+1 : goto 2240ã2290 s$ = mid$(l1$,i,k) : rem S$ is set to next wordã2310 if j > 1 then 2520ã2320  if s$ <> "/" then 2400ã2360  t(1) = 2ã2370  goto 2840ã2400 n = len(s$)ã2410 if n > 4 then 2460ã2420  n = 1ã2430  t$ = mid$(s$,n,1)ã2440  if asc(t$) <= 57 and asc(t$) >= 48 then 2480ã2460   print left$(tb$,i+n);"^   Invalid numeral or command"ã2470   goto 2885ã2480  n = n+1ã2490  if n <= len(s$) then 2430ã2500 t(1) = 1ã2510 goto 2840ã2520 rem Scanã2525 if s$ = "somebody" or s$ = "something" or s$ = "nobody" or s$ = "nothing" then 2670ã2527 if s$ = "someone" or s$ = "everyone" or s$ = "everybody" or s$ = "everything" then 2670ã2530 if s$ <> "all" and s$ <> "some" then 2570ã2540  if t(j) = 6 then 2670ã2550  t(j) = 3ã2560  goto 2840ã2570 if s$ <> "no" and s$ <> "not" then 2610ã2580  if t(j) = 6 then 2670ã2590  t(j) = 4ã2600  goto 2840ã2610 if s$ <> "is" and s$ <> "are" then 2710ã2620  if t(j) <> 6 then 2670ã2630  if t(j-1) = 5 or t(j-2) = 5 then 2670ã2640   j = j+1ã2650   t(j) = 5ã2660   goto 2840ã2670  print left$(tb$,i+k-1);"^"ã2680  print "Reserved word '";s$;"' may not occur within a term"ã2690  t(1) = 0ã2700  goto 2885ã2710 if t(j) = 6 then 2820ã2720 if t(j-1) <> 5 and t(j-2) <> 5 then 2790ã2730 if s$ <> "a" and s$ <> "an" and s$ <> "sm" then 2780ã2740  if i = l then 2790ã2750  if s$ = "a" then e(2) = 1 :  else if s$ = "an" then e(2) = 2 :  else e(2) = 3ã2760  p1 = 1ã2770  goto 2860ã2780 if s$ = "the" then p1 = 2ã2790 s$(j) = s$ã2800 t(j) = 6ã2810 goto 2860ã2820 s$(j) = s$(j)+" "+s$ã2830 goto 2860ã2840 s$(j) = s$ã2850 j = j+1ã2860 i = k+iã2870 if j <= 6 then 2180ã2885 returnã2890 rem---Parse line in S$()---ã2900 d1 = -1ã2910 if s$(2) <> "all" then 2990ã2920  if t(3) <> 6 then 3350ã2930  if t(4) <> 5 then 3330ã2940  if t(5) <> 6 then 3370ã2950  w$(1) = s$(3)ã2960  w$(2) = s$(5)ã2970  d1 = 2 : rem all A is Bã2980  goto 3390ã2990 if s$(2) <> "some" then 3130ã3000  if t(3) <> 6 then 3350ã3010  if t(4) <> 5 then 3330ã3020  if s$(5) = "not" then 3080ã3030   if t(5) <> 6 then 3370ã3040   w$(1) = s$(3)ã3050   w$(2) = s$(5)ã3060   d1 = 0 : rem Some A is Bã3070   goto 3390ã3080  if t(6) <> 6 then 3370ã3090   w$(1) = s$(3)ã3100   w$(2) = s$(6)ã3110    d1 = 1 : rem some A is not Bã3120    goto 3390ã3130 if s$(2) <> "no" then 3210ã3140  if t(3) <> 6 then 3350ã3150  if t(4) <> 5 then 3330ã3160  if t(5) <> 6 then 3370ã3170  w$(1) = s$(3)ã3180  w$(2) = s$(5)ã3190  d1 = 3 : rem no A is Bã3200  goto 3390ã3210 if t(2) <> 6 then 3350ã3220 if t(3) <> 5 then 3330ã3230 w$(1) = s$(2)ã3240 if s$(4) = "not" then 3290ã3250  if t(4) <> 6 then 3370ã3260  d1 = 4 : rem a is Tã3270  w$(2) = s$(4)ã3280  goto 3390ã3290 if t(5) <> 6 then 3370ã3300  d1 = 5 : rem a is not Tã3310  w$(2) = s$(5)ã3320  goto 3390ã3330 print "** Missing copula is/are"ã3340 goto 3380ã3350 print "** Subject term bad or missing"ã3360 goto 3380ã3370 print "** Predicate term bad or missing"ã3380 if msg then print "Enter SYNTAX for help with statements"ã3390 returnã3400 rem---Add W$(1), W$(2) to table T$()---ã3410 if (d1 mod 2) = 0 then 3440ã3420  n1 = n1+1ã3430  if n1 > 1 and msg then print "Warning: ";n1;" negative premises"ã3440 e(1) = 0ã3450 for j = 1 to 2ã3460 w$ = w$(j)ã3470 if d1 < 4 then g = 1 :  else if j = 1 then g = 2 :  else g = p1ã3480 gosub 4040ã3490 i1 = 1ã3500 gosub 3950ã3510 if i1 <= l1 then 3550ã3520  if b1 > 0 then i1 = b1 : else l1 = l1+1ã3530  t$(i1) = w$ã3540  goto 3720ã3550 if g = 0 then 3660ã3570 if g(i1) = 0 then 3620ã3580 if g = g(i1) then 3730ã3590  if not msg then 3600ã3592   print "Warning: ";g$(g);" '";w$;"' has also occurred as a ";g$(3-g)ã3600  i1 = i1+1ã3610 goto 3500ã3620 if not msg then 3710ã3630  print "Note: earlier use of '";w$;"' taken as the ";g$(g);" used here"ã3640 goto 3710ã3660 if g(i1) = 0 and  not msg then 3730ã3670  print "Note: predicate term '";w$;"'";ã3680  print " taken as the ";g$(g(i1));" used earlier"ã3690 goto 3730ã3710 if g = 2 then d(i1) = o(i1)ã3720 g(i1) = gã3730 if e(j) > 0 then 3770ã3740  if b(i1) > 0 or w$ = w$(j) then 3780ã3750   a$ = left$(w$,1)ã3760 if a$ = "a" or a$ = "e" or a$ = "i" or a$ = "o" or a$ = "u" then e(j) = 2 : else e(j) = 1ã3770   b(i1) = e(j)ã3780 o(i1) = o(i1)+1ã3790 if o(i1) < 3 then 3810ã3800 if not msg then 3810ã3805  print "Warning: ";g$(g(i1));" '";w$;"' has occurred";o(i1);"times"ã3810 if j = 2 then 3850ã3820  p(a1) = i1ã3830  if d1 >= 2 then d(i1) = d(i1)+1ã3840  goto 3900ã3850 q(a1) = i1ã3860  if p(a1) <> q(a1) then 3880ã3870   if msg then print "Warning: same term occurs twice in line ";s$(1)ã3880  if g(i1) = 2 then d1 = d1+2ã3890  if d1 = 6 or d1 mod 2 then d(i1) = d(i1)+1ã3900 if o(i1) <> 2 or d(i1) > 0 then 3920ã3910  if msg then print "Warning: undistributed middle term '";t$(i1);"'"ã3920 next jã3930 r(a1) = d1ã3940 returnã3950 rem---Search T$() for W$ from I1 to L1---ã3960 rem If found, I1 = L1; else I1 = L1+1. B1 set to 1st empty loc.ã3970 b1 = 0ã3980 if i1 > l1 then 4030ã3990 if t$(i1) = w$ then 4030ã4000  if o(i1) = 0 and b1 = 0 then b1 = i1ã4010  i1 = i1+1ã4020  goto 3980ã4030 returnã4040 rem---Convert W$ to singular---ã4050 l = len(w$)ã4060 if l < 4 then 4090ã4070  s$ = left$(w$,4)ã4080  if s$ = "the " then 4520ã4090 x$ = ""ã4100 i = 1ã4110 n = 1ã4120 if i > l then 4510ã4130  s$ = mid$(w$,i,1)ã4140  if s$ <> " " then 4170ã4150   i = i+1ã4160   goto 4120ã4170 m = 1ã4180 if i+m > l then 4230ã4190  s$ = mid$(w$,i+m,1)ã4200  if s$ = " " then 4230ã4210   m = m+1ã4220   goto 4180ã4230 s$ = mid$(w$,i,m)ã4240 y$ = s$ã4250 k = 1ã4260 if y$ <> u$(k) then 4290ã4270  y$ = v$(k)ã4280  goto 4470ã4290  k = k+1ã4291  if k <= u1 then 4260ã4302 if len(y$) < 3 then 4310ã4304  if right$(y$,3) <> "men" then 4310ã4306  y$ = left$(y$,len(y$)-2)+"an"ã4308  goto 4470ã4310 l$ = right$(y$,1)ã4320 if l$ <> "s" then 4470ã4330  if len(y$) > 1 then l$ = right$(y$,2) :  else goto 4470ã4340  if l$ = "ss" or l$ = "us" or l$ = "is" or l$ = "'s" then 4470ã4350   y$ = left$(y$,len(y$)-1)ã4360   if len(y$) > 1 then l$ = right$(y$,2) :  else goto 4470ã4370 if l$ <> "xe" then 4400ã4380  y$ = left$(y$,len(y$)-1)ã4390  goto 4470ã4400 if l$ <> "ie" or len(y$) <= 3 then 4440ã4410  y$ = left$(y$,len(y$)-2)ã4420  y$ = y$+"y"ã4430  goto 4470ã4440 if len(y$) > 2 then l$ = right$(y$,3) :  else goto 4470ã4450 if l$ <> "sse" and l$ <> "she" and l$ <> "che" then 4470ã4460  y$ = left$(y$,len(y$)-1)ã4470 if len(x$) = 0 then x$ = y$ :  else x$ = x$+" "+y$ã4480 n = n+1ã4490 i = m+iã4500 goto 4120ã4510 w$ = x$ã4520 returnã4530 rem---Enter line into list---ã4540 n = val(s$(1))ã4550 s = len(s$(1))+1ã4560 l = len(l1$)ã4570 l$ = mid$(l1$,s+1,l-s)ã4580 i = 0ã4590 j1 = l(i)ã4600 if j1 = 0 then 4690ã4610  if n <> n(j1) then 4660ã4620   gosub 4890ã4630   l$(j1) = l$ã4640   a1 = j1ã4650   goto 4750ã4660  if n < n(j1) then 4690ã4670   i = j1ã4680   goto 4590ã4690 a1 = a(a(0))ã4700 l$(a1) = l$ã4710 n(a1) = nã4720 l(i) = a1ã4730 l(a1) = j1ã4740 a(0) = a(0)+1ã4750 returnã4760 rem---Delete a line---ã4770 n = val(s$(1))ã4780 i = 0ã4790 j1 = l(i)ã4800  if j1 = 0 then print "Line ";n;" not found" : goto 4880ã4810   if n = n(j1) then 4840ã4820    i = l(i)ã4830    goto 4790ã4840   a(0) = a(0)-1ã4850   a(a(0)) = j1ã4860   l(i) = l(j1)ã4870   gosub 4890ã4880 returnã4890 rem---Decrement table entries---ã4900 j(1) = p(j1)ã4910 j(2) = q(j1)ã4920 if r(j1) mod 2 = 0 then 4960ã4930  n1 = n1-1ã4940  j(4) = 1ã4950  goto 4970ã4960 if g(q(j1)) = 2 then j(4) = 1 : else j(4) = 0ã4970 if r(j1) >= 2 then j(3) = 1 : else j(3) = 0ã4980 for k = 1 to 2ã4990  o(j(k)) = o(j(k))-1ã5000  if o(j(k)) > 0 then 5040ã5010   t$(j(k)) = ""ã5020   b(j(k)) = 0ã5030   g(j(k)) = 0ã5040  d(j(k)) = d(j(k))-j(k+2)ã5050  next kã5060 returnã5070 rem---See if syllogism---ã5080 j1 = 0ã5090 v1 = 0 : rem flag for modern validityã5100 if l(0) then 5140ã5120  j1 = 1 : goto 5870ã5140 c = 0ã5150 for i = 1 to l1ã5160  if o(i) = 0 or o(i) = 2 then 5250ã5170   if o(i) <> 1 then 5210ã5180    c = c+1ã5190    c(c) = iã5200    goto 5250ã5210   if j1 = 2 then 5240ã5220    print "Not a syllogism:"ã5230    j1 = 2ã5240   print "   ";g$(g(i));" '";t$(i);"' occurs ";o(i);" times in premises."ã5250  next iã5260 if c = 2 then 5360ã5270  print "Not a syllogism:"ã5280  j1 = 3ã5290  if c > 0 then 5320ã5300   print "   no terms occur exactly once in premises."ã5310   goto 5360ã5320  print "   ";c;" terms occur exactly once in premises."ã5330 for i = 1 to cã5340  print left$(tb$,6);t$(c(i));" -- ";g$(g(c(i)))ã5350  next iã5360 if j1 then 5870ã5370 i = l(0)ã5380 l = 0ã5390  l = l+1ã5400  k(l) = iã5410  i = l(i)ã5420  if i then 5390ã5430 if l = 1 then 5750ã5440 if d(c(1)) = 0 and d(c(2)) = 1 then t = c(2) : else t = c(1)ã5450 i = 1ã5460 k = iã5470  if p(k(k)) <> t then 5500ã5480   t = q(k(k))ã5490   goto 5520ã5500  if q(k(k)) <> t then 5620ã5510   t = p(k(k))ã5520   if k = i then 5610ã5530    n = 1ã5540    h(1) = k(i)ã5550    for m = i to k-1ã5560     n = 3-nã5570     h(n) = k(m+1)ã5580     k(m+1) = h(3-n)ã5590     next mã5600    k(i) = h(n)ã5610   if j1 then 5710 : else goto 5730ã5620  k = k+1ã5630  if k <= l then 5470ã5640  t = q(k(i))ã5650  if j1 > 0 then 5700ã5660   j1 = 4ã5670   print "Not a syllogism: no way to order premises so that each premise"ã5690   print "shares exactly one term with its successor; there is a"ã5700   print "closed loop in the term chain within the premise set--"ã5710   print n(k(i));ã5720   print l$(k(i))ã5730   i = i+1ã5740   if i <= l then 5460ã5750 if j1 > 0 then 5870ã5760 if l1$ <> "link" and l1$ <> "link*" then 5870ã5770  print "Premises of syllogism in order of term links:"ã5780  for i = 1 to lã5790   print n(k(i));" ";ã5800    if l1$ = "link" then 5850ã5810    if r(k(i)) < 6 and g(q(k(i))) = 2 then r(k(i)) = r(k(i))+2ã5820    if r(k(i)) < 4 then print x$(r(k(i)));"  ";ã5830    print t$(p(k(i)));y$(r(k(i)));"  ";t$(q(k(i)));z$(r(k(i)))ã5840    goto 5860ã5850    print l$(k(i))ã5860  next iã5870 returnã5880 rem---See if conclusion possible---ã5890 c1 = c(1)ã5900 c2 = c(2)ã5910 for i = 1 to l1ã5920  if o(i) < 2 then 6000ã5930   if d(i) > 0 then 5980ã5940    if j1 > 0 then 5970ã5950     print "Undistributed middle terms:"ã5960     j1 = 5ã5970    print left$(tb$,5);t$(i)ã5980   if d(i) = 1 or g(i) = 2 then 6000ã5990    v1 = iã6000  next iã6010 if n1 < 2 then 6040ã6020  j1 = 6ã6030  print "More than one negative premise:"ã6040 if j1 > 0 then 6180ã6050 if n1 = 0 then 6190ã6060 if d(c1) > 0 or d(c2) > 0 then 6100ã6070  print "Terms '";t$(c1);"' and '";t$(c2);"',";" one of which is"ã6090  goto 6150ã6100 if d(c1) > 0 or g(c2) < 2 then 6130ã6110  print "Term '";t$(c1);"'"ã6120  goto 6150ã6130 if d(c2) > 0 or g(c1) < 2 then 6190ã6140  print "Term '";t$(c2);"'"ã6150 print "required in predicate of negative conclusion"ã6160 print "not distributed in the premises."ã6170 j1 = 7ã6180 print "No possible conclusion."ã6190 returnã6200 rem---Compute conclusion---ã6201 if l(0) = 0 then z$ = "A is A" : goto 6580ã6210 if n1 = 0 then 6400ã6220 rem negative conclusionã6230 if d(c2) > 0 then 6260ã6240  z$ = "Some "+t$(c2)+" is not "+a$(b(c1))+t$(c1)ã6250  goto 6390ã6260 if d(c1) > 0 then 6290ã6270  z$ = "Some "+t$(c1)+" is not "+a$(b(c2))+t$(c2)ã6280  goto 6390ã6290 if g(c1) < 2 then 6320ã6300  z$ = t$(c1)+" is not "+a$(b(c2))+t$(c2)ã6310  goto 6390ã6320 if g(c2) < 2 then 6350ã6330  z$ = t$(c2)+" is not "+a$(b(c1))+t$(c1)ã6340  goto 6390ã6350 if b(c1) > 0 or b(c2) = 0 then 6380ã6360  z$ = "No "+t$(c2)+" is "+a$(b(c1))+t$(c1)ã6370  goto 6390ã6380  z$ = "No "+t$(c1)+" is "+a$(b(c2))+t$(c2)ã6390 goto 6570ã6400 rem affirmative conclusionã6410 if d(c1) = 0 then 6470ã6420  if g(c1) = 2 then 6450ã6430   z$ = "All "+t$(c1)+" is "+t$(c2)ã6440   goto 6570ã6450   z$ = t$(c1)+" is "+a$(b(c2))+t$(c2)ã6460   goto 6570ã6470 if d(c2) = 0 then 6530ã6480  if g(c2) = 2 then 6510ã6490   z$ = "All "+t$(c2)+" is "+t$(c1)ã6500   goto 6570ã6510   z$ = t$(c2)+" is "+a$(b(c1))+t$(c1)ã6520   goto 6570ã6530 if b(c1) > 0 or b(c2) = 0 then 6560ã6540  z$ = "Some "+t$(c2)+" is "+a$(b(c1))+t$(c1)ã6550  goto 6570ã6560  z$ = "Some "+t$(c1)+" is "+a$(b(c2))+t$(c2)ã6570 rem PRINT  conclusionã6580 print "  / ";z$ã6590 if v1 = 0 then 6620ã6600  print "  * Aristotle-valid only, i.e. on requirement that term ";ã6610  print "'";t$(v1);"' denotes."ã6620 returnã6630 rem---test offered conclusion---ã6640 rem--conc. poss, line in s$()ã6650 gosub 2890ã6660 if d1 < 0 then 7370ã6670 if d1 < 4 then g1 = 1 : g2 = 1 : else g1 = 2 : g2 = p1ã6690 if g2 = 2 and d1 < 6 and d1 > 3 then d1 = d1+2ã6700 w$ = w$(1)ã6710 gosub 4040ã6720 if j1 = 0 then 6750ã6730  w$(1) = w$ã6740  goto 6840ã6750 for j = 1 to 2ã6760  if w$ <> t$(c(j)) then 6810ã6770   if g(c(j)) > 0 then 6800ã6780    print "Note: '";t$(c(j));"' used in premises taken to be ";g$(g1)ã6790    goto 6840ã6800   if g1 = g(c(j)) then 6840ã6810  next jã6820 print "** Conclusion may not contain ";g$(g1);" '";w$;"'."ã6830 j = 0ã6840 w$ = w$(2)ã6850 gosub 4040ã6860 if j1 = 0 then 6940ã6870  if w$ = w$(1) then 6910ã6880   print "** Conclusion from no premises must have same subject and predic";ã6882    print "ate."ã6900   goto 7370ã6910  if d1 <> 4 or g2 = 0 then 7120ã6920   print "** Subject is a ";g$(2);", predicate is a ";g$(1);" -- but"ã6930   goto 6880ã6940 if j > 0 then 6970ã6950  if w$ = t$(c(1)) then t2 = c(2) : else t2 = c(1)ã6960  goto 7070ã6970 t1 = c(j)ã6980 t2 = c(3-j)ã6990 if w$ <> t$(t2) then 7060ã7000  if g(t2) > 0 then 7040ã7010   if g2 = 0 then 7090ã7020   print "Note: '";t$(t2);"' used in premises taken to be ";g$(g2)ã7030   goto 7090ã7040  if g2 = 0 then 7090ã7050  if g2 = g(t2) then 7090ã7060 print "** Conclusion may not contain ";g$(g2);" '";w$;"';"ã7070 print "** Conclusion must contain ";g$(g(t2));" '";t$(t2);"'."ã7080 goto 7370ã7090 if n1 = 0 or (d1 mod 2) = 1 then 7120ã7100  print "** Negative conclusion required."ã7110  goto 7370ã7120 if n1 > 0 or d1 mod 2 = 0 then 7150ã7130  print "** Affirmative conclusion required."ã7140  goto 7370ã7150 if j1 = 1 then 7250ã7160 if d(t1) > 0 or d1 <= 1 or d1 >= 4 then 7200ã7170  print "** Term '";t$(t1);"' not distributed in premises"ã7180  print "   may not be distributed in conclusion."ã7190  goto 7370ã7200 if d(t2) > 0 then 7250ã7210  if d1 mod 2 = 0 and d1 <> 6 then 7250ã7220  print "** Term '";t$(t2);"' not distributed in premises"ã7230  goto 7180ã7250 print "-->  VALID!"ã7260 if j1 = 0 then 7300ã7270  if d1 > 0 then 7370ã7280  t$(0) = w$ã7290  goto 7350ã7300 if d(t1) = 0 or d1 >= 2 then 7330ã7310  v1 = t1ã7320  goto 7350ã7330 if d(t2) > 0 and d1 mod 2 = 0 and d1 <> 4 and d1 <> 6 then v1 = t2ã7340 if v1 = 0 then 7370ã7350 print "    but on Aristotelian interpretation only, i.e. on requirement"ã7360 print "    that term '";t$(v1);"' denotes."ã7370 returnã7460 rem---list---ã7530 i = 0ã7540 i = l(i)ã7550 if i = 0 then 7650ã7570 print n(i);" ";ã7580 if l1$ = "list" then 7630ã7590  if r(i) < 6 and g(q(i)) = 2 then r(i) = r(i)+2ã7600  if r(i) < 4 then print x$(r(i));"  ";ã7610  print t$(p(i));y$(r(i));"  ";t$(q(i));z$(r(i))ã7620  goto 7540ã7630 print l$(i)ã7640 goto 7540ã7650 returnã7660 rem---List valid inputs---ã7670 cls : print "Valid commands are:"ã7680 print "   <n>  [ <statement> ]   Insert, delete, or replace premise number  <n> "ã7700 print left$(tb$,28);"Examples:   10  All men are mortal"ã7704 print left$(tb$,40);"10"ã7706 print "  DUMP";left$(tb$,15);"Prints symbol table, distribution count, etc."ã7707 print "  HELP";left$(tb$,15);"Prints this list"ã7708 print "  INFO";left$(tb$,15);"Gives information about syllogisms"ã7710 print "  LIST";left$(tb$,15);"Lists premises"ã7730 print "  LIST*";left$(tb$,14);"Same, but displays distribution analysis:"ã7750 print left$(tb$,25);"distributed positions marked with '*', "ã7760 print left$(tb$,25);"designators marked with '+'"ã7830 print "  LINK";left$(tb$,15);"Lists premises in order of term-links (if possible)"ã7850 print "  LINK*";left$(tb$,14);"Same, but in distribution-analysis format"ã7855 print "  MSG";left$(tb$,16);"Turns on/off Printing of certain messages and warnings"ã7860 print "  NEW";left$(tb$,16);"Erases current syllogism"ã7865 print "  SAMPLE";left$(tb$,13);"Erases current syllogism and enters sample syllogism"ã7867 print "  STOP";left$(tb$,15);"Stops entire program"ã7870 print "  SUBSTITUTE";left$(tb$,9);"Allows uniform substitution of new terms in ";ã7880 print "old premises"ã7900 print "  SYNTAX";left$(tb$,13);"Explains statement syntax, with examples"ã7943 print "  /";left$(tb$,18);"Asks program to draw conclusion"ã7946 print "  /  <statement>";left$(tb$,5);"Tests  <statement>  as conclusion"ã7948 print left$(tb$,25);"Note: this can be done even if there are no premises"ã7950 returnã7960 rem--"syntax"--ã7970 cls : print "Valid statement forms:"ã7980 print "  All    <general term #1>   is/are       <general term #2>"ã7990 print "  Some   <general term #1>   is/are       <general term #2>"ã8000 print "  Some   <general term #1>   is/are not   <general term #2>"ã8010 print "  No     <general term #1>   is/are       <general term #2>"ã8020 printã8030 print "   <designator>      is/are       <general term>"ã8040 print "   <designator>      is/are not   <general term>"ã8050 print "   <designator A>    is/are       <designator B>"ã8060 print "   <designator A>    is/are not   <designator B>" : printã8080 print "Examples:"ã8090 print "  All tall men are Greek gods             The teacher of Plato is wise"ã8110 print "  Some cheese is tasty                    Socrates is not handsome"ã8130 print "  Some cheese is not soft                 The teacher of Plato is Socrates"ã8150 print "  No libertarians are cringing wimps      Socrates is not the";ã8160 print " teacher of Thales"ã8170 printã8180 print "Since e.g. 'Socrates is grunch' is ambiguous ('grunch' could be"ã8190 print "either a designator or a general term), the program will try to"ã8200 print "resolve the ambiguity from other uses of the term in the syllogism."ã8210 print "The indefinite article 'sm' may be used with mass terms in predicates"ã8220 print "(e.g. 'This puddle is sm ink') to ensure that the mass term is taken"ã8230 print "as a general term rather than as a designator."ã8240 returnã8290 rem---Info---ã8293 cls : print "   To use this program, enter a syllogism, one line at a time,"ã8296 print "and  THEN  test conclusions or ask the program to draw a conclusion."ã8298 printã8300 print "   A syllogism as (mis)defined here is a (possibly empty) set of"ã8310 print "numbered premises, each of a form specified in the SYNTAX list."ã8320 print "No term may occur more than twice.  Exactly two terms must occur"ã8330 print "exactly once: these are the two 'end' terms, which will appear in"ã8340 print "the conclusion.  Furthermore, each premise must have exactly one"ã8350 print "term in common with its successor, for some ordering of the premises."ã8360 print "Example:"ã8370 print "   10 Socrates is a Greek"ã8380 print "   20 All men are mortal"ã8390 print "   30 All Greeks are men"ã8395 print "   40 No gods are mortal" : printã8400 print "Note: using a '/' command to draw or test a conclusion does not"ã8410 print "require you to stop.  You can continue, adding or deleting premises"ã8415 print "and drawing and testing more conclusions." : printã8420 print "Reference:  H. Gensler, 'A Simplified Decision Procedure for Categor-"ã8430 print "   ical Syllogisms,' Notre Dame J. of Formal Logic 14 (1973) 457-466."ã8440 returnã8890 rem---"Dump" values of variables---ã8900 print "Highest symbol table loc. used:";l1;"  Negative premises:";n1ã8910 if l1 = 0 then 8970ã8920 print "Adr. art. term";left$(tb$,48-14);"type       occurs    dist. count"ã8930 for i = 1 to l1ã8931 rem Metal's lack of tabbing gets difficult here...ã8932 itab = 7-len(str$(i))ã8933 astringtab = 11-len(a$(b(i)))-7ã8934 tstringtab = 49-len(t$(i))-11ã8935 gtab = 60-len(str$(g(i)))-49ã8936 otab = 71-len(str$(o(i)))-60ã8940  print i;left$(tb$,itab);a$(b(i));left$(tb$,astringtab);t$(i);left$(tb$,tstringtab);g(i);left$(tb$,gtab);ã8950  print o(i);left$(tb$,otab);d(i)ã8960  next iã8970 returnã8980 rem--sample--ã9001 for z8 = 1 to 10 : read l1$ : print l1$ã9002 gosub 2020 : gosub 2890 : gosub 4530 : gosub 3400ã9003 next z8ã9004 data "10 all mortals are fools"ã9005 data "20 all athenians are men"ã9006 data "30 all philosophers are geniuses"ã9007 data "40 all people with good taste are philosophers"ã9008 data "50 richter is a diamond broker"ã9009 data "60 richter is the most hedonistic person in florida"ã9010 data "70 all men are mortal"ã9011 data "80 no genius is a fool"ã9012 data "90 all diamond brokers are people with good taste"ã9013 data "100 the most hedonistic person in florida is a decision-theorist"ã9030 restore 9004ã9040 if msg then print "Suggestion: try the LINK or LINK* command."ã9050 returnã9060 rem---Substitute terms---ã9070 print "Enter address of old term; or 0 for help, -1 to exit, -2 for dump"ã9080 input i1ã9090 if i1 = -1 then 9470ã9100 if i1 <> -2 then 9130ã9110  gosub 8890ã9120  goto 9070ã9130 if i1 > 0 then 9340ã9140 print "   This subroutine allows a term in a syllogism to be uniformly"ã9150 print "replaced by another term.  This is useful e.g. for finding an"ã9160 print "interpretation which actually makes the premises true, to produce as"ã9170 print "an obvious example of invalidity an argument having exactly the same"ã9180 print "logical form.  The substitution does not take place in the premises"ã9190 print "as originally entered; it takes place in the terms as stored within"ã9200 print "the program.  Thus, the LINK and LIST commands will display the"ã9210 print "original premises; to see the changed ones, use the LIST* and LINK*"ã9215 print "commands."ã9220 print "   To find the 'addresses' of the terms, enter -2 to run the DUMP."ã9230 print "   Warning: if you replace a term with another one already occurring"ã9240 print "in the syllogism, the result will not make much sense.  However,"ã9245 print "this routine does not convert entered term to lower-case or singular."ã9250 goto 9455ã9340 if i1 <= l1 then 9370ã9350  print "Address ";i1;" too large.  Symbol table only of length ";l1ã9360  goto 9455ã9370 print "Enter new term to replace ";g$(g(i1));" '";t$(i1);"'"ã9380  input w$ã9440  t$(i1) = w$ã9450  print "Replaced by '";w$;"'"ã9455 printã9460  goto 9070ã9470 print "Exit from substitution routine"ã9480 returnã9999 endã