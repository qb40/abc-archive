Don Schullian, Jr.             Long Integer Retrieval         d83@DASoftVSS.com              06-16-02 (  :  )       PBCC                   67   2647     fExitKey.bas#IF 0„    ----------------------------                       PowerBASIC/cc v2+„ ---|          DASoft          |------------------------------------------„    ----------------------------         Code           DATE: 2002-04-16„    | FILE NAME   fExitKey.bas |          by„    ----------------------------  Don Schullian, Jr.„„              This code is released into the Public Domain„       ----------------------------------------------------------„        No guarantee as to the viability, accuracy, or safety of„         use of this code is implied, warranted, or guaranteed„       ----------------------------------------------------------„                         Use at your own risk!„       ----------------------------------------------------------„                  CONTACT AUTHOR AT d83@DASoftVSS.com„ -------------------------------------------------------------------------„ This function is to be used with the return values from fGetKey. The test„ code, included, assumes that you have fGetKey.bas in the same directory.„„ Its purpose is to quickly scan a string looking for an included LONG„ INTEGER value.„„#ENDIF„„FUNCTION fExitKey ALIAS "fExitKey" ( BYVAL ExitKeys AS STRING, _„                                     BYVAL KeyPress AS LONG    ) EXPORT AS LONG„„  #REGISTER NONE„„  DIM Tlen AS LOCAL LONG„„  Tlen = LEN(ExitKeys)„„                ! push  edi                     ; save this for later„                ! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;„                ! mov   ecx, Tlen               ; set length of string to be searched„                ! shr   ecx, 2                  ; divide length by 4„                ! jecxz fExetDONE               ; oops! nothing to search for„                ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;„                ! mov   edi, ExitKeys           ; set string address„                ! mov   eax, KeyPress           ; set INTEGER being searched for„                ! repne scasd                   ; find 4byte string in Exet$„                ! jne   fExetDONE               ; if no match found then EXIT FUNCTION„                ! mov   FUNCTION, -1            ; RETURN TRUE„  fExetDONE:    ' ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;„                ! pop   edi                     ;„„END FUNCTION„„„#INCLUDE "fGetKey.bas"„„FUNCTION PBmain ()„„  DIM ExitKeys AS LOCAL STRING„  DIM K        AS LOCAL LONG„„  PRINT "Press different keys to see the return values."„  PRINT "Press <ESC> or <F-10> to end program.„„  ExitKeys = $ESC_key & $F10_key„  DO„    K = fGetKey„    PRINT "&h" & HEX$(K,6)„  LOOP UNTIL fExitKey(ExitKeys,K)„„END FUNCTION„Don Schullian, Jr.             Windows GetKey Function        d83@DASoftVSS.com              06-16-02 (  :  )       PBCC                   335  24070    fGetKey.bas #IF 0„    ----------------------------                        PowerBASIC/cc v2+„ ---|          DASoft          |------------------------------------------„    ----------------------------         Code           DATE: 2002-04-16„    | FILE NAME    fGetKey.bas |          by„    ----------------------------  Don Schullian, Jr.„„              This code is released into the Public Domain„       ----------------------------------------------------------„        No guarantee as to the viability, accuracy, or safety of„         use of this code is implied, warranted, or guaranteed„       ----------------------------------------------------------„                         Use at your own risk!„       ----------------------------------------------------------„                  CONTACT AUTHOR at d83@DASoftVSS.com„ -------------------------------------------------------------------------„ For years I've used and promoted my fGetKey function. This, the latest„ version has been upgraded to return LONG INTEGERs instead of regular„ (2 byte) INTEGERs. This should make your code much faster in the Windows'„ environments. As those of you who use fGetKey will note all the scalar„ equates have retained the same names so upgrading should be seamless.„ The only exception would be in the return of the mouse's values. This„ new set is much stronger than the old one and can actually be made to„ return <CTRL>, <ALT> and <SHIFT> values as well as the mouse's values.„„ As an addition I've also created a matching set of string equates for the„ times when one needs to shovel values into a string. (e.g. for fExitKey)„„ For those of you who have not, yet, run into fGetKey the theory is simple„ enough: All key strokes pass through one centeralized location in the„ program. This allows you, the programmer, to trap incoming values and„ make decisions on them BEFORE you release them back to the calling„ routine. There are 2 versions of fGetKey included in this file. One is a„ 'plane Jane' version while the other one shows how I handle Greek in PBcc„ and, at the same time disallow the pipe character "|", and return all„ capitals.„„ As you can see, fGetKey is more a concept than just a chunk of code that„ you throw into your programs. Each program could, very well, require its„ own special version of the routine.„„ If you have questions, please feel free to drop me a note.„„ Don„#ENDIF„„                        %ALT_key       = &h100000 : %CTRL_key       = &h200000 : %SHIFT_key   = &h400000„%HOME_key  = &h004700 : %ALT_HOME      = &h104700 : %CTRL_HOME      = &h204700 : %SHIFT_HOME  = &h404700„%UP_key    = &h004800 : %ALT_UP        = &h104800 : %CTRL_UP        = &h204800 : %SHIFT_UP    = &h404800„%PGUP_key  = &h004900 : %ALT_PGUP      = &h104900 : %CTRL_PGUP      = &h204900 : %SHIFT_PGUP  = &h404900„%LEFT_key  = &h004B00 : %ALT_LEFT      = &h104B00 : %CTRL_LEFT      = &h204B00 : %SHIFT_LEFT  = &h404B00„%RIGHT_key = &h004D00 : %ALT_RIGHT     = &h104D00 : %CTRL_RIGHT     = &h204D00 : %SHIFT_RIGHT = &h404D00„%END_key   = &h004F00 : %ALT_END       = &h104F00 : %CTRL_END       = &h204F00 : %SHIFT_END   = &h404F00„%DOWN_key  = &h005000 : %ALT_DOWN      = &h105000 : %CTRL_DOWN      = &h205000 : %SHIFT_DOWN  = &h405000„%PGDN_key  = &h005100 : %ALT_PGDN      = &h105100 : %CTRL_PGDN      = &h205100 : %SHIFT_PGDN  = &h405100„%INS_key   = &h005200 : %ALT_INS       = &h105200 : %CTRL_INS       = &h205200 : %SHIFT_INS   = &h405200„%DEL_key   = &h005300 : %ALT_DEL       = &h105300 : %CTRL_DEL       = &h205300 : %SHIFT_DEL   = &h405300„%ENTER_key = &h00000D :                             %CTRL_ENTER     = &h20000A : %SHIFT_ENTER = &h40000D„%ESC_key   = &h00001B :                                                          %SHIFT_ESC   = &h40001B„%BKSPC_key = &h000008 : %ALT_BKSPC     = &h100008 : %CTRL_BKSPC     = &h20007F : %SHIFT_BKSPC = &h400008„%TAB_key   = &h000009 :                             %CTRL_TAB       = &h200F00 : %SHIFT_TAB   = &h400009„%F01_key   = &h003B00 : %ALT_F01       = &h103B00 : %CTRL_F01       = &h203B00 : %SHIFT_F01   = &h403B00„%F02_key   = &h003C00 : %ALT_F02       = &h103C00 : %CTRL_F02       = &h203C00 : %SHIFT_F02   = &h403C00„%F03_key   = &h003D00 : %ALT_F03       = &h103D00 : %CTRL_F03       = &h203D00 : %SHIFT_F03   = &h403D00„%F04_key   = &h003E00 : %ALT_F04       = &h103E00 : %CTRL_F04       = &h203E00 : %SHIFT_F04   = &h403E00„%F05_key   = &h003F00 : %ALT_F05       = &h103F00 : %CTRL_F05       = &h203F00 : %SHIFT_F05   = &h403F00„%F06_key   = &h004000 : %ALT_F06       = &h104000 : %CTRL_F06       = &h204000 : %SHIFT_F06   = &h404000„%F07_key   = &h004100 : %ALT_F07       = &h104100 : %CTRL_F07       = &h204100 : %SHIFT_F07   = &h404100„%F08_key   = &h004200 : %ALT_F08       = &h104200 : %CTRL_F08       = &h204200 : %SHIFT_F08   = &h404200„%F09_key   = &h004300 : %ALT_F09       = &h104300 : %CTRL_F09       = &h204300 : %SHIFT_F09   = &h404300„%F10_key   = &h004400 : %ALT_F10       = &h104400 : %CTRL_F10       = &h204400 : %SHIFT_F10   = &h404400„%F11_key   = &h005700 : %ALT_F11       = &h105700 : %CTRL_F11       = &h203B00 : %SHIFT_F11   = &h405700„%F12_key   = &h005800 : %ALT_F12       = &h105800 : %CTRL_F12       = &h203B00 : %SHIFT_F12   = &h405800„                        %ALT_0         = &h100030 : %CTRL_0         = &h200B00„                        %ALT_1         = &h100031 : %CTRL_1         = &h200200„                        %ALT_2         = &h100032 : %CTRL_2         = &h200300„                        %ALT_3         = &h100033 : %CTRL_3         = &h200400„                        %ALT_4         = &h100034 : %CTRL_4         = &h200500„                        %ALT_5         = &h100035 : %CTRL_5         = &h200600„                        %ALT_6         = &h100036 : %CTRL_6         = &h20F200„                        %ALT_7         = &h100037 : %CTRL_7         = &h200800„                        %ALT_8         = &h100038 : %CTRL_8         = &h200900„                        %ALT_9         = &h100039 : %CTRL_9         = &h200A00„                        %ALT_A         = &h101E00 : %CTRL_A         = &h200001„                        %ALT_B         = &h103000 : %CTRL_B         = &h200002„                        %ALT_C         = &h102E00 : %CTRL_C         = &h200003„                        %ALT_D         = &h102000 : %CTRL_D         = &h200004„                        %ALT_E         = &h101200 : %CTRL_E         = &h200005„                        %ALT_F         = &h102100 : %CTRL_F         = &h200006„                        %ALT_G         = &h102200 : %CTRL_G         = &h200007„                        %ALT_H         = &h102300 : %CTRL_H         = &h200008„                        %ALT_I         = &h101700 : %CTRL_I         = &h200009„                        %ALT_J         = &h102400 : %CTRL_J         = &h20000A„                        %ALT_K         = &h102500 : %CTRL_K         = &h20000B„                        %ALT_L         = &h102600 : %CTRL_L         = &h20000C„                        %ALT_M         = &h103200 : %CTRL_M         = &h20000D„                        %ALT_N         = &h103100 : %CTRL_N         = &h20000E„                        %ALT_O         = &h101800 : %CTRL_O         = &h20000F„                        %ALT_P         = &h101900 : %CTRL_P         = &h200010„                        %ALT_Q         = &h101000 : %CTRL_Q         = &h200011„                        %ALT_R         = &h101300 : %CTRL_R         = &h200012„                        %ALT_S         = &h101F00 : %CTRL_S         = &h200013„                        %ALT_T         = &h101400 : %CTRL_T         = &h200014„                        %ALT_U         = &h101600 : %CTRL_U         = &h200015„                        %ALT_V         = &h102F00 : %CTRL_V         = &h200016„                        %ALT_W         = &h101100 : %CTRL_W         = &h200017„                        %ALT_X         = &h102D00 : %CTRL_X         = &h200018„                        %ALT_Y         = &h101500 : %CTRL_Y         = &h200019„                        %ALT_Z         = &h102C00 : %CTRL_Z         = &h20001A„%PIPE_key  = &h00007C„%PLUS_key  = &h00002B„%MINUS_key = &h00002D : %ALT_MINUS     = &h10002D : %CTRL_MINUS     = &h200C00„%EQUAL_key = &h00003D : %ALT_EQUAL     = &h10003D : %CTRL_EQUAL     = &h200D00„                        %ALT_F_SLASH   = &h10002F : %CTRL_F_SLASH   = &h203500„                        %ALT_B_SLASH   = &h10005C : %CTRL_B_SLASH   = &h20001C„                        %ALT_TILDE     = &h100060 : %CTRL_TILDE     = &h202900„                        %ALT_QUOTE     = &h100027 : %CTRL_QUOTE     = &h202800„                        %ALT_COLON     = &h10003B : %CTRL_COLON     = &h202700„                        %ALT_COMMA     = &h10002C : %CTRL_COMMA     = &h203300„                        %ALT_PERIOD    = &h10002E : %CTRL_PERIOD    = &h203400„                        %ALT_L_BRACKET = &h10005B : %CTRL_L_BRACKET = &h20001B„                        %ALT_R_BRACKET = &h10005D : %CTRL_R_BRACKET = &h20001D„%GRAY5_key = &h004C00 : %ALT_GRAY5     = &h104C00 : %CTRL_GRAY5     = &h204C00„                        %ALT_GRAYPLUS  = &h104E00 : %CTRL_GRAYPLUS  = &h204E00„                                                    %CTRL_GRAYMINUS = &h204A00„                                                    %CTRL_GRAYSLASH = &h203500„                                                    %CTRL_GRAYSTAR  = &h203700„'---------------------------------------------------------------------------------------„%Mouse_Hit       = &h0000FFFF„%Mouse_Move      = &h0001FFFF„„%Mouse_Double    = &h0002FFFF„%Mouse_Down      = &h0004FFFF„%Mouse_Up        = &h0008FFFF„„%Mouse_Double_L  = &h0102FFFF„%Mouse_Down_L    = &h0104FFFF„%Mouse_Up_L      = &h0108FFFF„„%Mouse_Double_R  = &h0202FFFF„%Mouse_Down_R    = &h0204FFFF„%Mouse_Up_R      = &h0208FFFF„„%Mouse_Double_L2 = &h0402FFFF„%Mouse_Down_L2   = &h0404FFFF„%Mouse_Up_L2     = &h0408FFFF„„%Mouse_Double_L3 = &h0802FFFF„%Mouse_Down_L3   = &h0804FFFF„%Mouse_Up_L3     = &h0808FFFF„„%Mouse_Double_L4 = &h1002FFFF„%Mouse_Down_L4   = &h1004FFFF„%Mouse_Up_L4     = &h1008FFFF„'---------------------------------------------------------------------------„'------------  STRING VALUES FOR MKL$(fGetKey)  ----------------------------„'---------------------------------------------------------------------------„                               $ALT_key       = CHR$(0,000,016,0) : $CTRL_key       = CHR$(0,000,032,0) : $SHIFT_key   = CHR$(0,000,064,0)„$HOME_key  = CHR$(0,071,0,0) : $ALT_HOME      = CHR$(0,071,016,0) : $CTRL_HOME      = CHR$(0,071,032,0) : $SHIFT_HOME  = CHR$(0,071,064,0)„$UP_key    = CHR$(0,072,0,0) : $ALT_UP        = CHR$(0,072,016,0) : $CTRL_UP        = CHR$(0,072,032,0) : $SHIFT_UP    = CHR$(0,072,064,0)„$PGUP_key  = CHR$(0,073,0,0) : $ALT_PGUP      = CHR$(0,073,016,0) : $CTRL_PGUP      = CHR$(0,073,032,0) : $SHIFT_PGUP  = CHR$(0,073,064,0)„$LEFT_key  = CHR$(0,075,0,0) : $ALT_LEFT      = CHR$(0,075,016,0) : $CTRL_LEFT      = CHR$(0,075,032,0) : $SHIFT_LEFT  = CHR$(0,075,064,0)„$RIGHT_key = CHR$(0,077,0,0) : $ALT_RIGHT     = CHR$(0,077,016,0) : $CTRL_RIGHT     = CHR$(0,077,032,0) : $SHIFT_RIGHT = CHR$(0,077,064,0)„$END_key   = CHR$(0,079,0,0) : $ALT_END       = CHR$(0,079,016,0) : $CTRL_END       = CHR$(0,079,032,0) : $SHIFT_END   = CHR$(0,079,064,0)„$DOWN_key  = CHR$(0,080,0,0) : $ALT_DOWN      = CHR$(0,080,016,0) : $CTRL_DOWN      = CHR$(0,080,032,0) : $SHIFT_DOWN  = CHR$(0,080,064,0)„$PGDN_key  = CHR$(0,081,0,0) : $ALT_PGDN      = CHR$(0,081,016,0) : $CTRL_PGDN      = CHR$(0,081,032,0) : $SHIFT_PGDN  = CHR$(0,081,064,0)„$INS_key   = CHR$(0,082,0,0) : $ALT_INS       = CHR$(0,082,016,0) : $CTRL_INS       = CHR$(0,082,032,0) : $SHIFT_INS   = CHR$(0,082,064,0)„$DEL_key   = CHR$(0,083,0,0) : $ALT_DEL       = CHR$(0,083,016,0) : $CTRL_DEL       = CHR$(0,083,032,0) : $SHIFT_DEL   = CHR$(0,083,064,0)„$ENTER_key = CHR$(013,0,0,0) :                                      $CTRL_ENTER     = CHR$(010,0,032,0) : $SHIFT_ENTER = CHR$(013,0,064,0)„$ESC_key   = CHR$(027,0,0,0) :                                                                            $SHIFT_ESC   = CHR$(027,0,064,0)„$BKSPC_key = CHR$(008,0,0,0) : $ALT_BKSPC     = CHR$(008,0,016,0) : $CTRL_BKSPC     = CHR$(127,0,032,0) : $SHIFT_BKSPC = CHR$(008,0,064,0)„$TAB_key   = CHR$(009,0,0,0) :                                      $CTRL_TAB       = CHR$(0,015,032,0) : $SHIFT_TAB   = CHR$(009,0,064,0)„$F01_key   = CHR$(0,059,0,0) : $ALT_F01       = CHR$(0,059,016,0) : $CTRL_F01       = CHR$(0,059,032,0) : $SHIFT_F01   = CHR$(0,059,064,0)„$F02_key   = CHR$(0,060,0,0) : $ALT_F02       = CHR$(0,060,016,0) : $CTRL_F02       = CHR$(0,060,032,0) : $SHIFT_F02   = CHR$(0,060,064,0)„$F03_key   = CHR$(0,061,0,0) : $ALT_F03       = CHR$(0,061,016,0) : $CTRL_F03       = CHR$(0,061,032,0) : $SHIFT_F03   = CHR$(0,061,064,0)„$F04_key   = CHR$(0,062,0,0) : $ALT_F04       = CHR$(0,062,016,0) : $CTRL_F04       = CHR$(0,062,032,0) : $SHIFT_F04   = CHR$(0,062,064,0)„$F05_key   = CHR$(0,063,0,0) : $ALT_F05       = CHR$(0,063,016,0) : $CTRL_F05       = CHR$(0,063,032,0) : $SHIFT_F05   = CHR$(0,063,064,0)„$F06_key   = CHR$(0,064,0,0) : $ALT_F06       = CHR$(0,064,016,0) : $CTRL_F06       = CHR$(0,064,032,0) : $SHIFT_F06   = CHR$(0,064,064,0)„$F07_key   = CHR$(0,065,0,0) : $ALT_F07       = CHR$(0,065,016,0) : $CTRL_F07       = CHR$(0,065,032,0) : $SHIFT_F07   = CHR$(0,065,064,0)„$F08_key   = CHR$(0,066,0,0) : $ALT_F08       = CHR$(0,066,016,0) : $CTRL_F08       = CHR$(0,066,032,0) : $SHIFT_F08   = CHR$(0,066,064,0)„$F09_key   = CHR$(0,067,0,0) : $ALT_F09       = CHR$(0,067,016,0) : $CTRL_F09       = CHR$(0,067,032,0) : $SHIFT_F09   = CHR$(0,067,064,0)„$F10_key   = CHR$(0,068,0,0) : $ALT_F10       = CHR$(0,068,016,0) : $CTRL_F10       = CHR$(0,068,032,0) : $SHIFT_F10   = CHR$(0,068,064,0)„$F11_key   = CHR$(0,087,0,0) : $ALT_F11       = CHR$(0,087,016,0) : $CTRL_F11       = CHR$(0,059,032,0) : $SHIFT_F11   = CHR$(0,087,064,0)„$F12_key   = CHR$(0,088,0,0) : $ALT_F12       = CHR$(0,088,016,0) : $CTRL_F12       = CHR$(0,059,032,0) : $SHIFT_F12   = CHR$(0,088,064,0)„                               $ALT_0         = CHR$(048,0,016,0) : $CTRL_0         = CHR$(0,011,032,0)„                               $ALT_1         = CHR$(049,0,016,0) : $CTRL_1         = CHR$(0,002,032,0)„                               $ALT_2         = CHR$(050,0,016,0) : $CTRL_2         = CHR$(0,003,032,0)„                               $ALT_3         = CHR$(051,0,016,0) : $CTRL_3         = CHR$(0,004,032,0)„                               $ALT_4         = CHR$(052,0,016,0) : $CTRL_4         = CHR$(0,005,032,0)„                               $ALT_5         = CHR$(053,0,016,0) : $CTRL_5         = CHR$(0,006,032,0)„                               $ALT_6         = CHR$(054,0,016,0) : $CTRL_6         = CHR$(0,242,032,0)„                               $ALT_7         = CHR$(055,0,016,0) : $CTRL_7         = CHR$(0,008,032,0)„                               $ALT_8         = CHR$(056,0,016,0) : $CTRL_8         = CHR$(0,009,032,0)„                               $ALT_9         = CHR$(057,0,016,0) : $CTRL_9         = CHR$(0,010,032,0)„                               $ALT_A         = CHR$(0,030,016,0) : $CTRL_A         = CHR$(001,0,032,0)„                               $ALT_B         = CHR$(0,048,016,0) : $CTRL_B         = CHR$(002,0,032,0)„                               $ALT_C         = CHR$(0,046,016,0) : $CTRL_C         = CHR$(003,0,032,0)„                               $ALT_D         = CHR$(0,032,016,0) : $CTRL_D         = CHR$(004,0,032,0)„                               $ALT_E         = CHR$(0,018,016,0) : $CTRL_E         = CHR$(005,0,032,0)„                               $ALT_F         = CHR$(0,033,016,0) : $CTRL_F         = CHR$(006,0,032,0)„                               $ALT_G         = CHR$(0,034,016,0) : $CTRL_G         = CHR$(007,0,032,0)„                               $ALT_H         = CHR$(0,035,016,0) : $CTRL_H         = CHR$(008,0,032,0)„                               $ALT_I         = CHR$(0,023,016,0) : $CTRL_I         = CHR$(009,0,032,0)„                               $ALT_J         = CHR$(0,036,016,0) : $CTRL_J         = CHR$(010,0,032,0)„                               $ALT_K         = CHR$(0,037,016,0) : $CTRL_K         = CHR$(011,0,032,0)„                               $ALT_L         = CHR$(0,038,016,0) : $CTRL_L         = CHR$(012,0,032,0)„                               $ALT_M         = CHR$(0,050,016,0) : $CTRL_M         = CHR$(013,0,032,0)„                               $ALT_N         = CHR$(0,049,016,0) : $CTRL_N         = CHR$(014,0,032,0)„                               $ALT_O         = CHR$(0,024,016,0) : $CTRL_O         = CHR$(015,0,032,0)„                               $ALT_P         = CHR$(0,025,016,0) : $CTRL_P         = CHR$(016,0,032,0)„                               $ALT_Q         = CHR$(0,016,016,0) : $CTRL_Q         = CHR$(017,0,032,0)„                               $ALT_R         = CHR$(0,019,016,0) : $CTRL_R         = CHR$(018,0,032,0)„                               $ALT_S         = CHR$(0,031,016,0) : $CTRL_S         = CHR$(019,0,032,0)„                               $ALT_T         = CHR$(0,020,016,0) : $CTRL_T         = CHR$(020,0,032,0)„                               $ALT_U         = CHR$(0,022,016,0) : $CTRL_U         = CHR$(021,0,032,0)„                               $ALT_V         = CHR$(0,047,016,0) : $CTRL_V         = CHR$(022,0,032,0)„                               $ALT_W         = CHR$(0,017,016,0) : $CTRL_W         = CHR$(023,0,032,0)„                               $ALT_X         = CHR$(0,045,016,0) : $CTRL_X         = CHR$(024,0,032,0)„                               $ALT_Y         = CHR$(0,021,016,0) : $CTRL_Y         = CHR$(025,0,032,0)„                               $ALT_Z         = CHR$(0,044,016,0) : $CTRL_Z         = CHR$(026,0,032,0)„$PIPE_key  = CHR$(124,0,0,0)„$PLUS_key  = CHR$(043,0,0,0)„$MINUS_key = CHR$(045,0,0,0) : $ALT_MINUS     = CHR$(045,0,016,0) : $CTRL_MINUS     = CHR$(0,012,032,0)„$EQUAL_key = CHR$(061,0,0,0) : $ALT_EQUAL     = CHR$(061,0,016,0) : $CTRL_EQUAL     = CHR$(0,013,032,0)„                               $ALT_F_SLASH   = CHR$(047,0,016,0) : $CTRL_F_SLASH   = CHR$(0,053,032,0)„                               $ALT_B_SLASH   = CHR$(092,0,016,0) : $CTRL_B_SLASH   = CHR$(028,0,032,0)„                               $ALT_TILDE     = CHR$(096,0,016,0) : $CTRL_TILDE     = CHR$(0,041,032,0)„                               $ALT_QUOTE     = CHR$(039,0,016,0) : $CTRL_QUOTE     = CHR$(0,040,032,0)„                               $ALT_COLON     = CHR$(059,0,016,0) : $CTRL_COLON     = CHR$(0,039,032,0)„                               $ALT_COMMA     = CHR$(044,0,016,0) : $CTRL_COMMA     = CHR$(0,051,032,0)„                               $ALT_PERIOD    = CHR$(046,0,016,0) : $CTRL_PERIOD    = CHR$(0,052,032,0)„                               $ALT_L_BRACKET = CHR$(091,0,016,0) : $CTRL_L_BRACKET = CHR$(027,0,032,0)„                               $ALT_R_BRACKET = CHR$(093,0,016,0) : $CTRL_R_BRACKET = CHR$(029,0,032,0)„$GRAY5_key = CHR$(0,076,0,0) : $ALT_GRAY5     = CHR$(0,076,016,0) : $CTRL_GRAY5     = CHR$(0,076,032,0)„                               $ALT_GRAYPLUS  = CHR$(0,078,016,0) : $CTRL_GRAYPLUS  = CHR$(0,078,032,0)„                                                                    $CTRL_GRAYMINUS = CHR$(0,074,032,0)„                                                                    $CTRL_GRAYSLASH = CHR$(0,053,032,0)„                                                                    $CTRL_GRAYSTAR  = CHR$(0,055,032,0)„'---------------------------------------------------------------------------------------„$Mouse_Hit       = CHR$(255,255,000,000)„$Mouse_Move      = CHR$(255,255,001,000)„„$Mouse_Double    = CHR$(255,255,002,000)„$Mouse_Down      = CHR$(255,255,004,000)„$Mouse_Up        = CHR$(255,255,008,000)„„$Mouse_Double_L  = CHR$(255,255,002,001)„$Mouse_Down_L    = CHR$(255,255,004,001)„$Mouse_Up_L      = CHR$(255,255,008,001)„„$Mouse_Double_R  = CHR$(255,255,002,002)„$Mouse_Down_R    = CHR$(255,255,004,002)„$Mouse_Up_R      = CHR$(255,255,008,002)„„$Mouse_Double_L2 = CHR$(255,255,002,004)„$Mouse_Down_L2   = CHR$(255,255,004,004)„$Mouse_Up_L2     = CHR$(255,255,008,004)„„$Mouse_Double_L3 = CHR$(255,255,002,008)„$Mouse_Down_L3   = CHR$(255,255,004,008)„$Mouse_Up_L3     = CHR$(255,255,008,008)„„$Mouse_Double_L4 = CHR$(255,255,002,016)„$Mouse_Down_L4   = CHR$(255,255,004,016)„$Mouse_Up_L4     = CHR$(255,255,008,016)„„#if 1„  FUNCTION fGetKey ALIAS "fGetKey" () AS LONG„„    DIM I AS LOCAL  LONG                                   '„    DIM K AS LOCAL  LONG                                   '„                                                           '„    K = CVL(WAITKEY$)                                      '„    I = (INSHIFT AND &b011111)                             ' ALT, CTRL & SHIFT„                                                           '„    IF (I AND  3) THEN BIT SET K, 20                       ' etiher ALT keys„    IF (I AND 12) THEN BIT SET K, 21                       ' either CTRL keys„                                                           '„    IF (K <  31) OR (K > 255) THEN                         ' if not a letter key„      IF (I AND 16) THEN BIT SET K, 22                     '  set either SHIFT keys„    END IF                                                 '„                                                           '„    FUNCTION = K                                           '„                                                           '„  END FUNCTION                                             '„#else„  FUNCTION fGetKey ALIAS "fGetKey" () AS LONG„„    DIM English AS STATIC LONG                             '„    DIM I       AS LOCAL  LONG                             '„    DIM K       AS LOCAL  LONG                             '„                                                           '„    DO                                                     '„      K = CVL(WAITKEY$)                                    '„      I = (INSHIFT AND &b011111)                           ' ALT, CTRL & SHIFT„                                                           '„      IF (I AND  3) THEN BIT SET K, 20                     ' etiher ALT keys„      IF (I AND 12) THEN BIT SET K, 21                     ' either CTRL keys„                                                           '„      IF (K <  31) OR (K > 255) THEN                       ' if not a letter key„          IF (I AND 16) THEN BIT SET K, 22                 '  set either SHIFT keys„        ELSE                                               '„          IF (K > 96) AND (K < 123) THEN BIT RESET K, 5    ' UCASE the English letters„          IF (English = 0) AND (K > 64) AND (K < 91) THEN  ' if using non-English language„            K = ASC("ÄÅñÉÑîÇÜàçâäãåéè êëíáóëïìÖ",K-64)     '„          END IF                                           '„      END IF                                               '„                                                           '„      SELECT CASE K                                        '„        CASE %CTRL_ENTER : BIT TOGGLE English,0            '„        CASE %PIPE_key   : ITERATE                         '„        CASE ELSE        : EXIT LOOP                       '„      END SELECT                                           '„    LOOP                                                   '„                                                           '„    FUNCTION = K                                           '„„  END FUNCTION„#endif„„#if 0„FUNCTION PBmain ()„„  DIM K AS LOCAL LONG„„  PRINT "Press different keys to see the return values."„  PRINT "Press <ESC> to end program.„„  DO„    K = fGetKey„    PRINT "&h" & HEX$(K,6)„  LOOP UNTIL K = %ESC_key„„END FUNCTION„#endif„Fred Buffington                Simple Input Function          oasys@sbcglobal.net            12-22-02 (  :  )       pbcc                   104  2538     smplinpt.bas'Fred Buffington„'Simple Input routine„'PBCC„„$COMPILE EXE „ „ DECLARE FUNCTION Linput(xpos%,ypos%,L%,df$) AS STRING „'------------------------------------------------ „'Linput input routine print brackets around input „'L% is length allow for the input routine „'xpos,ypos initial position on screen „'df$ is the default value „'------------------------------------------------ „ FUNCTION PBMAIN() „   CONSOLE SCREEN 26,80 „ „   dflt$="TEST" „   COLOR 15,1 „   CLS „   xvar$=linput(5,10,5,dflt$) „ „   LOCATE 12,5:PRINT xvar$;"<here" 'test to show result „   WHILE INKEY$="":WEND „ END FUNCTION „ „ FUNCTION Linput(x%,y%,L%,df$) AS STRING „   LOCAL del$,lft$,rit$,zend$,hom$ „ „   del$=CHR$(0)+CHR$(83)  'delete key „   Lft$=CHR$(0)+CHR$(75)  'left arrow „   rit$=CHR$(0)+CHR$(77)  'right arrow „   zend$=CHR$(0)+CHR$(79) 'end key „   hom$=CHR$(0)+CHR$(71)  'home key „   position%=0 „'   LOCATE y%,x%-1:PRINT "[";SPACE$(L%);"]"; „'  above can be used to put brackets around the input „   var$=df$ „   LOCATE y%,x%:PRINT var$; „   LOCATE y%,x% „   DO „ „       xinp$ = INKEY$ „ „'checkmouse here „ „       IF xinp$=zend$ THEN position%=l%-1 „ „       IF xinp$=Hom$ THEN position%=0 „ „       IF xinp$=lft$ THEN xinp$=CHR$(8) 'making 8  „nondestructive „ „       IF xinp$>CHR$(30) THEN „              IF position%+1>LEN(var$) THEN „ „                  var$=var$+xinp$:position%=position%+1 „              ELSE „                  MID$(var$,position%+1,1)=xinp$:position%=position%+1 „ „              END IF „ „        END IF „ „        IF xinp$=CHR$(8) THEN „ „'if you want descructive backspace then set xinp$ = del$ and rem position%=position%-1 „ „             position%=position%-1 „ „             IF position%<0 THEN position%=0 „ „        END IF „ „        IF xinp$ = del$ THEN „ „            IF position%>0 THEN „ „               var$=MID$(var$,1,position%)+MID$(var$,position%+2) „ „            ELSE „ „                 IF LEN(var$)>1 THEN „ „                    var$=MID$(var$,2):position%=0 „ „                 ELSE „  „                    var$="":position%=0 „ „                 END IF „ „            END IF „ „        END IF „ „        IF xinp$=rit$ THEN position%=position%+1 „ „        IF position%>=L% THEN position%=L%-1 „ „        IF xinp$<>"" THEN LOCATE y%,x%:PRINT SPACE$(L%);:LOCATE y%,x%:PRINT var$;:LOCATE y%,x%+position%:CURSOR ON „ „   LOOP UNTIL xinp$=CHR$(13) OR xinp$=CHR$(27) „   linput=var$ „ END FUNCTION „Jerry_Fielden                  List Box in PBCC               fielden@pldi.net               12-22-02 (  :  )       PBCC                   138  5458     PBlstbox.bas'Jerry_Fielden Email:  fielden@pldi.net „'PBCC ListBox„'PBCC„„#COMPILE EXE „   #REGISTER NONE „   #INCLUDE "C:\PBDLL61\WinAPI\win32api.inc" „    GLOBAL sText AS STRING „ „         ' Create Main window „   FUNCTION DialogNew (hWndParent AS DWORD, Title AS ASCIIZ, x AS LONG, _ „  y AS LONG, cx AS LONG, cy AS LONG, style AS DWORD, _ „  exStyle AS DWORD, lpDlgProc AS DWORD) AS LONG „ „ LOCAL hDlg AS DWORD „ DIM sDlgTemplateEx AS STRING „ sDlgTemplateEx = MKWRD$(1) + MKWRD$(&HFFFF) + MKDWD$(0) + _ „    MKDWD$(exStyle) + MKDWD$(style OR %DS_SETFONT OR %DS_FIXEDSYS) _ „    + MKWRD$(0) + MKI$(x) + MKI$(y) + MKI$(cx) + MKI$(cy) + MKI$(0) + MKI$(0) „ FUNCTION = DialogBoxIndirectParam (GetModuleHandle(""), _ „ BYVAL STRPTR(sDlgTemplateEx), hWndParent, lpDlgProc, 0) „ „   END FUNCTION „ „         ' Create Child windows „   FUNCTION ControlAdd (lpClassName AS ASCIIZ, hDlg AS DWORD, Id AS LONG, _ „    Title AS ASCIIZ, x AS LONG, y AS LONG, _ „ cx AS LONG, cy AS LONG, style AS DWORD, exStyle AS DWORD) AS DWORD „ „ LOCAL rc AS RECT, hWnd AS DWORD   ' Window sizes „ rc.nLeft = x: rc.nRight = x + cx „ rc.nTop = y: rc.nBottom = y + cy „ MapDialogRect hDlg, rc „          ' Create and get handle „ hWnd = CreateWindowEx (exStyle, lpClassName, Title, style, rc.nLeft, _ „ rc.nTop, rc.nRight - rc.nLeft,  rc.nBottom - rc.nTop, hDlg, Id, _ „ GetModuleHandle(""), BYVAL 0) „   END FUNCTION „ „ „   FUNCTION DlgProc (BYVAL hDlg AS DWORD, BYVAL wMsg AS DWORD, BYVAL wParam _ „ AS DWORD, BYVAL lParam AS LONG) AS LONG „ „ LOCAL x AS LONG, hLbox AS LONG, nLength AS LONG, nIndex AS LONG „ DIM arr(0:15) AS STRING, hCBox AS LONG „ „ IF wMsg = %WM_INITDIALOG THEN     ' Initialize child window, Label „  ControlAdd "static" , hDlg, 104, "Click on a Color", 30, 4, 60, 12, _ „       %WS_CHILD OR %WS_VISIBLE , 0 „               ' a Button „  ControlAdd "Button", hDlg, %IDOK, "&Ok", 30, 175, 50, 12, %WS_CHILD _ „       OR %WS_VISIBLE OR %WS_TABSTOP OR %BS_PUSHBUTTON, 0 „               ' a ListBox „  ControlAdd "ListBox", hDlg, 105, "", 22, 18, 68, 60, _ „       %WS_CHILD OR %WS_TABSTOP OR %WS_VISIBLE OR %LBS_NOTIFY OR _ „       %LBS_HASSTRINGS OR %LBS_USETABSTOPS, %WS_EX_CLIENTEDGE „               ' a Combo Box „  ControlAdd "ComboBox", hDlg, 106, "The Rest", 22, 80, 68, 100,  _ „       %WS_CHILD OR %WS_TABSTOP OR %WS_VISIBLE OR %CBS_DROPDOWN OR _ „       %CBS_AUTOHSCROLL OR %CBS_HASSTRINGS, 0 „ „ „   arr(0)  = "0 Black"   : arr(1)  = "1 Blue" „   arr(2)  = "2 Green"   : arr(3)  = "3 Cyan" „   arr(4)  = "4 Red"     : arr(5)  = "5 Magenta" „   arr(6)  = "6 Brown"   : arr(7)  = "7 Light Gray" „   arr(8)  = "8 Gray"    : arr(9)  = "9 Light Blue" „   arr(10) = "10 Light Green" : arr(11) = "11 Light Cyan" „   arr(12) = "12 Light Red"   : arr(13) = "13 Light Magenta" „   arr(14) = "14 Yellow" : arr(15) = "15 Bright White" „ „   FOR x = 0 TO 15      ' Load Array into boxes „     IF x < 7 THEN      ' Load half in Listbox „    hLBox = GetDlgItem( hDlg, 105 ) „    SendMessage hLBox, %LB_ADDSTRING, 0, STRPTR(arr(x)) „     ELSE „    hCBox = GetDlgItem( hDlg, 106 )     ' and half in Combo box „    SendMessage hCBox, %CB_ADDSTRING, 0, STRPTR(arr(x)) „     END IF „ „   NEXT x „   SendMessage hCBox, %CB_SETCURSEL, 0, 0    ' Get Combo default text „   GOSUB GetComboText „ „   SetForegroundWindow hDlg „ „ ELSEIF wMsg = %WM_COMMAND THEN     ' End the Dialog „   IF HIWRD(wParam) = %Bn_CLICKED AND LOWRD(wParam) = %IDOK THEN „    EndDialog hDlg, 0 „           ' Get selected ListBox text „   ELSEIF LOWRD(wParam) = 105 AND HIWRD(wParam) = %LBN_SELCHANGE THEN „       hLBox = GetDlgItem( hDlg, 105 ) „       nIndex = SendMessage( hLBox, %LB_GETCURSEL, 0, BYVAL 0& ) „       IF nIndex < 0 THEN EXIT FUNCTION „       nLength = SendMessage( hLBox, %LB_GETTEXTLEN, nIndex, BYVAL 0& ) „       IF nLength < 1 THEN EXIT FUNCTION „       sText = STRING$( nLength, 0 ) „       SendMessage hLBox, %LB_GETTEXT, nIndex, BYVAL STRPTR( sText ) „       MessageBox GetActiveWindow(), BYVAL STRPTR( sText ),"You picked", 0 OR %MB_TASKMODAL „             ' Get selected Combo text „   ELSEIF LOWRD(wParam) = 106 AND HIWRD(wParam) = %CBN_SELCHANGE THEN „       GOSUB GetComboText „       MessageBox GetActiveWindow(), BYVAL STRPTR( sText ),"You picked", 0 OR %MB_TASKMODAL „  END IF „ ELSEIF wMsg = %WM_CLOSE  THEN „   EndDialog hDlg,0 „ END IF „ „ EXIT FUNCTION „ „ GetComboText: „    hCBox = GetDlgItem( hDlg, 106 ) „    nIndex = SendMessage( hCBox, %CB_GETCURSEL, 0, BYVAL 0& ) „    IF nIndex < 0 THEN EXIT FUNCTION „    nLength = SendMessage( hCBox, %CB_GETLBTEXTLEN, nIndex&, BYVAL 0& ) „    IF nLength < 1 THEN EXIT FUNCTION „    sText = STRING$( nLength, 0 ) „    SendMessage hCBox,  %CB_GETLBTEXT, nIndex, BYVAL STRPTR( sText ) „ RETURN „ „  END FUNCTION „ „ „  FUNCTION PBMAIN AS LONG „     LOCAL sTitle AS STRING , nStyle AS LONG „ „     CALL DialogNew (0, "", 0, 0, 110, 200, %DS_MODALFRAME OR %DS_CENTER OR _ „     %WS_VISIBLE OR %WS_OVERLAPPEDWINDOW, 0, CODEPTR(DlgProc)) „ „     COLOR 4, VAL(LEFT$(sText, 2)) : CLS „ „     IF sText <> "" THEN sText = MID$(sText,3 ) „     IF sText = "" THEN sText = " You picked nothing "  ELSE sText = _ „     "Your final Pick is " & sText : sTitle = "   It looks like" „ „     MessageBox GetActiveWindow(), BYVAL STRPTR( sText ), BYVAL STRPTR( sTitle ), nStyle OR %MB_TASKMODAL „ „  END FUNCTION „